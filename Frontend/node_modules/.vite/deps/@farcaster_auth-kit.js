import {
  createPublicClient,
  http
} from "./chunk-4PVDZJ3S.js";
import "./chunk-KKQ4OWFU.js";
import {
  optimism
} from "./chunk-VGLIYKYO.js";
import "./chunk-L6MS2D6W.js";
import "./chunk-PZ4PLG5I.js";
import "./chunk-OW3HCODC.js";
import {
  require_jsx_runtime
} from "./chunk-SLIATTJL.js";
import {
  require_react_dom
} from "./chunk-WUVWK3JO.js";
import {
  require_react
} from "./chunk-UOUPSHR4.js";
import {
  __commonJS,
  __esm,
  __export,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __privateWrapper,
  __publicField,
  __require,
  __toCommonJS,
  __toESM
} from "./chunk-7REXU52E.js";

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt2 = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt2 / c;
        } else {
          value += rt2 * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
      }
      buffer[offset + i - d] |= s * 128;
    };
  }
});

// node_modules/buffer/index.js
var require_buffer = __commonJS({
  "node_modules/buffer/index.js"(exports) {
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        var proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      var buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer.prototype);
      return buf;
    }
    function Buffer(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      var valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer.from(valueOf, encodingOrOffset, length);
      }
      var b = fromObject(value);
      if (b)
        return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer.from(
          value[Symbol.toPrimitive]("string"),
          encodingOrOffset,
          length
        );
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      var length = byteLength(string, encoding) | 0;
      var buf = createBuffer(length);
      var actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(length);
      for (var i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      var buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer.alloc(+length);
    }
    Buffer.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer.prototype;
    };
    Buffer.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array))
        a = Buffer.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array))
        b = Buffer.from(b, b.offset, b.byteLength);
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b)
        return 0;
      var x2 = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x2, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x2 = a[i];
          y = b[i];
          break;
        }
      }
      if (x2 < y)
        return -1;
      if (y < x2)
        return 1;
      return 0;
    };
    Buffer.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer.alloc(0);
      }
      var i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            Buffer.from(buf).copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
        );
      }
      var len = string.length;
      var mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      var loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.prototype._isBuffer = true;
    function swap(b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }
    Buffer.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer.prototype.toString = function toString() {
      var length = this.length;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer.prototype.toLocaleString = Buffer.prototype.toString;
    Buffer.prototype.equals = function equals(b) {
      if (!Buffer.isBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer.compare(this, b) === 0;
    };
    Buffer.prototype.inspect = function inspect() {
      var str = "";
      var max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max)
        str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
    }
    Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer.from(target, target.offset, target.byteLength);
      }
      if (!Buffer.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x2 = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x2, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x2 = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x2 < y)
        return -1;
      if (y < x2)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer.from(val, encoding);
      }
      if (Buffer.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i;
            if (i - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j2 = 0; j2 < valLength; j2++) {
            if (read(arr, i + j2) !== read(val, j2)) {
              found = false;
              break;
            }
          }
          if (found)
            return i;
        }
      }
      return -1;
    }
    Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      var strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i;
        buf[offset + i] = parsed;
      }
      return i;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];
      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      var res = "";
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      var len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      var out = "";
      for (var i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = "";
      for (var i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      var newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      var val = this[offset + --byteLength2];
      var mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var i = byteLength2;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var mul = 1;
      var i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("Index out of range");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      var i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        byteArray.push(str.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0)
          break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length)
          break;
        dst[i + offset] = src[i];
      }
      return i;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      var alphabet = "0123456789abcdef";
      var table = new Array(256);
      for (var i = 0; i < 16; ++i) {
        var i16 = i * 16;
        for (var j2 = 0; j2 < 16; ++j2) {
          table[i16 + j2] = alphabet[i] + alphabet[j2];
        }
      }
      return table;
    }();
  }
});

// node_modules/apg-js/src/apg-lib/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/apg-js/src/apg-lib/identifiers.js"(exports, module) {
    module.exports = {
      // Identifies the operator type. Used by the generator
      // to indicate operator types in the grammar object.
      // Used by the [parser](./parser.html) when interpreting the grammar object.
      /* the original ABNF operators */
      ALT: 1,
      CAT: 2,
      REP: 3,
      RNM: 4,
      TRG: 5,
      TBS: 6,
      TLS: 7,
      /* the super set, SABNF operators */
      UDT: 11,
      AND: 12,
      NOT: 13,
      BKR: 14,
      BKA: 15,
      BKN: 16,
      ABG: 17,
      AEN: 18,
      // Used by the parser and the user's `RNM` and `UDT` callback functions.
      // Identifies the parser state as it traverses the parse tree nodes.
      // - *ACTIVE* - indicates the downward direction through the parse tree node.
      // - *MATCH* - indicates the upward direction and a phrase, of length \> 0, has been successfully matched
      // - *EMPTY* - indicates the upward direction and a phrase, of length = 0, has been successfully matched
      // - *NOMATCH* - indicates the upward direction and the parser failed to match any phrase at all
      ACTIVE: 100,
      MATCH: 101,
      EMPTY: 102,
      NOMATCH: 103,
      // Used by [`AST` translator](./ast.html) (semantic analysis) and the user's callback functions
      // to indicate the direction of flow through the `AST` nodes.
      // - *SEM_PRE* - indicates the downward (pre-branch) direction through the `AST` node.
      // - *SEM_POST* - indicates the upward (post-branch) direction through the `AST` node.
      SEM_PRE: 200,
      SEM_POST: 201,
      // Used by the user's callback functions to indicate to the `AST` translator (semantic analysis) how to proceed.
      // - *SEM_OK* - normal return value
      // - *SEM_SKIP* - if a callback function returns this value from the SEM_PRE state,
      // the translator will skip processing all `AST` nodes in the branch below the current node.
      // Ignored if returned from the SEM_POST state.
      SEM_OK: 300,
      SEM_SKIP: 301,
      // Used in attribute generation to distinguish the necessary attribute categories.
      // - *ATTR_N* - non-recursive
      // - *ATTR_R* - recursive
      // - *ATTR_MR* - belongs to a mutually-recursive set
      ATTR_N: 400,
      ATTR_R: 401,
      ATTR_MR: 402,
      // Look around values indicate whether the parser is in look ahead or look behind mode.
      // Used by the tracing facility to indicate the look around mode in the trace records display.
      // - *LOOKAROUND_NONE* - the parser is in normal parsing mode
      // - *LOOKAROUND_AHEAD* - the parse is in look-ahead mode, phrase matching for operator `AND(&)` or `NOT(!)`
      // - *LOOKAROUND_BEHIND* - the parse is in look-behind mode, phrase matching for operator `BKA(&&)` or `BKN(!!)`
      LOOKAROUND_NONE: 500,
      LOOKAROUND_AHEAD: 501,
      LOOKAROUND_BEHIND: 502,
      // Back reference rule mode indicators
      // - *BKR_MODE_UM* - the back reference is using universal mode
      // - *BKR_MODE_PM* - the back reference is using parent frame mode
      // - *BKR_MODE_CS* - the back reference is using case-sensitive phrase matching
      // - *BKR_MODE_CI* - the back reference is using case-insensitive phrase matching
      BKR_MODE_UM: 601,
      BKR_MODE_PM: 602,
      BKR_MODE_CS: 603,
      BKR_MODE_CI: 604
    };
  }
});

// node_modules/apg-js/src/apg-lib/style.js
var require_style = __commonJS({
  "node_modules/apg-js/src/apg-lib/style.js"(exports, module) {
    module.exports = {
      // Generated by apglib/style.js 
      CLASS_MONOSPACE: "apg-mono",
      CLASS_ACTIVE: "apg-active",
      CLASS_EMPTY: "apg-empty",
      CLASS_MATCH: "apg-match",
      CLASS_NOMATCH: "apg-nomatch",
      CLASS_LOOKAHEAD: "apg-lh-match",
      CLASS_LOOKBEHIND: "apg-lb-match",
      CLASS_REMAINDER: "apg-remainder",
      CLASS_CTRLCHAR: "apg-ctrl-char",
      CLASS_LINEEND: "apg-line-end",
      CLASS_ERROR: "apg-error",
      CLASS_PHRASE: "apg-phrase",
      CLASS_EMPTYPHRASE: "apg-empty-phrase",
      CLASS_STATE: "apg-state",
      CLASS_STATS: "apg-stats",
      CLASS_TRACE: "apg-trace",
      CLASS_GRAMMAR: "apg-grammar",
      CLASS_RULES: "apg-rules",
      CLASS_RULESLINK: "apg-rules-link",
      CLASS_ATTRIBUTES: "apg-attrs"
    };
  }
});

// node_modules/apg-js/src/apg-conv-api/transformers.js
var require_transformers = __commonJS({
  "node_modules/apg-js/src/apg-conv-api/transformers.js"(exports) {
    "use strict;";
    var { Buffer } = require_buffer();
    var NON_SHORTEST = 4294967292;
    var TRAILING = 4294967293;
    var RANGE = 4294967294;
    var ILL_FORMED = 4294967295;
    var mask = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023];
    var ascii = [
      "00",
      "01",
      "02",
      "03",
      "04",
      "05",
      "06",
      "07",
      "08",
      "09",
      "0A",
      "0B",
      "0C",
      "0D",
      "0E",
      "0F",
      "10",
      "11",
      "12",
      "13",
      "14",
      "15",
      "16",
      "17",
      "18",
      "19",
      "1A",
      "1B",
      "1C",
      "1D",
      "1E",
      "1F",
      "20",
      "21",
      "22",
      "23",
      "24",
      "25",
      "26",
      "27",
      "28",
      "29",
      "2A",
      "2B",
      "2C",
      "2D",
      "2E",
      "2F",
      "30",
      "31",
      "32",
      "33",
      "34",
      "35",
      "36",
      "37",
      "38",
      "39",
      "3A",
      "3B",
      "3C",
      "3D",
      "3E",
      "3F",
      "40",
      "41",
      "42",
      "43",
      "44",
      "45",
      "46",
      "47",
      "48",
      "49",
      "4A",
      "4B",
      "4C",
      "4D",
      "4E",
      "4F",
      "50",
      "51",
      "52",
      "53",
      "54",
      "55",
      "56",
      "57",
      "58",
      "59",
      "5A",
      "5B",
      "5C",
      "5D",
      "5E",
      "5F",
      "60",
      "61",
      "62",
      "63",
      "64",
      "65",
      "66",
      "67",
      "68",
      "69",
      "6A",
      "6B",
      "6C",
      "6D",
      "6E",
      "6F",
      "70",
      "71",
      "72",
      "73",
      "74",
      "75",
      "76",
      "77",
      "78",
      "79",
      "7A",
      "7B",
      "7C",
      "7D",
      "7E",
      "7F",
      "80",
      "81",
      "82",
      "83",
      "84",
      "85",
      "86",
      "87",
      "88",
      "89",
      "8A",
      "8B",
      "8C",
      "8D",
      "8E",
      "8F",
      "90",
      "91",
      "92",
      "93",
      "94",
      "95",
      "96",
      "97",
      "98",
      "99",
      "9A",
      "9B",
      "9C",
      "9D",
      "9E",
      "9F",
      "A0",
      "A1",
      "A2",
      "A3",
      "A4",
      "A5",
      "A6",
      "A7",
      "A8",
      "A9",
      "AA",
      "AB",
      "AC",
      "AD",
      "AE",
      "AF",
      "B0",
      "B1",
      "B2",
      "B3",
      "B4",
      "B5",
      "B6",
      "B7",
      "B8",
      "B9",
      "BA",
      "BB",
      "BC",
      "BD",
      "BE",
      "BF",
      "C0",
      "C1",
      "C2",
      "C3",
      "C4",
      "C5",
      "C6",
      "C7",
      "C8",
      "C9",
      "CA",
      "CB",
      "CC",
      "CD",
      "CE",
      "CF",
      "D0",
      "D1",
      "D2",
      "D3",
      "D4",
      "D5",
      "D6",
      "D7",
      "D8",
      "D9",
      "DA",
      "DB",
      "DC",
      "DD",
      "DE",
      "DF",
      "E0",
      "E1",
      "E2",
      "E3",
      "E4",
      "E5",
      "E6",
      "E7",
      "E8",
      "E9",
      "EA",
      "EB",
      "EC",
      "ED",
      "EE",
      "EF",
      "F0",
      "F1",
      "F2",
      "F3",
      "F4",
      "F5",
      "F6",
      "F7",
      "F8",
      "F9",
      "FA",
      "FB",
      "FC",
      "FD",
      "FE",
      "FF"
    ];
    var base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".split("");
    var base64codes = [];
    base64chars.forEach((char) => {
      base64codes.push(char.charCodeAt(0));
    });
    exports.utf8 = {
      encode(chars) {
        const bytes = [];
        chars.forEach((char) => {
          if (char >= 0 && char <= 127) {
            bytes.push(char);
          } else if (char <= 2047) {
            bytes.push(192 + (char >> 6 & mask[5]));
            bytes.push(128 + (char & mask[6]));
          } else if (char < 55296 || char > 57343 && char <= 65535) {
            bytes.push(224 + (char >> 12 & mask[4]));
            bytes.push(128 + (char >> 6 & mask[6]));
            bytes.push(128 + (char & mask[6]));
          } else if (char >= 65536 && char <= 1114111) {
            const u = char >> 16 & mask[5];
            bytes.push(240 + (u >> 2));
            bytes.push(128 + ((u & mask[2]) << 4) + (char >> 12 & mask[4]));
            bytes.push(128 + (char >> 6 & mask[6]));
            bytes.push(128 + (char & mask[6]));
          } else {
            throw new RangeError(`utf8.encode: character out of range: char: ${char}`);
          }
        });
        return Buffer.from(bytes);
      },
      decode(buf, bom) {
        function bytes2(b12, b2) {
          if ((b2 & 192) !== 128) {
            return TRAILING;
          }
          const x2 = ((b12 & mask[5]) << 6) + (b2 & mask[6]);
          if (x2 < 128) {
            return NON_SHORTEST;
          }
          return x2;
        }
        function bytes3(b12, b2, b3) {
          if ((b3 & 192) !== 128 || (b2 & 192) !== 128) {
            return TRAILING;
          }
          const x2 = ((b12 & mask[4]) << 12) + ((b2 & mask[6]) << 6) + (b3 & mask[6]);
          if (x2 < 2048) {
            return NON_SHORTEST;
          }
          if (x2 >= 55296 && x2 <= 57343) {
            return RANGE;
          }
          return x2;
        }
        function bytes4(b12, b2, b3, b4) {
          if ((b4 & 192) !== 128 || (b3 & 192) !== 128 || (b2 & 192) !== 128) {
            return TRAILING;
          }
          const x2 = (((b12 & mask[3]) << 2) + (b2 >> 4 & mask[2]) << 16) + ((b2 & mask[4]) << 12) + ((b3 & mask[6]) << 6) + (b4 & mask[6]);
          if (x2 < 65536) {
            return NON_SHORTEST;
          }
          if (x2 > 1114111) {
            return RANGE;
          }
          return x2;
        }
        let c;
        let b1;
        let i1;
        let i2;
        let i3;
        let inc;
        const len = buf.length;
        let i = bom ? 3 : 0;
        const chars = [];
        while (i < len) {
          b1 = buf[i];
          c = ILL_FORMED;
          const TRUE = true;
          while (TRUE) {
            if (b1 >= 0 && b1 <= 127) {
              c = b1;
              inc = 1;
              break;
            }
            i1 = i + 1;
            if (i1 < len && b1 >= 194 && b1 <= 223) {
              c = bytes2(b1, buf[i1]);
              inc = 2;
              break;
            }
            i2 = i + 2;
            if (i2 < len && b1 >= 224 && b1 <= 239) {
              c = bytes3(b1, buf[i1], buf[i2]);
              inc = 3;
              break;
            }
            i3 = i + 3;
            if (i3 < len && b1 >= 240 && b1 <= 244) {
              c = bytes4(b1, buf[i1], buf[i2], buf[i3]);
              inc = 4;
              break;
            }
            break;
          }
          if (c > 1114111) {
            const at2 = `byte[${i}]`;
            if (c === ILL_FORMED) {
              throw new RangeError(`utf8.decode: ill-formed UTF8 byte sequence found at: ${at2}`);
            }
            if (c === TRAILING) {
              throw new RangeError(`utf8.decode: illegal trailing byte found at: ${at2}`);
            }
            if (c === RANGE) {
              throw new RangeError(`utf8.decode: code point out of range found at: ${at2}`);
            }
            if (c === NON_SHORTEST) {
              throw new RangeError(`utf8.decode: non-shortest form found at: ${at2}`);
            }
            throw new RangeError(`utf8.decode: unrecognized error found at: ${at2}`);
          }
          chars.push(c);
          i += inc;
        }
        return chars;
      }
    };
    exports.utf16be = {
      encode(chars) {
        const bytes = [];
        let char;
        let h;
        let l;
        for (let i = 0; i < chars.length; i += 1) {
          char = chars[i];
          if (char >= 0 && char <= 55295 || char >= 57344 && char <= 65535) {
            bytes.push(char >> 8 & mask[8]);
            bytes.push(char & mask[8]);
          } else if (char >= 65536 && char <= 1114111) {
            l = char - 65536;
            h = 55296 + (l >> 10);
            l = 56320 + (l & mask[10]);
            bytes.push(h >> 8 & mask[8]);
            bytes.push(h & mask[8]);
            bytes.push(l >> 8 & mask[8]);
            bytes.push(l & mask[8]);
          } else {
            throw new RangeError(`utf16be.encode: UTF16BE value out of range: char[${i}]: ${char}`);
          }
        }
        return Buffer.from(bytes);
      },
      decode(buf, bom) {
        if (buf.length % 2 > 0) {
          throw new RangeError(`utf16be.decode: data length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        const len = buf.length;
        let i = bom ? 2 : 0;
        let j2 = 0;
        let c;
        let inc;
        let i1;
        let i3;
        let high;
        let low;
        while (i < len) {
          const TRUE = true;
          while (TRUE) {
            i1 = i + 1;
            if (i1 < len) {
              high = (buf[i] << 8) + buf[i1];
              if (high < 55296 || high > 57343) {
                c = high;
                inc = 2;
                break;
              }
              i3 = i + 3;
              if (i3 < len) {
                low = (buf[i + 2] << 8) + buf[i3];
                if (high <= 56319 && low >= 56320 && low <= 57343) {
                  c = 65536 + (high - 55296 << 10) + (low - 56320);
                  inc = 4;
                  break;
                }
              }
            }
            throw new RangeError(`utf16be.decode: ill-formed UTF16BE byte sequence found: byte[${i}]`);
          }
          chars[j2++] = c;
          i += inc;
        }
        return chars;
      }
    };
    exports.utf16le = {
      encode(chars) {
        const bytes = [];
        let char;
        let h;
        let l;
        for (let i = 0; i < chars.length; i += 1) {
          char = chars[i];
          if (char >= 0 && char <= 55295 || char >= 57344 && char <= 65535) {
            bytes.push(char & mask[8]);
            bytes.push(char >> 8 & mask[8]);
          } else if (char >= 65536 && char <= 1114111) {
            l = char - 65536;
            h = 55296 + (l >> 10);
            l = 56320 + (l & mask[10]);
            bytes.push(h & mask[8]);
            bytes.push(h >> 8 & mask[8]);
            bytes.push(l & mask[8]);
            bytes.push(l >> 8 & mask[8]);
          } else {
            throw new RangeError(`utf16le.encode: UTF16LE value out of range: char[${i}]: ${char}`);
          }
        }
        return Buffer.from(bytes);
      },
      decode(buf, bom) {
        if (buf.length % 2 > 0) {
          throw new RangeError(`utf16le.decode: data length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        const len = buf.length;
        let i = bom ? 2 : 0;
        let j2 = 0;
        let c;
        let inc;
        let i1;
        let i3;
        let high;
        let low;
        while (i < len) {
          const TRUE = true;
          while (TRUE) {
            i1 = i + 1;
            if (i1 < len) {
              high = (buf[i1] << 8) + buf[i];
              if (high < 55296 || high > 57343) {
                c = high;
                inc = 2;
                break;
              }
              i3 = i + 3;
              if (i3 < len) {
                low = (buf[i3] << 8) + buf[i + 2];
                if (high <= 56319 && low >= 56320 && low <= 57343) {
                  c = 65536 + (high - 55296 << 10) + (low - 56320);
                  inc = 4;
                  break;
                }
              }
            }
            throw new RangeError(`utf16le.decode: ill-formed UTF16LE byte sequence found: byte[${i}]`);
          }
          chars[j2++] = c;
          i += inc;
        }
        return chars;
      }
    };
    exports.utf32be = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          if (char >= 55296 && char <= 57343 || char > 1114111) {
            throw new RangeError(`utf32be.encode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);
          }
          buf[i++] = char >> 24 & mask[8];
          buf[i++] = char >> 16 & mask[8];
          buf[i++] = char >> 8 & mask[8];
          buf[i++] = char & mask[8];
        });
        return buf;
      },
      decode(buf, bom) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`utf32be.decode: UTF32BE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        let i = bom ? 4 : 0;
        for (; i < buf.length; i += 4) {
          const char = (buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3];
          if (char >= 55296 && char <= 57343 || char > 1114111) {
            throw new RangeError(`utf32be.decode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);
          }
          chars.push(char);
        }
        return chars;
      }
    };
    exports.utf32le = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          if (char >= 55296 && char <= 57343 || char > 1114111) {
            throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);
          }
          buf[i++] = char & mask[8];
          buf[i++] = char >> 8 & mask[8];
          buf[i++] = char >> 16 & mask[8];
          buf[i++] = char >> 24 & mask[8];
        });
        return buf;
      },
      decode(buf, bom) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`utf32be.decode: UTF32LE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        let i = bom ? 4 : 0;
        for (; i < buf.length; i += 4) {
          const char = (buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i];
          if (char >= 55296 && char <= 57343 || char > 1114111) {
            throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);
          }
          chars.push(char);
        }
        return chars;
      }
    };
    exports.uint7 = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length);
        for (let i = 0; i < chars.length; i += 1) {
          if (chars[i] > 127) {
            throw new RangeError(`uint7.encode: UINT7 character code out of range: char[${i}]: ${chars[i]}`);
          }
          buf[i] = chars[i];
        }
        return buf;
      },
      decode(buf) {
        const chars = [];
        for (let i = 0; i < buf.length; i += 1) {
          if (buf[i] > 127) {
            throw new RangeError(`uint7.decode: UINT7 character code out of range: byte[${i}]: ${buf[i]}`);
          }
          chars[i] = buf[i];
        }
        return chars;
      }
    };
    exports.uint8 = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length);
        for (let i = 0; i < chars.length; i += 1) {
          if (chars[i] > 255) {
            throw new RangeError(`uint8.encode: UINT8 character code out of range: char[${i}]: ${chars[i]}`);
          }
          buf[i] = chars[i];
        }
        return buf;
      },
      decode(buf) {
        const chars = [];
        for (let i = 0; i < buf.length; i += 1) {
          chars[i] = buf[i];
        }
        return chars;
      }
    };
    exports.uint16be = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 2);
        let i = 0;
        chars.forEach((char) => {
          if (char > 65535) {
            throw new RangeError(`uint16be.encode: UINT16BE character code out of range: char[${i / 2}]: ${char}`);
          }
          buf[i++] = char >> 8 & mask[8];
          buf[i++] = char & mask[8];
        });
        return buf;
      },
      decode(buf) {
        if (buf.length % 2 > 0) {
          throw new RangeError(`uint16be.decode: UINT16BE byte length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 2) {
          chars.push((buf[i] << 8) + buf[i + 1]);
        }
        return chars;
      }
    };
    exports.uint16le = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 2);
        let i = 0;
        chars.forEach((char) => {
          if (char > 65535) {
            throw new RangeError(`uint16le.encode: UINT16LE character code out of range: char[${i / 2}]: ${char}`);
          }
          buf[i++] = char & mask[8];
          buf[i++] = char >> 8 & mask[8];
        });
        return buf;
      },
      decode(buf) {
        if (buf.length % 2 > 0) {
          throw new RangeError(`uint16le.decode: UINT16LE byte length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 2) {
          chars.push((buf[i + 1] << 8) + buf[i]);
        }
        return chars;
      }
    };
    exports.uint32be = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          buf[i++] = char >> 24 & mask[8];
          buf[i++] = char >> 16 & mask[8];
          buf[i++] = char >> 8 & mask[8];
          buf[i++] = char & mask[8];
        });
        return buf;
      },
      decode(buf) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`uint32be.decode: UINT32BE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 4) {
          chars.push((buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3]);
        }
        return chars;
      }
    };
    exports.uint32le = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          buf[i++] = char & mask[8];
          buf[i++] = char >> 8 & mask[8];
          buf[i++] = char >> 16 & mask[8];
          buf[i++] = char >> 24 & mask[8];
        });
        return buf;
      },
      decode(buf) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`uint32le.decode: UINT32LE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 4) {
          chars.push((buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i]);
        }
        return chars;
      }
    };
    exports.string = {
      encode(chars) {
        return exports.utf16le.encode(chars).toString("utf16le");
      },
      decode(str) {
        return exports.utf16le.decode(Buffer.from(str, "utf16le"), 0);
      }
    };
    exports.escaped = {
      // Encodes an Array of 32-bit integers into ESCAPED format.
      encode(chars) {
        const bytes = [];
        for (let i = 0; i < chars.length; i += 1) {
          const char = chars[i];
          if (char === 96) {
            bytes.push(char);
            bytes.push(char);
          } else if (char === 10) {
            bytes.push(char);
          } else if (char >= 32 && char <= 126) {
            bytes.push(char);
          } else {
            let str = "";
            if (char >= 0 && char <= 31) {
              str += `\`x${ascii[char]}`;
            } else if (char >= 127 && char <= 255) {
              str += `\`x${ascii[char]}`;
            } else if (char >= 256 && char <= 65535) {
              str += `\`u${ascii[char >> 8 & mask[8]]}${ascii[char & mask[8]]}`;
            } else if (char >= 65536 && char <= 4294967295) {
              str += "`u{";
              const digit = char >> 24 & mask[8];
              if (digit > 0) {
                str += ascii[digit];
              }
              str += `${ascii[char >> 16 & mask[8]] + ascii[char >> 8 & mask[8]] + ascii[char & mask[8]]}}`;
            } else {
              throw new Error("escape.encode(char): char > 0xffffffff not allowed");
            }
            const buf = Buffer.from(str);
            buf.forEach((b) => {
              bytes.push(b);
            });
          }
        }
        return Buffer.from(bytes);
      },
      // Decodes ESCAPED format from a Buffer of bytes to an Array of 32-bit integers.
      decode(buf) {
        function isHex(hex) {
          if (hex >= 48 && hex <= 57 || hex >= 65 && hex <= 70 || hex >= 97 && hex <= 102) {
            return true;
          }
          return false;
        }
        function getx(i2, len2, bufArg) {
          const ret2 = { char: null, nexti: i2 + 2, error: true };
          if (i2 + 1 < len2) {
            if (isHex(bufArg[i2]) && isHex(bufArg[i2 + 1])) {
              const str = String.fromCodePoint(bufArg[i2], bufArg[i2 + 1]);
              ret2.char = parseInt(str, 16);
              if (!Number.isNaN(ret2.char)) {
                ret2.error = false;
              }
            }
          }
          return ret2;
        }
        function getu(i2, len2, bufArg) {
          const ret2 = { char: null, nexti: i2 + 4, error: true };
          if (i2 + 3 < len2) {
            if (isHex(bufArg[i2]) && isHex(bufArg[i2 + 1]) && isHex(bufArg[i2 + 2]) && isHex(bufArg[i2 + 3])) {
              const str = String.fromCodePoint(bufArg[i2], bufArg[i2 + 1], bufArg[i2 + 2], bufArg[i2 + 3]);
              ret2.char = parseInt(str, 16);
              if (!Number.isNaN(ret2.char)) {
                ret2.error = false;
              }
            }
          }
          return ret2;
        }
        function getU(i2, len2, bufArg) {
          const ret2 = { char: null, nexti: i2 + 4, error: true };
          let str = "";
          while (i2 < len2 && isHex(bufArg[i2])) {
            str += String.fromCodePoint(bufArg[i2]);
            i2 += 1;
          }
          ret2.char = parseInt(str, 16);
          if (bufArg[i2] === 125 && !Number.isNaN(ret2.char)) {
            ret2.error = false;
          }
          ret2.nexti = i2 + 1;
          return ret2;
        }
        const chars = [];
        const len = buf.length;
        let i1;
        let ret;
        let error;
        let i = 0;
        while (i < len) {
          const TRUE = true;
          while (TRUE) {
            error = true;
            if (buf[i] !== 96) {
              chars.push(buf[i]);
              i += 1;
              error = false;
              break;
            }
            i1 = i + 1;
            if (i1 >= len) {
              break;
            }
            if (buf[i1] === 96) {
              chars.push(96);
              i += 2;
              error = false;
              break;
            }
            if (buf[i1] === 120) {
              ret = getx(i1 + 1, len, buf);
              if (ret.error) {
                break;
              }
              chars.push(ret.char);
              i = ret.nexti;
              error = false;
              break;
            }
            if (buf[i1] === 117) {
              if (buf[i1 + 1] === 123) {
                ret = getU(i1 + 2, len, buf);
                if (ret.error) {
                  break;
                }
                chars.push(ret.char);
                i = ret.nexti;
                error = false;
                break;
              }
              ret = getu(i1 + 1, len, buf);
              if (ret.error) {
                break;
              }
              chars.push(ret.char);
              i = ret.nexti;
              error = false;
              break;
            }
            break;
          }
          if (error) {
            throw new Error(`escaped.decode: ill-formed escape sequence at buf[${i}]`);
          }
        }
        return chars;
      }
    };
    var CR = 13;
    var LF = 10;
    exports.lineEnds = {
      crlf(chars) {
        const lfchars = [];
        let i = 0;
        while (i < chars.length) {
          switch (chars[i]) {
            case CR:
              if (i + 1 < chars.length && chars[i + 1] === LF) {
                i += 2;
              } else {
                i += 1;
              }
              lfchars.push(CR);
              lfchars.push(LF);
              break;
            case LF:
              lfchars.push(CR);
              lfchars.push(LF);
              i += 1;
              break;
            default:
              lfchars.push(chars[i]);
              i += 1;
              break;
          }
        }
        if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {
          lfchars.push(CR);
          lfchars.push(LF);
        }
        return lfchars;
      },
      lf(chars) {
        const lfchars = [];
        let i = 0;
        while (i < chars.length) {
          switch (chars[i]) {
            case CR:
              if (i + 1 < chars.length && chars[i + 1] === LF) {
                i += 2;
              } else {
                i += 1;
              }
              lfchars.push(LF);
              break;
            case LF:
              lfchars.push(LF);
              i += 1;
              break;
            default:
              lfchars.push(chars[i]);
              i += 1;
              break;
          }
        }
        if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {
          lfchars.push(LF);
        }
        return lfchars;
      }
    };
    exports.base64 = {
      encode(buf) {
        if (buf.length === 0) {
          return Buffer.alloc(0);
        }
        let i;
        let j2;
        let n;
        let tail = buf.length % 3;
        tail = tail > 0 ? 3 - tail : 0;
        let units = (buf.length + tail) / 3;
        const base64 = Buffer.alloc(units * 4);
        if (tail > 0) {
          units -= 1;
        }
        i = 0;
        j2 = 0;
        for (let u = 0; u < units; u += 1) {
          n = buf[i++] << 16;
          n += buf[i++] << 8;
          n += buf[i++];
          base64[j2++] = base64codes[n >> 18 & mask[6]];
          base64[j2++] = base64codes[n >> 12 & mask[6]];
          base64[j2++] = base64codes[n >> 6 & mask[6]];
          base64[j2++] = base64codes[n & mask[6]];
        }
        if (tail === 0) {
          return base64;
        }
        if (tail === 1) {
          n = buf[i++] << 16;
          n += buf[i] << 8;
          base64[j2++] = base64codes[n >> 18 & mask[6]];
          base64[j2++] = base64codes[n >> 12 & mask[6]];
          base64[j2++] = base64codes[n >> 6 & mask[6]];
          base64[j2] = base64codes[64];
          return base64;
        }
        if (tail === 2) {
          n = buf[i] << 16;
          base64[j2++] = base64codes[n >> 18 & mask[6]];
          base64[j2++] = base64codes[n >> 12 & mask[6]];
          base64[j2++] = base64codes[64];
          base64[j2] = base64codes[64];
          return base64;
        }
        return void 0;
      },
      decode(codes) {
        function validate2(buf2) {
          const chars = [];
          let tail2 = 0;
          for (let i2 = 0; i2 < buf2.length; i2 += 1) {
            const char = buf2[i2];
            const TRUE = true;
            while (TRUE) {
              if (char === 32 || char === 9 || char === 10 || char === 13) {
                break;
              }
              if (char >= 65 && char <= 90) {
                chars.push(char - 65);
                break;
              }
              if (char >= 97 && char <= 122) {
                chars.push(char - 71);
                break;
              }
              if (char >= 48 && char <= 57) {
                chars.push(char + 4);
                break;
              }
              if (char === 43) {
                chars.push(62);
                break;
              }
              if (char === 47) {
                chars.push(63);
                break;
              }
              if (char === 61) {
                chars.push(64);
                tail2 += 1;
                break;
              }
              throw new RangeError(`base64.decode: invalid character buf[${i2}]: ${char}`);
            }
          }
          if (chars.length % 4 > 0) {
            throw new RangeError(`base64.decode: string length not integral multiple of 4: ${chars.length}`);
          }
          switch (tail2) {
            case 0:
              break;
            case 1:
              if (chars[chars.length - 1] !== 64) {
                throw new RangeError("base64.decode: one tail character found: not last character");
              }
              break;
            case 2:
              if (chars[chars.length - 1] !== 64 || chars[chars.length - 2] !== 64) {
                throw new RangeError("base64.decode: two tail characters found: not last characters");
              }
              break;
            default:
              throw new RangeError(`base64.decode: more than two tail characters found: ${tail2}`);
          }
          return { tail: tail2, buf: Buffer.from(chars) };
        }
        if (codes.length === 0) {
          return Buffer.alloc(0);
        }
        const val = validate2(codes);
        const { tail } = val;
        const base64 = val.buf;
        let i;
        let j2;
        let n;
        let units = base64.length / 4;
        const buf = Buffer.alloc(units * 3 - tail);
        if (tail > 0) {
          units -= 1;
        }
        j2 = 0;
        i = 0;
        for (let u = 0; u < units; u += 1) {
          n = base64[i++] << 18;
          n += base64[i++] << 12;
          n += base64[i++] << 6;
          n += base64[i++];
          buf[j2++] = n >> 16 & mask[8];
          buf[j2++] = n >> 8 & mask[8];
          buf[j2++] = n & mask[8];
        }
        if (tail === 1) {
          n = base64[i++] << 18;
          n += base64[i++] << 12;
          n += base64[i] << 6;
          buf[j2++] = n >> 16 & mask[8];
          buf[j2] = n >> 8 & mask[8];
        }
        if (tail === 2) {
          n = base64[i++] << 18;
          n += base64[i++] << 12;
          buf[j2] = n >> 16 & mask[8];
        }
        return buf;
      },
      // Converts a base 64 Buffer of bytes to a JavaScript string with line breaks.
      toString(buf) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`base64.toString: input buffer length not multiple of 4: ${buf.length}`);
        }
        let str = "";
        let lineLen = 0;
        function buildLine(c1, c2, c3, c4) {
          switch (lineLen) {
            case 76:
              str += `\r
${c1}${c2}${c3}${c4}`;
              lineLen = 4;
              break;
            case 75:
              str += `${c1}\r
${c2}${c3}${c4}`;
              lineLen = 3;
              break;
            case 74:
              str += `${c1 + c2}\r
${c3}${c4}`;
              lineLen = 2;
              break;
            case 73:
              str += `${c1 + c2 + c3}\r
${c4}`;
              lineLen = 1;
              break;
            default:
              str += c1 + c2 + c3 + c4;
              lineLen += 4;
              break;
          }
        }
        function validate2(c) {
          if (c >= 65 && c <= 90) {
            return true;
          }
          if (c >= 97 && c <= 122) {
            return true;
          }
          if (c >= 48 && c <= 57) {
            return true;
          }
          if (c === 43) {
            return true;
          }
          if (c === 47) {
            return true;
          }
          if (c === 61) {
            return true;
          }
          return false;
        }
        for (let i = 0; i < buf.length; i += 4) {
          for (let j2 = i; j2 < i + 4; j2 += 1) {
            if (!validate2(buf[j2])) {
              throw new RangeError(`base64.toString: buf[${j2}]: ${buf[j2]} : not valid base64 character code`);
            }
          }
          buildLine(
            String.fromCharCode(buf[i]),
            String.fromCharCode(buf[i + 1]),
            String.fromCharCode(buf[i + 2]),
            String.fromCharCode(buf[i + 3])
          );
        }
        return str;
      }
    };
  }
});

// node_modules/apg-js/src/apg-conv-api/converter.js
var require_converter = __commonJS({
  "node_modules/apg-js/src/apg-conv-api/converter.js"(exports) {
    "use strict;";
    var { Buffer } = require_buffer();
    var trans = require_transformers();
    var UTF8 = "UTF8";
    var UTF16 = "UTF16";
    var UTF16BE = "UTF16BE";
    var UTF16LE = "UTF16LE";
    var UTF32 = "UTF32";
    var UTF32BE = "UTF32BE";
    var UTF32LE = "UTF32LE";
    var UINT7 = "UINT7";
    var ASCII = "ASCII";
    var BINARY = "BINARY";
    var UINT8 = "UINT8";
    var UINT16 = "UINT16";
    var UINT16LE = "UINT16LE";
    var UINT16BE = "UINT16BE";
    var UINT32 = "UINT32";
    var UINT32LE = "UINT32LE";
    var UINT32BE = "UINT32BE";
    var ESCAPED = "ESCAPED";
    var STRING = "STRING";
    var bom8 = function bom82(src) {
      src.type = UTF8;
      const buf = src.data;
      src.bom = 0;
      if (buf.length >= 3) {
        if (buf[0] === 239 && buf[1] === 187 && buf[2] === 191) {
          src.bom = 3;
        }
      }
    };
    var bom16 = function bom162(src) {
      const buf = src.data;
      src.bom = 0;
      switch (src.type) {
        case UTF16:
          src.type = UTF16BE;
          if (buf.length >= 2) {
            if (buf[0] === 254 && buf[1] === 255) {
              src.bom = 2;
            } else if (buf[0] === 255 && buf[1] === 254) {
              src.type = UTF16LE;
              src.bom = 2;
            }
          }
          break;
        case UTF16BE:
          src.type = UTF16BE;
          if (buf.length >= 2) {
            if (buf[0] === 254 && buf[1] === 255) {
              src.bom = 2;
            } else if (buf[0] === 255 && buf[1] === 254) {
              throw new TypeError(`src type: "${UTF16BE}" specified but BOM is for "${UTF16LE}"`);
            }
          }
          break;
        case UTF16LE:
          src.type = UTF16LE;
          if (buf.length >= 0) {
            if (buf[0] === 254 && buf[1] === 255) {
              throw new TypeError(`src type: "${UTF16LE}" specified but BOM is for "${UTF16BE}"`);
            } else if (buf[0] === 255 && buf[1] === 254) {
              src.bom = 2;
            }
          }
          break;
        default:
          throw new TypeError(`UTF16 BOM: src type "${src.type}" unrecognized`);
      }
    };
    var bom32 = function bom322(src) {
      const buf = src.data;
      src.bom = 0;
      switch (src.type) {
        case UTF32:
          src.type = UTF32BE;
          if (buf.length >= 4) {
            if (buf[0] === 0 && buf[1] === 0 && buf[2] === 254 && buf[3] === 255) {
              src.bom = 4;
            }
            if (buf[0] === 255 && buf[1] === 254 && buf[2] === 0 && buf[3] === 0) {
              src.type = UTF32LE;
              src.bom = 4;
            }
          }
          break;
        case UTF32BE:
          src.type = UTF32BE;
          if (buf.length >= 4) {
            if (buf[0] === 0 && buf[1] === 0 && buf[2] === 254 && buf[3] === 255) {
              src.bom = 4;
            }
            if (buf[0] === 255 && buf[1] === 254 && buf[2] === 0 && buf[3] === 0) {
              throw new TypeError(`src type: ${UTF32BE} specified but BOM is for ${UTF32LE}"`);
            }
          }
          break;
        case UTF32LE:
          src.type = UTF32LE;
          if (buf.length >= 4) {
            if (buf[0] === 0 && buf[1] === 0 && buf[2] === 254 && buf[3] === 255) {
              throw new TypeError(`src type: "${UTF32LE}" specified but BOM is for "${UTF32BE}"`);
            }
            if (buf[0] === 255 && buf[1] === 254 && buf[2] === 0 && buf[3] === 0) {
              src.bom = 4;
            }
          }
          break;
        default:
          throw new TypeError(`UTF32 BOM: src type "${src.type}" unrecognized`);
      }
    };
    var validateSrc = function validateSrc2(type, data) {
      function getType(typeArg) {
        const ret2 = {
          type: "",
          base64: false
        };
        const rx = /^(base64:)?([a-zA-Z0-9]+)$/i;
        const result = rx.exec(typeArg);
        if (result) {
          if (result[2]) {
            ret2.type = result[2].toUpperCase();
          }
          if (result[1]) {
            ret2.base64 = true;
          }
        }
        return ret2;
      }
      const ret = getType(type.toUpperCase());
      if (ret.base64) {
        if (ret.type === STRING) {
          throw new TypeError(`type: "${type} "BASE64:" prefix not allowed with type ${STRING}`);
        }
        if (Buffer.isBuffer(data)) {
          ret.data = trans.base64.decode(data);
        } else if (typeof data === "string") {
          const buf = Buffer.from(data, "ascii");
          ret.data = trans.base64.decode(buf);
        } else {
          throw new TypeError(`type: "${type} unrecognized data type: typeof(data): ${typeof data}`);
        }
      } else {
        ret.data = data;
      }
      switch (ret.type) {
        case UTF8:
          bom8(ret);
          break;
        case UTF16:
        case UTF16BE:
        case UTF16LE:
          bom16(ret);
          break;
        case UTF32:
        case UTF32BE:
        case UTF32LE:
          bom32(ret);
          break;
        case UINT16:
          ret.type = UINT16BE;
          break;
        case UINT32:
          ret.type = UINT32BE;
          break;
        case ASCII:
          ret.type = UINT7;
          break;
        case BINARY:
          ret.type = UINT8;
          break;
        case UINT7:
        case UINT8:
        case UINT16LE:
        case UINT16BE:
        case UINT32LE:
        case UINT32BE:
        case STRING:
        case ESCAPED:
          break;
        default:
          throw new TypeError(`type: "${type}" not recognized`);
      }
      if (ret.type === STRING) {
        if (typeof ret.data !== "string") {
          throw new TypeError(`type: "${type}" but data is not a string`);
        }
      } else if (!Buffer.isBuffer(ret.data)) {
        throw new TypeError(`type: "${type}" but data is not a Buffer`);
      }
      return ret;
    };
    var validateDst = function validateDst2(type, chars) {
      function getType(typeArg) {
        let fix;
        let rem;
        const ret2 = {
          crlf: false,
          lf: false,
          base64: false,
          type: ""
        };
        const TRUE = true;
        while (TRUE) {
          rem = typeArg;
          fix = typeArg.slice(0, 5);
          if (fix === "CRLF:") {
            ret2.crlf = true;
            rem = typeArg.slice(5);
            break;
          }
          fix = typeArg.slice(0, 3);
          if (fix === "LF:") {
            ret2.lf = true;
            rem = typeArg.slice(3);
            break;
          }
          break;
        }
        fix = rem.split(":");
        if (fix.length === 1) {
          ret2.type = fix[0];
        } else if (fix.length === 2 && fix[1] === "BASE64") {
          ret2.base64 = true;
          ret2.type = fix[0];
        }
        return ret2;
      }
      if (!Array.isArray(chars)) {
        throw new TypeError(`dst chars: not array: "${typeof chars}`);
      }
      if (typeof type !== "string") {
        throw new TypeError(`dst type: not string: "${typeof type}`);
      }
      const ret = getType(type.toUpperCase());
      switch (ret.type) {
        case UTF8:
        case UTF16BE:
        case UTF16LE:
        case UTF32BE:
        case UTF32LE:
        case UINT7:
        case UINT8:
        case UINT16LE:
        case UINT16BE:
        case UINT32LE:
        case UINT32BE:
        case ESCAPED:
          break;
        case STRING:
          if (ret.base64) {
            throw new TypeError(`":BASE64" suffix not allowed with type ${STRING}`);
          }
          break;
        case ASCII:
          ret.type = UINT7;
          break;
        case BINARY:
          ret.type = UINT8;
          break;
        case UTF16:
          ret.type = UTF16BE;
          break;
        case UTF32:
          ret.type = UTF32BE;
          break;
        case UINT16:
          ret.type = UINT16BE;
          break;
        case UINT32:
          ret.type = UINT32BE;
          break;
        default:
          throw new TypeError(`dst type unrecognized: "${type}" : must have form [crlf:|lf:]type[:base64]`);
      }
      return ret;
    };
    var encode = function encode2(type, chars) {
      switch (type) {
        case UTF8:
          return trans.utf8.encode(chars);
        case UTF16BE:
          return trans.utf16be.encode(chars);
        case UTF16LE:
          return trans.utf16le.encode(chars);
        case UTF32BE:
          return trans.utf32be.encode(chars);
        case UTF32LE:
          return trans.utf32le.encode(chars);
        case UINT7:
          return trans.uint7.encode(chars);
        case UINT8:
          return trans.uint8.encode(chars);
        case UINT16BE:
          return trans.uint16be.encode(chars);
        case UINT16LE:
          return trans.uint16le.encode(chars);
        case UINT32BE:
          return trans.uint32be.encode(chars);
        case UINT32LE:
          return trans.uint32le.encode(chars);
        case STRING:
          return trans.string.encode(chars);
        case ESCAPED:
          return trans.escaped.encode(chars);
        default:
          throw new TypeError(`encode type "${type}" not recognized`);
      }
    };
    var decode = function decode2(src) {
      switch (src.type) {
        case UTF8:
          return trans.utf8.decode(src.data, src.bom);
        case UTF16LE:
          return trans.utf16le.decode(src.data, src.bom);
        case UTF16BE:
          return trans.utf16be.decode(src.data, src.bom);
        case UTF32BE:
          return trans.utf32be.decode(src.data, src.bom);
        case UTF32LE:
          return trans.utf32le.decode(src.data, src.bom);
        case UINT7:
          return trans.uint7.decode(src.data);
        case UINT8:
          return trans.uint8.decode(src.data);
        case UINT16BE:
          return trans.uint16be.decode(src.data);
        case UINT16LE:
          return trans.uint16le.decode(src.data);
        case UINT32BE:
          return trans.uint32be.decode(src.data);
        case UINT32LE:
          return trans.uint32le.decode(src.data);
        case STRING:
          return trans.string.decode(src.data);
        case ESCAPED:
          return trans.escaped.decode(src.data);
        default:
          throw new TypeError(`decode type "${src.type}" not recognized`);
      }
    };
    exports.decode = function exportsDecode(type, data) {
      const src = validateSrc(type, data);
      return decode(src);
    };
    exports.encode = function exportsEncode(type, chars) {
      let c;
      let buf;
      const dst = validateDst(type, chars);
      if (dst.crlf) {
        c = trans.lineEnds.crlf(chars);
        buf = encode(dst.type, c);
      } else if (dst.lf) {
        c = trans.lineEnds.lf(chars);
        buf = encode(dst.type, c);
      } else {
        buf = encode(dst.type, chars);
      }
      if (dst.base64) {
        buf = trans.base64.encode(buf);
      }
      return buf;
    };
    var convert = function convert2(srcType, srcData, dstType) {
      return exports.encode(dstType, exports.decode(srcType, srcData));
    };
    exports.convert = convert;
  }
});

// node_modules/apg-js/src/apg-lib/emitcss.js
var require_emitcss = __commonJS({
  "node_modules/apg-js/src/apg-lib/emitcss.js"(exports, module) {
    module.exports = function emittcss() {
      return "/* This file automatically generated by jsonToless() and LESS. */\n.apg-mono {\n  font-family: monospace;\n}\n.apg-active {\n  font-weight: bold;\n  color: #000000;\n}\n.apg-match {\n  font-weight: bold;\n  color: #264BFF;\n}\n.apg-empty {\n  font-weight: bold;\n  color: #0fbd0f;\n}\n.apg-nomatch {\n  font-weight: bold;\n  color: #FF4000;\n}\n.apg-lh-match {\n  font-weight: bold;\n  color: #1A97BA;\n}\n.apg-lb-match {\n  font-weight: bold;\n  color: #5F1687;\n}\n.apg-remainder {\n  font-weight: bold;\n  color: #999999;\n}\n.apg-ctrl-char {\n  font-weight: bolder;\n  font-style: italic;\n  font-size: 0.6em;\n}\n.apg-line-end {\n  font-weight: bold;\n  color: #000000;\n}\n.apg-error {\n  font-weight: bold;\n  color: #FF4000;\n}\n.apg-phrase {\n  color: #000000;\n  background-color: #8caae6;\n}\n.apg-empty-phrase {\n  color: #0fbd0f;\n}\ntable.apg-state {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: left;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-state th,\ntable.apg-state td {\n  text-align: left;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-state th:nth-last-child(2),\ntable.apg-state td:nth-last-child(2) {\n  text-align: right;\n}\ntable.apg-state caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-stats {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-stats th,\ntable.apg-stats td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-stats caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-trace {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-trace caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-trace th,\ntable.apg-trace td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-trace th:last-child,\ntable.apg-trace th:nth-last-child(2),\ntable.apg-trace td:last-child,\ntable.apg-trace td:nth-last-child(2) {\n  text-align: left;\n}\ntable.apg-grammar {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-grammar caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-grammar th,\ntable.apg-grammar td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-grammar th:last-child,\ntable.apg-grammar td:last-child {\n  text-align: left;\n}\ntable.apg-rules {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-rules caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-rules th,\ntable.apg-rules td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-rules a {\n  color: #003399 !important;\n}\ntable.apg-rules a:hover {\n  color: #8caae6 !important;\n}\ntable.apg-attrs {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: center;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-attrs caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-attrs th,\ntable.apg-attrs td {\n  text-align: center;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-attrs th:nth-child(1),\ntable.apg-attrs th:nth-child(2),\ntable.apg-attrs th:nth-child(3) {\n  text-align: right;\n}\ntable.apg-attrs td:nth-child(1),\ntable.apg-attrs td:nth-child(2),\ntable.apg-attrs td:nth-child(3) {\n  text-align: right;\n}\ntable.apg-attrs a {\n  color: #003399 !important;\n}\ntable.apg-attrs a:hover {\n  color: #8caae6 !important;\n}\n";
    };
  }
});

// node_modules/apg-js/src/apg-lib/utilities.js
var require_utilities = __commonJS({
  "node_modules/apg-js/src/apg-lib/utilities.js"(exports) {
    var style = require_style();
    var converter = require_converter();
    var emitCss = require_emitcss();
    var id = require_identifiers();
    var thisFileName = "utilities.js: ";
    var getBounds = function(length, begArg, len) {
      let end;
      let beg = begArg;
      const TRUE = true;
      while (TRUE) {
        if (length <= 0) {
          beg = 0;
          end = 0;
          break;
        }
        if (typeof beg !== "number") {
          beg = 0;
          end = length;
          break;
        }
        if (beg >= length) {
          beg = length;
          end = length;
          break;
        }
        if (typeof len !== "number") {
          end = length;
          break;
        }
        end = beg + len;
        if (end > length) {
          end = length;
          break;
        }
        break;
      }
      return {
        beg,
        end
      };
    };
    exports.htmlToPage = function(html, titleArg) {
      let title;
      if (typeof html !== "string") {
        throw new Error(`${thisFileName}htmlToPage: input HTML is not a string`);
      }
      if (typeof titleArg !== "string") {
        title = "htmlToPage";
      } else {
        title = titleArg;
      }
      let page = "";
      page += "<!DOCTYPE html>\n";
      page += '<html lang="en">\n';
      page += "<head>\n";
      page += '<meta charset="utf-8">\n';
      page += `<title>${title}</title>
`;
      page += "<style>\n";
      page += emitCss();
      page += "</style>\n";
      page += "</head>\n<body>\n";
      page += `<p>${/* @__PURE__ */ new Date()}</p>
`;
      page += html;
      page += "</body>\n</html>\n";
      return page;
    };
    exports.parserResultToHtml = function(result, caption) {
      let cap = null;
      if (typeof caption === "string" && caption !== "") {
        cap = caption;
      }
      let success;
      let state;
      if (result.success === true) {
        success = `<span class="${style.CLASS_MATCH}">true</span>`;
      } else {
        success = `<span class="${style.CLASS_NOMATCH}">false</span>`;
      }
      if (result.state === id.EMPTY) {
        state = `<span class="${style.CLASS_EMPTY}">EMPTY</span>`;
      } else if (result.state === id.MATCH) {
        state = `<span class="${style.CLASS_MATCH}">MATCH</span>`;
      } else if (result.state === id.NOMATCH) {
        state = `<span class="${style.CLASS_NOMATCH}">NOMATCH</span>`;
      } else {
        state = `<span class="${style.CLASS_NOMATCH}">unrecognized</span>`;
      }
      let html = "";
      html += `<table class="${style.CLASS_STATE}">
`;
      if (cap) {
        html += `<caption>${cap}</caption>
`;
      }
      html += "<tr><th>state item</th><th>value</th><th>description</th></tr>\n";
      html += `<tr><td>parser success</td><td>${success}</td>
`;
      html += `<td><span class="${style.CLASS_MATCH}">true</span> if the parse succeeded,
`;
      html += ` <span class="${style.CLASS_NOMATCH}">false</span> otherwise`;
      html += "<br><i>NOTE: for success, entire string must be matched</i></td></tr>\n";
      html += `<tr><td>parser state</td><td>${state}</td>
`;
      html += `<td><span class="${style.CLASS_EMPTY}">EMPTY</span>, `;
      html += `<span class="${style.CLASS_MATCH}">MATCH</span> or 
`;
      html += `<span class="${style.CLASS_NOMATCH}">NOMATCH</span></td></tr>
`;
      html += `<tr><td>string length</td><td>${result.length}</td><td>length of the input (sub)string</td></tr>
`;
      html += `<tr><td>matched length</td><td>${result.matched}</td><td>number of input string characters matched</td></tr>
`;
      html += `<tr><td>max matched</td><td>${result.maxMatched}</td><td>maximum number of input string characters matched</td></tr>
`;
      html += `<tr><td>max tree depth</td><td>${result.maxTreeDepth}</td><td>maximum depth of the parse tree reached</td></tr>
`;
      html += `<tr><td>node hits</td><td>${result.nodeHits}</td><td>number of parse tree node hits (opcode function calls)</td></tr>
`;
      html += `<tr><td>input length</td><td>${result.inputLength}</td><td>length of full input string</td></tr>
`;
      html += `<tr><td>sub-string begin</td><td>${result.subBegin}</td><td>sub-string first character index</td></tr>
`;
      html += `<tr><td>sub-string end</td><td>${result.subEnd}</td><td>sub-string end-of-string index</td></tr>
`;
      html += `<tr><td>sub-string length</td><td>${result.subLength}</td><td>sub-string length</td></tr>
`;
      html += "</table>\n";
      return html;
    };
    exports.charsToString = function(chars, phraseIndex, phraseLength) {
      let beg;
      let end;
      if (typeof phraseIndex === "number") {
        if (phraseIndex >= chars.length) {
          return "";
        }
        beg = phraseIndex < 0 ? 0 : phraseIndex;
      } else {
        beg = 0;
      }
      if (typeof phraseLength === "number") {
        if (phraseLength <= 0) {
          return "";
        }
        end = phraseLength > chars.length - beg ? chars.length : beg + phraseLength;
      } else {
        end = chars.length;
      }
      if (beg < end) {
        return converter.encode("UTF16LE", chars.slice(beg, end)).toString("utf16le");
      }
      return "";
    };
    exports.stringToChars = function(string) {
      return converter.decode("STRING", string);
    };
    exports.opcodeToString = function(type) {
      let ret = "unknown";
      switch (type) {
        case id.ALT:
          ret = "ALT";
          break;
        case id.CAT:
          ret = "CAT";
          break;
        case id.RNM:
          ret = "RNM";
          break;
        case id.UDT:
          ret = "UDT";
          break;
        case id.AND:
          ret = "AND";
          break;
        case id.NOT:
          ret = "NOT";
          break;
        case id.REP:
          ret = "REP";
          break;
        case id.TRG:
          ret = "TRG";
          break;
        case id.TBS:
          ret = "TBS";
          break;
        case id.TLS:
          ret = "TLS";
          break;
        case id.BKR:
          ret = "BKR";
          break;
        case id.BKA:
          ret = "BKA";
          break;
        case id.BKN:
          ret = "BKN";
          break;
        case id.ABG:
          ret = "ABG";
          break;
        case id.AEN:
          ret = "AEN";
          break;
        default:
          throw new Error("unrecognized opcode");
      }
      return ret;
    };
    exports.stateToString = function(state) {
      let ret = "unknown";
      switch (state) {
        case id.ACTIVE:
          ret = "ACTIVE";
          break;
        case id.MATCH:
          ret = "MATCH";
          break;
        case id.EMPTY:
          ret = "EMPTY";
          break;
        case id.NOMATCH:
          ret = "NOMATCH";
          break;
        default:
          throw new Error("unrecognized state");
      }
      return ret;
    };
    exports.asciiChars = [
      "NUL",
      "SOH",
      "STX",
      "ETX",
      "EOT",
      "ENQ",
      "ACK",
      "BEL",
      "BS",
      "TAB",
      "LF",
      "VT",
      "FF",
      "CR",
      "SO",
      "SI",
      "DLE",
      "DC1",
      "DC2",
      "DC3",
      "DC4",
      "NAK",
      "SYN",
      "ETB",
      "CAN",
      "EM",
      "SUB",
      "ESC",
      "FS",
      "GS",
      "RS",
      "US",
      "&nbsp;",
      "!",
      "&#34;",
      "#",
      "$",
      "%",
      "&#38;",
      "&#39;",
      "(",
      ")",
      "*",
      "+",
      ",",
      "-",
      ".",
      "/",
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      ":",
      ";",
      "&#60;",
      "=",
      "&#62;",
      "?",
      "@",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      "[",
      "&#92;",
      "]",
      "^",
      "_",
      "`",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "{",
      "|",
      "}",
      "~",
      "DEL"
    ];
    exports.charToHex = function(char) {
      let ch = char.toString(16).toUpperCase();
      switch (ch.length) {
        case 1:
        case 3:
        case 7:
          ch = `0${ch}`;
          break;
        case 2:
        case 6:
          ch = `00${ch}`;
          break;
        case 4:
          break;
        case 5:
          ch = `000${ch}`;
          break;
        default:
          throw new Error("unrecognized option");
      }
      return ch;
    };
    exports.charsToDec = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToDec: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        ret += chars[bounds.beg];
        for (let i = bounds.beg + 1; i < bounds.end; i += 1) {
          ret += `,${chars[i]}`;
        }
      }
      return ret;
    };
    exports.charsToHex = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        ret += `\\x${exports.charToHex(chars[bounds.beg])}`;
        for (let i = bounds.beg + 1; i < bounds.end; i += 1) {
          ret += `,\\x${exports.charToHex(chars[i])}`;
        }
      }
      return ret;
    };
    exports.charsToHtmlEntities = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        for (let i = bounds.beg; i < bounds.end; i += 1) {
          ret += `&#x${chars[i].toString(16)};`;
        }
      }
      return ret;
    };
    function isUnicode(char) {
      if (char >= 55296 && char <= 57343) {
        return false;
      }
      if (char > 1114111) {
        return false;
      }
      return true;
    }
    exports.charsToUnicode = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToUnicode: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        for (let i = bounds.beg; i < bounds.end; i += 1) {
          if (isUnicode(chars[i])) {
            ret += `&#${chars[i]};`;
          } else {
            ret += ` U+${exports.charToHex(chars[i])}`;
          }
        }
      }
      return ret;
    };
    exports.charsToJsUnicode = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToJsUnicode: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        ret += `\\u${exports.charToHex(chars[bounds.beg])}`;
        for (let i = bounds.beg + 1; i < bounds.end; i += 1) {
          ret += `,\\u${exports.charToHex(chars[i])}`;
        }
      }
      return ret;
    };
    exports.charsToAscii = function(chars, beg, len) {
      let ret = "";
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToAscii: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      for (let i = bounds.beg; i < bounds.end; i += 1) {
        const char = chars[i];
        if (char >= 32 && char <= 126) {
          ret += String.fromCharCode(char);
        } else {
          ret += `\\x${exports.charToHex(char)}`;
        }
      }
      return ret;
    };
    exports.charsToAsciiHtml = function(chars, beg, len) {
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToAsciiHtml: input must be an array of integers`);
      }
      let html = "";
      let char;
      const bounds = getBounds(chars.length, beg, len);
      for (let i = bounds.beg; i < bounds.end; i += 1) {
        char = chars[i];
        if (char < 32 || char === 127) {
          html += `<span class="${style.CLASS_CTRLCHAR}">${exports.asciiChars[char]}</span>`;
        } else if (char > 127) {
          html += `<span class="${style.CLASS_CTRLCHAR}">U+${exports.charToHex(char)}</span>`;
        } else {
          html += exports.asciiChars[char];
        }
      }
      return html;
    };
    exports.stringToAsciiHtml = function(str) {
      const chars = converter.decode("STRING", str);
      return this.charsToAsciiHtml(chars);
    };
  }
});

// node_modules/apg-js/src/apg-lib/ast.js
var require_ast = __commonJS({
  "node_modules/apg-js/src/apg-lib/ast.js"(exports, module) {
    module.exports = function exportsAst() {
      const id = require_identifiers();
      const utils = require_utilities();
      const thisFileName = "ast.js: ";
      const that = this;
      let rules = null;
      let udts = null;
      let chars = null;
      let nodeCount = 0;
      const nodesDefined = [];
      const nodeCallbacks = [];
      const stack = [];
      const records = [];
      this.callbacks = [];
      this.astObject = "astObject";
      this.init = function init(rulesIn, udtsIn, charsIn) {
        stack.length = 0;
        records.length = 0;
        nodesDefined.length = 0;
        nodeCount = 0;
        rules = rulesIn;
        udts = udtsIn;
        chars = charsIn;
        let i;
        const list = [];
        for (i = 0; i < rules.length; i += 1) {
          list.push(rules[i].lower);
        }
        for (i = 0; i < udts.length; i += 1) {
          list.push(udts[i].lower);
        }
        nodeCount = rules.length + udts.length;
        for (i = 0; i < nodeCount; i += 1) {
          nodesDefined[i] = false;
          nodeCallbacks[i] = null;
        }
        for (const index in that.callbacks) {
          const lower = index.toLowerCase();
          i = list.indexOf(lower);
          if (i < 0) {
            throw new Error(`${thisFileName}init: node '${index}' not a rule or udt name`);
          }
          if (typeof that.callbacks[index] === "function") {
            nodesDefined[i] = true;
            nodeCallbacks[i] = that.callbacks[index];
          }
          if (that.callbacks[index] === true) {
            nodesDefined[i] = true;
          }
        }
      };
      this.ruleDefined = function ruleDefined(index) {
        return nodesDefined[index] !== false;
      };
      this.udtDefined = function udtDefined(index) {
        return nodesDefined[rules.length + index] !== false;
      };
      this.down = function down(callbackIndex, name) {
        const thisIndex = records.length;
        stack.push(thisIndex);
        records.push({
          name,
          thisIndex,
          thatIndex: null,
          state: id.SEM_PRE,
          callbackIndex,
          phraseIndex: null,
          phraseLength: null,
          stack: stack.length
        });
        return thisIndex;
      };
      this.up = function up(callbackIndex, name, phraseIndex, phraseLength) {
        const thisIndex = records.length;
        const thatIndex = stack.pop();
        records.push({
          name,
          thisIndex,
          thatIndex,
          state: id.SEM_POST,
          callbackIndex,
          phraseIndex,
          phraseLength,
          stack: stack.length
        });
        records[thatIndex].thatIndex = thisIndex;
        records[thatIndex].phraseIndex = phraseIndex;
        records[thatIndex].phraseLength = phraseLength;
        return thisIndex;
      };
      this.translate = function translate(data) {
        let ret;
        let callback;
        let record;
        for (let i = 0; i < records.length; i += 1) {
          record = records[i];
          callback = nodeCallbacks[record.callbackIndex];
          if (record.state === id.SEM_PRE) {
            if (callback !== null) {
              ret = callback(id.SEM_PRE, chars, record.phraseIndex, record.phraseLength, data);
              if (ret === id.SEM_SKIP) {
                i = record.thatIndex;
              }
            }
          } else if (callback !== null) {
            callback(id.SEM_POST, chars, record.phraseIndex, record.phraseLength, data);
          }
        }
      };
      this.setLength = function setLength(length) {
        records.length = length;
        if (length > 0) {
          stack.length = records[length - 1].stack;
        } else {
          stack.length = 0;
        }
      };
      this.getLength = function getLength() {
        return records.length;
      };
      function indent(n) {
        let ret = "";
        for (let i = 0; i < n; i += 1) {
          ret += " ";
        }
        return ret;
      }
      this.toXml = function toSml(modeArg) {
        let display = utils.charsToDec;
        let caption = "decimal integer character codes";
        if (typeof modeArg === "string" && modeArg.length >= 3) {
          const mode = modeArg.slice(0, 3).toLowerCase();
          if (mode === "asc") {
            display = utils.charsToAscii;
            caption = "ASCII for printing characters, hex for non-printing";
          } else if (mode === "hex") {
            display = utils.charsToHex;
            caption = "hexadecimal integer character codes";
          } else if (mode === "uni") {
            display = utils.charsToUnicode;
            caption = "Unicode UTF-32 integer character codes";
          }
        }
        let xml = "";
        let depth = 0;
        xml += '<?xml version="1.0" encoding="utf-8"?>\n';
        xml += `<root nodes="${records.length / 2}" characters="${chars.length}">
`;
        xml += `<!-- input string, ${caption} -->
`;
        xml += indent(depth + 2);
        xml += display(chars);
        xml += "\n";
        records.forEach((rec) => {
          if (rec.state === id.SEM_PRE) {
            depth += 1;
            xml += indent(depth);
            xml += `<node name="${rec.name}" index="${rec.phraseIndex}" length="${rec.phraseLength}">
`;
            xml += indent(depth + 2);
            xml += display(chars, rec.phraseIndex, rec.phraseLength);
            xml += "\n";
          } else {
            xml += indent(depth);
            xml += `</node><!-- name="${rec.name}" -->
`;
            depth -= 1;
          }
        });
        xml += "</root>\n";
        return xml;
      };
      this.phrases = function phrases() {
        const obj = {};
        let i;
        let record;
        for (i = 0; i < records.length; i += 1) {
          record = records[i];
          if (record.state === id.SEM_PRE) {
            if (!Array.isArray(obj[record.name])) {
              obj[record.name] = [];
            }
            obj[record.name].push({
              index: record.phraseIndex,
              length: record.phraseLength
            });
          }
        }
        return obj;
      };
    };
  }
});

// node_modules/apg-js/src/apg-lib/circular-buffer.js
var require_circular_buffer = __commonJS({
  "node_modules/apg-js/src/apg-lib/circular-buffer.js"(exports, module) {
    module.exports = function exportsCircularBuffer() {
      "use strict;";
      const thisFileName = "circular-buffer.js: ";
      let itemIndex = -1;
      let maxListSize = 0;
      this.init = function init(size) {
        if (typeof size !== "number" || size <= 0) {
          throw new Error(`${thisFileName}init: circular buffer size must an integer > 0`);
        }
        maxListSize = Math.ceil(size);
        itemIndex = -1;
      };
      this.increment = function increment() {
        itemIndex += 1;
        return (itemIndex + maxListSize) % maxListSize;
      };
      this.maxSize = function maxSize() {
        return maxListSize;
      };
      this.items = function items() {
        return itemIndex + 1;
      };
      this.getListIndex = function getListIndex(item) {
        if (itemIndex === -1) {
          return -1;
        }
        if (item < 0 || item > itemIndex) {
          return -1;
        }
        if (itemIndex - item >= maxListSize) {
          return -1;
        }
        return (item + maxListSize) % maxListSize;
      };
      this.forEach = function forEach(fn2) {
        if (itemIndex === -1) {
          return;
        }
        if (itemIndex < maxListSize) {
          for (let i = 0; i <= itemIndex; i += 1) {
            fn2(i, i);
          }
          return;
        }
        for (let i = itemIndex - maxListSize + 1; i <= itemIndex; i += 1) {
          const listIndex = (i + maxListSize) % maxListSize;
          fn2(listIndex, i);
        }
      };
    };
  }
});

// node_modules/apg-js/src/apg-lib/parser.js
var require_parser = __commonJS({
  "node_modules/apg-js/src/apg-lib/parser.js"(exports, module) {
    module.exports = function parser() {
      const id = require_identifiers();
      const utils = require_utilities();
      const thisFileName = "parser.js: ";
      const thisThis = this;
      let opExecute;
      this.ast = null;
      this.stats = null;
      this.trace = null;
      this.callbacks = [];
      let opcodes = null;
      let chars = null;
      let charsBegin;
      let charsLength;
      let charsEnd;
      let lookAround;
      let treeDepth = 0;
      let maxTreeDepth = 0;
      let nodeHits = 0;
      let ruleCallbacks = null;
      let udtCallbacks = null;
      let rules = null;
      let udts = null;
      let syntaxData = null;
      let maxMatched = 0;
      let limitTreeDepth = Infinity;
      let limitNodeHits = Infinity;
      const evaluateRule = function evaluateRule2(ruleIndex, phraseIndex, sysData) {
        const functionName = `${thisFileName}evaluateRule(): `;
        if (ruleIndex >= rules.length) {
          throw new Error(`${functionName}rule index: ${ruleIndex} out of range`);
        }
        if (phraseIndex >= charsEnd) {
          throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);
        }
        const { length } = opcodes;
        opcodes.push({
          type: id.RNM,
          index: ruleIndex
        });
        opExecute(length, phraseIndex, sysData);
        opcodes.pop();
      };
      const evaluateUdt = function(udtIndex, phraseIndex, sysData) {
        const functionName = `${thisFileName}evaluateUdt(): `;
        if (udtIndex >= udts.length) {
          throw new Error(`${functionName}udt index: ${udtIndex} out of range`);
        }
        if (phraseIndex >= charsEnd) {
          throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);
        }
        const { length } = opcodes;
        opcodes.push({
          type: id.UDT,
          empty: udts[udtIndex].empty,
          index: udtIndex
        });
        opExecute(length, phraseIndex, sysData);
        opcodes.pop();
      };
      const clear = function() {
        treeDepth = 0;
        maxTreeDepth = 0;
        nodeHits = 0;
        maxMatched = 0;
        lookAround = [
          {
            lookAround: id.LOOKAROUND_NONE,
            anchor: 0,
            charsEnd: 0,
            charsLength: 0
          }
        ];
        rules = null;
        udts = null;
        chars = null;
        charsBegin = 0;
        charsLength = 0;
        charsEnd = 0;
        ruleCallbacks = null;
        udtCallbacks = null;
        syntaxData = null;
        opcodes = null;
      };
      const backRef = function() {
        const stack = [];
        const init = function() {
          const obj = {};
          rules.forEach((rule) => {
            if (rule.isBkr) {
              obj[rule.lower] = null;
            }
          });
          if (udts.length > 0) {
            udts.forEach((udt) => {
              if (udt.isBkr) {
                obj[udt.lower] = null;
              }
            });
          }
          stack.push(obj);
        };
        const copy = function() {
          const top = stack[stack.length - 1];
          const obj = {};
          for (const name in top) {
            obj[name] = top[name];
          }
          return obj;
        };
        this.push = function push() {
          stack.push(copy());
        };
        this.pop = function pop(lengthArg) {
          let length = lengthArg;
          if (!length) {
            length = stack.length - 1;
          }
          if (length < 1 || length > stack.length) {
            throw new Error(`${thisFileName}backRef.pop(): bad length: ${length}`);
          }
          stack.length = length;
          return stack[stack.length - 1];
        };
        this.length = function length() {
          return stack.length;
        };
        this.savePhrase = function savePhrase(name, index, length) {
          stack[stack.length - 1][name] = {
            phraseIndex: index,
            phraseLength: length
          };
        };
        this.getPhrase = function(name) {
          return stack[stack.length - 1][name];
        };
        init();
      };
      const systemData = function systemData2() {
        const thisData = this;
        this.state = id.ACTIVE;
        this.phraseLength = 0;
        this.ruleIndex = 0;
        this.udtIndex = 0;
        this.lookAround = lookAround[lookAround.length - 1];
        this.uFrame = new backRef();
        this.pFrame = new backRef();
        this.evaluateRule = evaluateRule;
        this.evaluateUdt = evaluateUdt;
        this.refresh = function refresh() {
          thisData.state = id.ACTIVE;
          thisData.phraseLength = 0;
          thisData.lookAround = lookAround[lookAround.length - 1];
        };
      };
      const lookAroundValue = function lookAroundValue2() {
        return lookAround[lookAround.length - 1];
      };
      const inLookAround = function inLookAround2() {
        return lookAround.length > 1;
      };
      const inLookBehind = function() {
        return lookAround[lookAround.length - 1].lookAround === id.LOOKAROUND_BEHIND;
      };
      const initializeAst = function() {
        const functionName = `${thisFileName}initializeAst(): `;
        const TRUE = true;
        while (TRUE) {
          if (thisThis.ast === void 0) {
            thisThis.ast = null;
            break;
          }
          if (thisThis.ast === null) {
            break;
          }
          if (thisThis.ast.astObject !== "astObject") {
            throw new Error(`${functionName}ast object not recognized`);
          }
          break;
        }
        if (thisThis.ast !== null) {
          thisThis.ast.init(rules, udts, chars);
        }
      };
      const initializeTrace = function() {
        const functionName = `${thisFileName}initializeTrace(): `;
        const TRUE = true;
        while (TRUE) {
          if (thisThis.trace === void 0) {
            thisThis.trace = null;
            break;
          }
          if (thisThis.trace === null) {
            break;
          }
          if (thisThis.trace.traceObject !== "traceObject") {
            throw new Error(`${functionName}trace object not recognized`);
          }
          break;
        }
        if (thisThis.trace !== null) {
          thisThis.trace.init(rules, udts, chars);
        }
      };
      const initializeStats = function() {
        const functionName = `${thisFileName}initializeStats(): `;
        const TRUE = true;
        while (TRUE) {
          if (thisThis.stats === void 0) {
            thisThis.stats = null;
            break;
          }
          if (thisThis.stats === null) {
            break;
          }
          if (thisThis.stats.statsObject !== "statsObject") {
            throw new Error(`${functionName}stats object not recognized`);
          }
          break;
        }
        if (thisThis.stats !== null) {
          thisThis.stats.init(rules, udts);
        }
      };
      const initializeGrammar = function(grammar) {
        const functionName = `${thisFileName}initializeGrammar(): `;
        if (!grammar) {
          throw new Error(`${functionName}grammar object undefined`);
        }
        if (grammar.grammarObject !== "grammarObject") {
          throw new Error(`${functionName}bad grammar object`);
        }
        rules = grammar.rules;
        udts = grammar.udts;
      };
      const initializeStartRule = function(startRule) {
        const functionName = `${thisFileName}initializeStartRule(): `;
        let start = null;
        if (typeof startRule === "number") {
          if (startRule >= rules.length) {
            throw new Error(`${functionName}start rule index too large: max: ${rules.length}: index: ${startRule}`);
          }
          start = startRule;
        } else if (typeof startRule === "string") {
          const lower = startRule.toLowerCase();
          for (let i = 0; i < rules.length; i += 1) {
            if (lower === rules[i].lower) {
              start = rules[i].index;
              break;
            }
          }
          if (start === null) {
            throw new Error(`${functionName}start rule name '${startRule}' not recognized`);
          }
        } else {
          throw new Error(`${functionName}type of start rule '${typeof startRule}' not recognized`);
        }
        return start;
      };
      const initializeInputChars = function initializeInputChars2(inputArg, begArg, lenArg) {
        const functionName = `${thisFileName}initializeInputChars(): `;
        let input = inputArg;
        let beg = begArg;
        let len = lenArg;
        if (input === void 0) {
          throw new Error(`${functionName}input string is undefined`);
        }
        if (input === null) {
          throw new Error(`${functionName}input string is null`);
        }
        if (typeof input === "string") {
          input = utils.stringToChars(input);
        } else if (!Array.isArray(input)) {
          throw new Error(`${functionName}input string is not a string or array`);
        }
        if (input.length > 0) {
          if (typeof input[0] !== "number") {
            throw new Error(`${functionName}input string not an array of integers`);
          }
        }
        if (typeof beg !== "number") {
          beg = 0;
        } else {
          beg = Math.floor(beg);
          if (beg < 0 || beg > input.length) {
            throw new Error(`${functionName}input beginning index out of range: ${beg}`);
          }
        }
        if (typeof len !== "number") {
          len = input.length - beg;
        } else {
          len = Math.floor(len);
          if (len < 0 || len > input.length - beg) {
            throw new Error(`${functionName}input length out of range: ${len}`);
          }
        }
        chars = input;
        charsBegin = beg;
        charsLength = len;
        charsEnd = charsBegin + charsLength;
      };
      const initializeCallbacks = function() {
        const functionName = `${thisFileName}initializeCallbacks(): `;
        let i;
        ruleCallbacks = [];
        udtCallbacks = [];
        for (i = 0; i < rules.length; i += 1) {
          ruleCallbacks[i] = null;
        }
        for (i = 0; i < udts.length; i += 1) {
          udtCallbacks[i] = null;
        }
        let func;
        const list = [];
        for (i = 0; i < rules.length; i += 1) {
          list.push(rules[i].lower);
        }
        for (i = 0; i < udts.length; i += 1) {
          list.push(udts[i].lower);
        }
        for (const index in thisThis.callbacks) {
          i = list.indexOf(index.toLowerCase());
          if (i < 0) {
            throw new Error(`${functionName}syntax callback '${index}' not a rule or udt name`);
          }
          func = thisThis.callbacks[index];
          if (!func) {
            func = null;
          }
          if (typeof func === "function" || func === null) {
            if (i < rules.length) {
              ruleCallbacks[i] = func;
            } else {
              udtCallbacks[i - rules.length] = func;
            }
          } else {
            throw new Error(
              `${functionName}syntax callback[${index}] must be function reference or 'false' (false/null/undefined/etc.)`
            );
          }
        }
        for (i = 0; i < udts.length; i += 1) {
          if (udtCallbacks[i] === null) {
            throw new Error(
              `${functionName}all UDT callbacks must be defined. UDT callback[${udts[i].lower}] not a function reference`
            );
          }
        }
      };
      this.setMaxTreeDepth = function(depth) {
        if (typeof depth !== "number") {
          throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);
        }
        limitTreeDepth = Math.floor(depth);
        if (limitTreeDepth <= 0) {
          throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);
        }
      };
      this.setMaxNodeHits = function(hits) {
        if (typeof hits !== "number") {
          throw new Error(`parser: max node hits must be integer > 0: ${hits}`);
        }
        limitNodeHits = Math.floor(hits);
        if (limitNodeHits <= 0) {
          throw new Error(`parser: max node hits must be integer > 0: ${hits}`);
        }
      };
      const privateParse = function(grammar, startRuleArg, callbackData) {
        let success;
        const functionName = `${thisFileName}parse(): `;
        initializeGrammar(grammar);
        const startRule = initializeStartRule(startRuleArg);
        initializeCallbacks();
        initializeTrace();
        initializeStats();
        initializeAst();
        const sysData = new systemData();
        if (!(callbackData === void 0 || callbackData === null)) {
          syntaxData = callbackData;
        }
        opcodes = [
          {
            type: id.RNM,
            index: startRule
          }
        ];
        opExecute(0, charsBegin, sysData);
        opcodes = null;
        switch (sysData.state) {
          case id.ACTIVE:
            throw new Error(`${functionName}final state should never be 'ACTIVE'`);
          case id.NOMATCH:
            success = false;
            break;
          case id.EMPTY:
          case id.MATCH:
            if (sysData.phraseLength === charsLength) {
              success = true;
            } else {
              success = false;
            }
            break;
          default:
            throw new Error("unrecognized state");
        }
        return {
          success,
          state: sysData.state,
          length: charsLength,
          matched: sysData.phraseLength,
          maxMatched,
          maxTreeDepth,
          nodeHits,
          inputLength: chars.length,
          subBegin: charsBegin,
          subEnd: charsEnd,
          subLength: charsLength
        };
      };
      this.parseSubstring = function parseSubstring(grammar, startRule, inputChars, inputIndex, inputLength, callbackData) {
        clear();
        initializeInputChars(inputChars, inputIndex, inputLength);
        return privateParse(grammar, startRule, callbackData);
      };
      this.parse = function parse(grammar, startRule, inputChars, callbackData) {
        clear();
        initializeInputChars(inputChars, 0, inputChars.length);
        return privateParse(grammar, startRule, callbackData);
      };
      const opALT = function(opIndex, phraseIndex, sysData) {
        const op = opcodes[opIndex];
        for (let i = 0; i < op.children.length; i += 1) {
          opExecute(op.children[i], phraseIndex, sysData);
          if (sysData.state !== id.NOMATCH) {
            break;
          }
        }
      };
      const opCAT = function(opIndex, phraseIndex, sysData) {
        let success;
        let astLength;
        let catCharIndex;
        let catPhrase;
        const op = opcodes[opIndex];
        const ulen = sysData.uFrame.length();
        const plen = sysData.pFrame.length();
        if (thisThis.ast) {
          astLength = thisThis.ast.getLength();
        }
        success = true;
        catCharIndex = phraseIndex;
        catPhrase = 0;
        for (let i = 0; i < op.children.length; i += 1) {
          opExecute(op.children[i], catCharIndex, sysData);
          if (sysData.state === id.NOMATCH) {
            success = false;
            break;
          } else {
            catCharIndex += sysData.phraseLength;
            catPhrase += sysData.phraseLength;
          }
        }
        if (success) {
          sysData.state = catPhrase === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = catPhrase;
        } else {
          sysData.state = id.NOMATCH;
          sysData.phraseLength = 0;
          sysData.uFrame.pop(ulen);
          sysData.pFrame.pop(plen);
          if (thisThis.ast) {
            thisThis.ast.setLength(astLength);
          }
        }
      };
      const opREP = function(opIndex, phraseIndex, sysData) {
        let astLength;
        let repCharIndex;
        let repPhrase;
        let repCount;
        const op = opcodes[opIndex];
        if (op.max === 0) {
          sysData.state = id.EMPTY;
          sysData.phraseLength = 0;
          return;
        }
        repCharIndex = phraseIndex;
        repPhrase = 0;
        repCount = 0;
        const ulen = sysData.uFrame.length();
        const plen = sysData.pFrame.length();
        if (thisThis.ast) {
          astLength = thisThis.ast.getLength();
        }
        const TRUE = true;
        while (TRUE) {
          if (repCharIndex >= charsEnd) {
            break;
          }
          opExecute(opIndex + 1, repCharIndex, sysData);
          if (sysData.state === id.NOMATCH) {
            break;
          }
          if (sysData.state === id.EMPTY) {
            break;
          }
          repCount += 1;
          repPhrase += sysData.phraseLength;
          repCharIndex += sysData.phraseLength;
          if (repCount === op.max) {
            break;
          }
        }
        if (sysData.state === id.EMPTY) {
          sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = repPhrase;
        } else if (repCount >= op.min) {
          sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = repPhrase;
        } else {
          sysData.state = id.NOMATCH;
          sysData.phraseLength = 0;
          sysData.uFrame.pop(ulen);
          sysData.pFrame.pop(plen);
          if (thisThis.ast) {
            thisThis.ast.setLength(astLength);
          }
        }
      };
      const validateRnmCallbackResult = function(rule, sysData, charsLeft, down) {
        if (sysData.phraseLength > charsLeft) {
          let str = `${thisFileName}opRNM(${rule.name}): callback function error: `;
          str += `sysData.phraseLength: ${sysData.phraseLength}`;
          str += ` must be <= remaining chars: ${charsLeft}`;
          throw new Error(str);
        }
        switch (sysData.state) {
          case id.ACTIVE:
            if (down !== true) {
              throw new Error(
                `${thisFileName}opRNM(${rule.name}): callback function return error. ACTIVE state not allowed.`
              );
            }
            break;
          case id.EMPTY:
            sysData.phraseLength = 0;
            break;
          case id.MATCH:
            if (sysData.phraseLength === 0) {
              sysData.state = id.EMPTY;
            }
            break;
          case id.NOMATCH:
            sysData.phraseLength = 0;
            break;
          default:
            throw new Error(
              `${thisFileName}opRNM(${rule.name}): callback function return error. Unrecognized return state: ${sysData.state}`
            );
        }
      };
      const opRNM = function(opIndex, phraseIndex, sysData) {
        let astLength;
        let astDefined;
        let savedOpcodes;
        let ulen;
        let plen;
        let saveFrame;
        const op = opcodes[opIndex];
        const rule = rules[op.index];
        const callback = ruleCallbacks[rule.index];
        const notLookAround = !inLookAround();
        if (notLookAround) {
          astDefined = thisThis.ast && thisThis.ast.ruleDefined(op.index);
          if (astDefined) {
            astLength = thisThis.ast.getLength();
            thisThis.ast.down(op.index, rules[op.index].name);
          }
          ulen = sysData.uFrame.length();
          plen = sysData.pFrame.length();
          sysData.uFrame.push();
          sysData.pFrame.push();
          saveFrame = sysData.pFrame;
          sysData.pFrame = new backRef();
        }
        if (callback === null) {
          savedOpcodes = opcodes;
          opcodes = rule.opcodes;
          opExecute(0, phraseIndex, sysData);
          opcodes = savedOpcodes;
        } else {
          const charsLeft = charsEnd - phraseIndex;
          sysData.ruleIndex = rule.index;
          callback(sysData, chars, phraseIndex, syntaxData);
          validateRnmCallbackResult(rule, sysData, charsLeft, true);
          if (sysData.state === id.ACTIVE) {
            savedOpcodes = opcodes;
            opcodes = rule.opcodes;
            opExecute(0, phraseIndex, sysData);
            opcodes = savedOpcodes;
            sysData.ruleIndex = rule.index;
            callback(sysData, chars, phraseIndex, syntaxData);
            validateRnmCallbackResult(rule, sysData, charsLeft, false);
          }
        }
        if (notLookAround) {
          if (astDefined) {
            if (sysData.state === id.NOMATCH) {
              thisThis.ast.setLength(astLength);
            } else {
              thisThis.ast.up(op.index, rule.name, phraseIndex, sysData.phraseLength);
            }
          }
          sysData.pFrame = saveFrame;
          if (sysData.state === id.NOMATCH) {
            sysData.uFrame.pop(ulen);
            sysData.pFrame.pop(plen);
          } else if (rule.isBkr) {
            sysData.pFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);
            sysData.uFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);
          }
        }
      };
      const validateUdtCallbackResult = function(udt, sysData, charsLeft) {
        if (sysData.phraseLength > charsLeft) {
          let str = `${thisFileName}opUDT(${udt.name}): callback function error: `;
          str += `sysData.phraseLength: ${sysData.phraseLength}`;
          str += ` must be <= remaining chars: ${charsLeft}`;
          throw new Error(str);
        }
        switch (sysData.state) {
          case id.ACTIVE:
            throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. ACTIVE state not allowed.`);
          case id.EMPTY:
            if (udt.empty === false) {
              throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);
            } else {
              sysData.phraseLength = 0;
            }
            break;
          case id.MATCH:
            if (sysData.phraseLength === 0) {
              if (udt.empty === false) {
                throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);
              } else {
                sysData.state = id.EMPTY;
              }
            }
            break;
          case id.NOMATCH:
            sysData.phraseLength = 0;
            break;
          default:
            throw new Error(
              `${thisFileName}opUDT(${udt.name}): callback function return error. Unrecognized return state: ${sysData.state}`
            );
        }
      };
      const opUDT = function(opIndex, phraseIndex, sysData) {
        let astLength;
        let astIndex;
        let astDefined;
        let ulen;
        let plen;
        let saveFrame;
        const op = opcodes[opIndex];
        const udt = udts[op.index];
        sysData.UdtIndex = udt.index;
        const notLookAround = !inLookAround();
        if (notLookAround) {
          astDefined = thisThis.ast && thisThis.ast.udtDefined(op.index);
          if (astDefined) {
            astIndex = rules.length + op.index;
            astLength = thisThis.ast.getLength();
            thisThis.ast.down(astIndex, udt.name);
          }
          ulen = sysData.uFrame.length();
          plen = sysData.pFrame.length();
          sysData.uFrame.push();
          sysData.pFrame.push();
          saveFrame = sysData.pFrame;
          sysData.pFrame = new backRef();
        }
        const charsLeft = charsEnd - phraseIndex;
        udtCallbacks[op.index](sysData, chars, phraseIndex, syntaxData);
        validateUdtCallbackResult(udt, sysData, charsLeft);
        if (notLookAround) {
          if (astDefined) {
            if (sysData.state === id.NOMATCH) {
              thisThis.ast.setLength(astLength);
            } else {
              thisThis.ast.up(astIndex, udt.name, phraseIndex, sysData.phraseLength);
            }
          }
          sysData.pFrame = saveFrame;
          if (sysData.state === id.NOMATCH) {
            sysData.uFrame.pop(ulen);
            sysData.pFrame.pop(plen);
          } else if (udt.isBkr) {
            sysData.pFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);
            sysData.uFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);
          }
        }
      };
      const opAND = function(opIndex, phraseIndex, sysData) {
        lookAround.push({
          lookAround: id.LOOKAROUND_AHEAD,
          anchor: phraseIndex,
          charsEnd,
          charsLength
        });
        charsEnd = chars.length;
        charsLength = chars.length - charsBegin;
        opExecute(opIndex + 1, phraseIndex, sysData);
        const pop = lookAround.pop();
        charsEnd = pop.charsEnd;
        charsLength = pop.charsLength;
        sysData.phraseLength = 0;
        switch (sysData.state) {
          case id.EMPTY:
            sysData.state = id.EMPTY;
            break;
          case id.MATCH:
            sysData.state = id.EMPTY;
            break;
          case id.NOMATCH:
            sysData.state = id.NOMATCH;
            break;
          default:
            throw new Error(`opAND: invalid state ${sysData.state}`);
        }
      };
      const opNOT = function(opIndex, phraseIndex, sysData) {
        lookAround.push({
          lookAround: id.LOOKAROUND_AHEAD,
          anchor: phraseIndex,
          charsEnd,
          charsLength
        });
        charsEnd = chars.length;
        charsLength = chars.length - charsBegin;
        opExecute(opIndex + 1, phraseIndex, sysData);
        const pop = lookAround.pop();
        charsEnd = pop.charsEnd;
        charsLength = pop.charsLength;
        sysData.phraseLength = 0;
        switch (sysData.state) {
          case id.EMPTY:
          case id.MATCH:
            sysData.state = id.NOMATCH;
            break;
          case id.NOMATCH:
            sysData.state = id.EMPTY;
            break;
          default:
            throw new Error(`opNOT: invalid state ${sysData.state}`);
        }
      };
      const opTRG = function(opIndex, phraseIndex, sysData) {
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        if (phraseIndex < charsEnd) {
          if (op.min <= chars[phraseIndex] && chars[phraseIndex] <= op.max) {
            sysData.state = id.MATCH;
            sysData.phraseLength = 1;
          }
        }
      };
      const opTBS = function(opIndex, phraseIndex, sysData) {
        let i;
        const op = opcodes[opIndex];
        const len = op.string.length;
        sysData.state = id.NOMATCH;
        if (phraseIndex + len <= charsEnd) {
          for (i = 0; i < len; i += 1) {
            if (chars[phraseIndex + i] !== op.string[i]) {
              return;
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        }
      };
      const opTLS = function(opIndex, phraseIndex, sysData) {
        let i;
        let code;
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        const len = op.string.length;
        if (len === 0) {
          sysData.state = id.EMPTY;
          return;
        }
        if (phraseIndex + len <= charsEnd) {
          for (i = 0; i < len; i += 1) {
            code = chars[phraseIndex + i];
            if (code >= 65 && code <= 90) {
              code += 32;
            }
            if (code !== op.string[i]) {
              return;
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        }
      };
      const opABG = function(opIndex, phraseIndex, sysData) {
        sysData.state = id.NOMATCH;
        sysData.phraseLength = 0;
        sysData.state = phraseIndex === 0 ? id.EMPTY : id.NOMATCH;
      };
      const opAEN = function(opIndex, phraseIndex, sysData) {
        sysData.state = id.NOMATCH;
        sysData.phraseLength = 0;
        sysData.state = phraseIndex === chars.length ? id.EMPTY : id.NOMATCH;
      };
      const opBKR = function(opIndex, phraseIndex, sysData) {
        let i;
        let code;
        let lmcode;
        let lower;
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        if (op.index < rules.length) {
          lower = rules[op.index].lower;
        } else {
          lower = udts[op.index - rules.length].lower;
        }
        const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);
        const insensitive = op.bkrCase === id.BKR_MODE_CI;
        if (frame === null) {
          return;
        }
        const lmIndex = frame.phraseIndex;
        const len = frame.phraseLength;
        if (len === 0) {
          sysData.state = id.EMPTY;
          return;
        }
        if (phraseIndex + len <= charsEnd) {
          if (insensitive) {
            for (i = 0; i < len; i += 1) {
              code = chars[phraseIndex + i];
              lmcode = chars[lmIndex + i];
              if (code >= 65 && code <= 90) {
                code += 32;
              }
              if (lmcode >= 65 && lmcode <= 90) {
                lmcode += 32;
              }
              if (code !== lmcode) {
                return;
              }
            }
            sysData.state = id.MATCH;
            sysData.phraseLength = len;
          } else {
            for (i = 0; i < len; i += 1) {
              code = chars[phraseIndex + i];
              lmcode = chars[lmIndex + i];
              if (code !== lmcode) {
                return;
              }
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        }
      };
      const opBKA = function(opIndex, phraseIndex, sysData) {
        lookAround.push({
          lookAround: id.LOOKAROUND_BEHIND,
          anchor: phraseIndex
        });
        opExecute(opIndex + 1, phraseIndex, sysData);
        lookAround.pop();
        sysData.phraseLength = 0;
        switch (sysData.state) {
          case id.EMPTY:
            sysData.state = id.EMPTY;
            break;
          case id.MATCH:
            sysData.state = id.EMPTY;
            break;
          case id.NOMATCH:
            sysData.state = id.NOMATCH;
            break;
          default:
            throw new Error(`opBKA: invalid state ${sysData.state}`);
        }
      };
      const opBKN = function(opIndex, phraseIndex, sysData) {
        lookAround.push({
          lookAround: id.LOOKAROUND_BEHIND,
          anchor: phraseIndex
        });
        opExecute(opIndex + 1, phraseIndex, sysData);
        lookAround.pop();
        sysData.phraseLength = 0;
        switch (sysData.state) {
          case id.EMPTY:
          case id.MATCH:
            sysData.state = id.NOMATCH;
            break;
          case id.NOMATCH:
            sysData.state = id.EMPTY;
            break;
          default:
            throw new Error(`opBKN: invalid state ${sysData.state}`);
        }
      };
      const opCATBehind = function(opIndex, phraseIndex, sysData) {
        let success;
        let astLength;
        let catCharIndex;
        let catMatched;
        const op = opcodes[opIndex];
        const ulen = sysData.uFrame.length();
        const plen = sysData.pFrame.length();
        if (thisThis.ast) {
          astLength = thisThis.ast.getLength();
        }
        success = true;
        catCharIndex = phraseIndex;
        catMatched = 0;
        for (let i = op.children.length - 1; i >= 0; i -= 1) {
          opExecute(op.children[i], catCharIndex, sysData);
          catCharIndex -= sysData.phraseLength;
          catMatched += sysData.phraseLength;
          if (sysData.state === id.NOMATCH) {
            success = false;
            break;
          }
        }
        if (success) {
          sysData.state = catMatched === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = catMatched;
        } else {
          sysData.state = id.NOMATCH;
          sysData.phraseLength = 0;
          sysData.uFrame.pop(ulen);
          sysData.pFrame.pop(plen);
          if (thisThis.ast) {
            thisThis.ast.setLength(astLength);
          }
        }
      };
      const opREPBehind = function(opIndex, phraseIndex, sysData) {
        let astLength;
        let repCharIndex;
        let repPhrase;
        let repCount;
        const op = opcodes[opIndex];
        repCharIndex = phraseIndex;
        repPhrase = 0;
        repCount = 0;
        const ulen = sysData.uFrame.length();
        const plen = sysData.pFrame.length();
        if (thisThis.ast) {
          astLength = thisThis.ast.getLength();
        }
        const TRUE = true;
        while (TRUE) {
          if (repCharIndex <= 0) {
            break;
          }
          opExecute(opIndex + 1, repCharIndex, sysData);
          if (sysData.state === id.NOMATCH) {
            break;
          }
          if (sysData.state === id.EMPTY) {
            break;
          }
          repCount += 1;
          repPhrase += sysData.phraseLength;
          repCharIndex -= sysData.phraseLength;
          if (repCount === op.max) {
            break;
          }
        }
        if (sysData.state === id.EMPTY) {
          sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = repPhrase;
        } else if (repCount >= op.min) {
          sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = repPhrase;
        } else {
          sysData.state = id.NOMATCH;
          sysData.phraseLength = 0;
          sysData.uFrame.pop(ulen);
          sysData.pFrame.pop(plen);
          if (thisThis.ast) {
            thisThis.ast.setLength(astLength);
          }
        }
      };
      const opTRGBehind = function(opIndex, phraseIndex, sysData) {
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        sysData.phraseLength = 0;
        if (phraseIndex > 0) {
          const char = chars[phraseIndex - 1];
          if (op.min <= char && char <= op.max) {
            sysData.state = id.MATCH;
            sysData.phraseLength = 1;
          }
        }
      };
      const opTBSBehind = function(opIndex, phraseIndex, sysData) {
        let i;
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        const len = op.string.length;
        const beg = phraseIndex - len;
        if (beg >= 0) {
          for (i = 0; i < len; i += 1) {
            if (chars[beg + i] !== op.string[i]) {
              return;
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        }
      };
      const opTLSBehind = function(opIndex, phraseIndex, sysData) {
        let char;
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        const len = op.string.length;
        if (len === 0) {
          sysData.state = id.EMPTY;
          return;
        }
        const beg = phraseIndex - len;
        if (beg >= 0) {
          for (let i = 0; i < len; i += 1) {
            char = chars[beg + i];
            if (char >= 65 && char <= 90) {
              char += 32;
            }
            if (char !== op.string[i]) {
              return;
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        }
      };
      const opBKRBehind = function(opIndex, phraseIndex, sysData) {
        let i;
        let code;
        let lmcode;
        let lower;
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        sysData.phraseLength = 0;
        if (op.index < rules.length) {
          lower = rules[op.index].lower;
        } else {
          lower = udts[op.index - rules.length].lower;
        }
        const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);
        const insensitive = op.bkrCase === id.BKR_MODE_CI;
        if (frame === null) {
          return;
        }
        const lmIndex = frame.phraseIndex;
        const len = frame.phraseLength;
        if (len === 0) {
          sysData.state = id.EMPTY;
          sysData.phraseLength = 0;
          return;
        }
        const beg = phraseIndex - len;
        if (beg >= 0) {
          if (insensitive) {
            for (i = 0; i < len; i += 1) {
              code = chars[beg + i];
              lmcode = chars[lmIndex + i];
              if (code >= 65 && code <= 90) {
                code += 32;
              }
              if (lmcode >= 65 && lmcode <= 90) {
                lmcode += 32;
              }
              if (code !== lmcode) {
                return;
              }
            }
            sysData.state = id.MATCH;
            sysData.phraseLength = len;
          } else {
            for (i = 0; i < len; i += 1) {
              code = chars[beg + i];
              lmcode = chars[lmIndex + i];
              if (code !== lmcode) {
                return;
              }
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        }
      };
      opExecute = function opExecuteFunc(opIndex, phraseIndex, sysData) {
        let ret = true;
        const op = opcodes[opIndex];
        nodeHits += 1;
        if (nodeHits > limitNodeHits) {
          throw new Error(`parser: maximum number of node hits exceeded: ${limitNodeHits}`);
        }
        treeDepth += 1;
        if (treeDepth > maxTreeDepth) {
          maxTreeDepth = treeDepth;
          if (maxTreeDepth > limitTreeDepth) {
            throw new Error(`parser: maximum parse tree depth exceeded: ${limitTreeDepth}`);
          }
        }
        sysData.refresh();
        if (thisThis.trace !== null) {
          const lk = lookAroundValue();
          thisThis.trace.down(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);
        }
        if (inLookBehind()) {
          switch (op.type) {
            case id.ALT:
              opALT(opIndex, phraseIndex, sysData);
              break;
            case id.CAT:
              opCATBehind(opIndex, phraseIndex, sysData);
              break;
            case id.REP:
              opREPBehind(opIndex, phraseIndex, sysData);
              break;
            case id.RNM:
              opRNM(opIndex, phraseIndex, sysData);
              break;
            case id.UDT:
              opUDT(opIndex, phraseIndex, sysData);
              break;
            case id.AND:
              opAND(opIndex, phraseIndex, sysData);
              break;
            case id.NOT:
              opNOT(opIndex, phraseIndex, sysData);
              break;
            case id.TRG:
              opTRGBehind(opIndex, phraseIndex, sysData);
              break;
            case id.TBS:
              opTBSBehind(opIndex, phraseIndex, sysData);
              break;
            case id.TLS:
              opTLSBehind(opIndex, phraseIndex, sysData);
              break;
            case id.BKR:
              opBKRBehind(opIndex, phraseIndex, sysData);
              break;
            case id.BKA:
              opBKA(opIndex, phraseIndex, sysData);
              break;
            case id.BKN:
              opBKN(opIndex, phraseIndex, sysData);
              break;
            case id.ABG:
              opABG(opIndex, phraseIndex, sysData);
              break;
            case id.AEN:
              opAEN(opIndex, phraseIndex, sysData);
              break;
            default:
              ret = false;
              break;
          }
        } else {
          switch (op.type) {
            case id.ALT:
              opALT(opIndex, phraseIndex, sysData);
              break;
            case id.CAT:
              opCAT(opIndex, phraseIndex, sysData);
              break;
            case id.REP:
              opREP(opIndex, phraseIndex, sysData);
              break;
            case id.RNM:
              opRNM(opIndex, phraseIndex, sysData);
              break;
            case id.UDT:
              opUDT(opIndex, phraseIndex, sysData);
              break;
            case id.AND:
              opAND(opIndex, phraseIndex, sysData);
              break;
            case id.NOT:
              opNOT(opIndex, phraseIndex, sysData);
              break;
            case id.TRG:
              opTRG(opIndex, phraseIndex, sysData);
              break;
            case id.TBS:
              opTBS(opIndex, phraseIndex, sysData);
              break;
            case id.TLS:
              opTLS(opIndex, phraseIndex, sysData);
              break;
            case id.BKR:
              opBKR(opIndex, phraseIndex, sysData);
              break;
            case id.BKA:
              opBKA(opIndex, phraseIndex, sysData);
              break;
            case id.BKN:
              opBKN(opIndex, phraseIndex, sysData);
              break;
            case id.ABG:
              opABG(opIndex, phraseIndex, sysData);
              break;
            case id.AEN:
              opAEN(opIndex, phraseIndex, sysData);
              break;
            default:
              ret = false;
              break;
          }
        }
        if (!inLookAround() && phraseIndex + sysData.phraseLength > maxMatched) {
          maxMatched = phraseIndex + sysData.phraseLength;
        }
        if (thisThis.stats !== null) {
          thisThis.stats.collect(op, sysData);
        }
        if (thisThis.trace !== null) {
          const lk = lookAroundValue();
          thisThis.trace.up(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);
        }
        treeDepth -= 1;
        return ret;
      };
    };
  }
});

// node_modules/apg-js/src/apg-lib/stats.js
var require_stats = __commonJS({
  "node_modules/apg-js/src/apg-lib/stats.js"(exports, module) {
    module.exports = function statsFunc() {
      const id = require_identifiers();
      const utils = require_utilities();
      const style = require_style();
      const thisFileName = "stats.js: ";
      let rules = [];
      let udts = [];
      const stats = [];
      let totals;
      const ruleStats = [];
      const udtStats = [];
      this.statsObject = "statsObject";
      const nameId = "stats";
      const sortAlpha = function sortAlpha2(lhs, rhs) {
        if (lhs.lower < rhs.lower) {
          return -1;
        }
        if (lhs.lower > rhs.lower) {
          return 1;
        }
        return 0;
      };
      const sortHits = function sortHits2(lhs, rhs) {
        if (lhs.total < rhs.total) {
          return 1;
        }
        if (lhs.total > rhs.total) {
          return -1;
        }
        return sortAlpha(lhs, rhs);
      };
      const sortIndex = function sortIndex2(lhs, rhs) {
        if (lhs.index < rhs.index) {
          return -1;
        }
        if (lhs.index > rhs.index) {
          return 1;
        }
        return 0;
      };
      const EmptyStat = function EmptyStat2() {
        this.empty = 0;
        this.match = 0;
        this.nomatch = 0;
        this.total = 0;
      };
      const clear = function clear2() {
        stats.length = 0;
        totals = new EmptyStat();
        stats[id.ALT] = new EmptyStat();
        stats[id.CAT] = new EmptyStat();
        stats[id.REP] = new EmptyStat();
        stats[id.RNM] = new EmptyStat();
        stats[id.TRG] = new EmptyStat();
        stats[id.TBS] = new EmptyStat();
        stats[id.TLS] = new EmptyStat();
        stats[id.UDT] = new EmptyStat();
        stats[id.AND] = new EmptyStat();
        stats[id.NOT] = new EmptyStat();
        stats[id.BKR] = new EmptyStat();
        stats[id.BKA] = new EmptyStat();
        stats[id.BKN] = new EmptyStat();
        stats[id.ABG] = new EmptyStat();
        stats[id.AEN] = new EmptyStat();
        ruleStats.length = 0;
        for (let i = 0; i < rules.length; i += 1) {
          ruleStats.push({
            empty: 0,
            match: 0,
            nomatch: 0,
            total: 0,
            name: rules[i].name,
            lower: rules[i].lower,
            index: rules[i].index
          });
        }
        if (udts.length > 0) {
          udtStats.length = 0;
          for (let i = 0; i < udts.length; i += 1) {
            udtStats.push({
              empty: 0,
              match: 0,
              nomatch: 0,
              total: 0,
              name: udts[i].name,
              lower: udts[i].lower,
              index: udts[i].index
            });
          }
        }
      };
      const incStat = function incStat2(stat, state) {
        stat.total += 1;
        switch (state) {
          case id.EMPTY:
            stat.empty += 1;
            break;
          case id.MATCH:
            stat.match += 1;
            break;
          case id.NOMATCH:
            stat.nomatch += 1;
            break;
          default:
            throw new Error(`${thisFileName}collect(): incStat(): unrecognized state: ${state}`);
        }
      };
      const displayRow = function displayRow2(name, stat) {
        let html = "";
        html += "<tr>";
        html += `<td class="${style.CLASS_ACTIVE}">${name}</td>`;
        html += `<td class="${style.CLASS_EMPTY}">${stat.empty}</td>`;
        html += `<td class="${style.CLASS_MATCH}">${stat.match}</td>`;
        html += `<td class="${style.CLASS_NOMATCH}">${stat.nomatch}</td>`;
        html += `<td class="${style.CLASS_ACTIVE}">${stat.total}</td>`;
        html += "</tr>\n";
        return html;
      };
      const displayOpsOnly = function displayOpsOnly2() {
        let html = "";
        html += displayRow("ALT", stats[id.ALT]);
        html += displayRow("CAT", stats[id.CAT]);
        html += displayRow("REP", stats[id.REP]);
        html += displayRow("RNM", stats[id.RNM]);
        html += displayRow("TRG", stats[id.TRG]);
        html += displayRow("TBS", stats[id.TBS]);
        html += displayRow("TLS", stats[id.TLS]);
        html += displayRow("UDT", stats[id.UDT]);
        html += displayRow("AND", stats[id.AND]);
        html += displayRow("NOT", stats[id.NOT]);
        html += displayRow("BKR", stats[id.BKR]);
        html += displayRow("BKA", stats[id.BKA]);
        html += displayRow("BKN", stats[id.BKN]);
        html += displayRow("ABG", stats[id.ABG]);
        html += displayRow("AEN", stats[id.AEN]);
        html += displayRow("totals", totals);
        return html;
      };
      const displayRules = function displayRules2() {
        let html = "";
        html += "<tr><th></th><th></th><th></th><th></th><th></th></tr>\n";
        html += "<tr><th>rules</th><th></th><th></th><th></th><th></th></tr>\n";
        for (let i = 0; i < rules.length; i += 1) {
          if (ruleStats[i].total > 0) {
            html += "<tr>";
            html += `<td class="${style.CLASS_ACTIVE}">${ruleStats[i].name}</td>`;
            html += `<td class="${style.CLASS_EMPTY}">${ruleStats[i].empty}</td>`;
            html += `<td class="${style.CLASS_MATCH}">${ruleStats[i].match}</td>`;
            html += `<td class="${style.CLASS_NOMATCH}">${ruleStats[i].nomatch}</td>`;
            html += `<td class="${style.CLASS_ACTIVE}">${ruleStats[i].total}</td>`;
            html += "</tr>\n";
          }
        }
        if (udts.length > 0) {
          html += "<tr><th></th><th></th><th></th><th></th><th></th></tr>\n";
          html += "<tr><th>udts</th><th></th><th></th><th></th><th></th></tr>\n";
          for (let i = 0; i < udts.length; i += 1) {
            if (udtStats[i].total > 0) {
              html += "<tr>";
              html += `<td class="${style.CLASS_ACTIVE}">${udtStats[i].name}</td>`;
              html += `<td class="${style.CLASS_EMPTY}">${udtStats[i].empty}</td>`;
              html += `<td class="${style.CLASS_MATCH}">${udtStats[i].match}</td>`;
              html += `<td class="${style.CLASS_NOMATCH}">${udtStats[i].nomatch}</td>`;
              html += `<td class="${style.CLASS_ACTIVE}">${udtStats[i].total}</td>`;
              html += "</tr>\n";
            }
          }
        }
        return html;
      };
      this.validate = function validate2(name) {
        let ret = false;
        if (typeof name === "string" && nameId === name) {
          ret = true;
        }
        return ret;
      };
      this.init = function init(inputRules, inputUdts) {
        rules = inputRules;
        udts = inputUdts;
        clear();
      };
      this.collect = function collect(op, result) {
        incStat(totals, result.state, result.phraseLength);
        incStat(stats[op.type], result.state, result.phraseLength);
        if (op.type === id.RNM) {
          incStat(ruleStats[op.index], result.state, result.phraseLength);
        }
        if (op.type === id.UDT) {
          incStat(udtStats[op.index], result.state, result.phraseLength);
        }
      };
      this.toHtml = function toHtml(type, caption) {
        let html = "";
        html += `<table class="${style.CLASS_STATS}">
`;
        if (typeof caption === "string") {
          html += `<caption>${caption}</caption>
`;
        }
        html += `<tr><th class="${style.CLASS_ACTIVE}">ops</th>
`;
        html += `<th class="${style.CLASS_EMPTY}">EMPTY</th>
`;
        html += `<th class="${style.CLASS_MATCH}">MATCH</th>
`;
        html += `<th class="${style.CLASS_NOMATCH}">NOMATCH</th>
`;
        html += `<th class="${style.CLASS_ACTIVE}">totals</th></tr>
`;
        const test = true;
        while (test) {
          if (type === void 0) {
            html += displayOpsOnly();
            break;
          }
          if (type === null) {
            html += displayOpsOnly();
            break;
          }
          if (type === "ops") {
            html += displayOpsOnly();
            break;
          }
          if (type === "index") {
            ruleStats.sort(sortIndex);
            if (udtStats.length > 0) {
              udtStats.sort(sortIndex);
            }
            html += displayOpsOnly();
            html += displayRules();
            break;
          }
          if (type === "hits") {
            ruleStats.sort(sortHits);
            if (udtStats.length > 0) {
              udtStats.sort(sortIndex);
            }
            html += displayOpsOnly();
            html += displayRules();
            break;
          }
          if (type === "alpha") {
            ruleStats.sort(sortAlpha);
            if (udtStats.length > 0) {
              udtStats.sort(sortAlpha);
            }
            html += displayOpsOnly();
            html += displayRules();
            break;
          }
          break;
        }
        html += "</table>\n";
        return html;
      };
      this.toHtmlPage = function toHtmlPage(type, caption, title) {
        return utils.htmlToPage(this.toHtml(type, caption), title);
      };
    };
  }
});

// node_modules/apg-js/src/apg-lib/trace.js
var require_trace = __commonJS({
  "node_modules/apg-js/src/apg-lib/trace.js"(exports, module) {
    module.exports = function exportTrace() {
      const utils = require_utilities();
      const style = require_style();
      const circular = new (require_circular_buffer())();
      const id = require_identifiers();
      const thisFileName = "trace.js: ";
      const that = this;
      const MODE_HEX = 16;
      const MODE_DEC = 10;
      const MODE_ASCII = 8;
      const MODE_UNICODE = 32;
      const MAX_PHRASE = 80;
      const MAX_TLS = 5;
      const records = [];
      let maxRecords = 5e3;
      let lastRecord = -1;
      let filteredRecords = 0;
      let treeDepth = 0;
      const recordStack = [];
      let chars = null;
      let rules = null;
      let udts = null;
      const operatorFilter = [];
      const ruleFilter = [];
      const PHRASE_END = `<span class="${style.CLASS_LINEEND}">&bull;</span>`;
      const PHRASE_CONTINUE = `<span class="${style.CLASS_LINEEND}">&hellip;</span>`;
      const PHRASE_EMPTY = `<span class="${style.CLASS_EMPTY}">&#120634;</span>`;
      const initOperatorFilter = function() {
        const setOperators = function(set) {
          operatorFilter[id.ALT] = set;
          operatorFilter[id.CAT] = set;
          operatorFilter[id.REP] = set;
          operatorFilter[id.TLS] = set;
          operatorFilter[id.TBS] = set;
          operatorFilter[id.TRG] = set;
          operatorFilter[id.AND] = set;
          operatorFilter[id.NOT] = set;
          operatorFilter[id.BKR] = set;
          operatorFilter[id.BKA] = set;
          operatorFilter[id.BKN] = set;
          operatorFilter[id.ABG] = set;
          operatorFilter[id.AEN] = set;
        };
        let items = 0;
        for (const name in that.filter.operators) {
          items += 1;
        }
        if (items === 0) {
          setOperators(false);
          return;
        }
        for (const name in that.filter.operators) {
          const upper = name.toUpperCase();
          if (upper === "<ALL>") {
            setOperators(true);
            return;
          }
          if (upper === "<NONE>") {
            setOperators(false);
            return;
          }
        }
        setOperators(false);
        for (const name in that.filter.operators) {
          const upper = name.toUpperCase();
          if (upper === "ALT") {
            operatorFilter[id.ALT] = that.filter.operators[name] === true;
          } else if (upper === "CAT") {
            operatorFilter[id.CAT] = that.filter.operators[name] === true;
          } else if (upper === "REP") {
            operatorFilter[id.REP] = that.filter.operators[name] === true;
          } else if (upper === "AND") {
            operatorFilter[id.AND] = that.filter.operators[name] === true;
          } else if (upper === "NOT") {
            operatorFilter[id.NOT] = that.filter.operators[name] === true;
          } else if (upper === "TLS") {
            operatorFilter[id.TLS] = that.filter.operators[name] === true;
          } else if (upper === "TBS") {
            operatorFilter[id.TBS] = that.filter.operators[name] === true;
          } else if (upper === "TRG") {
            operatorFilter[id.TRG] = that.filter.operators[name] === true;
          } else if (upper === "BKR") {
            operatorFilter[id.BKR] = that.filter.operators[name] === true;
          } else if (upper === "BKA") {
            operatorFilter[id.BKA] = that.filter.operators[name] === true;
          } else if (upper === "BKN") {
            operatorFilter[id.BKN] = that.filter.operators[name] === true;
          } else if (upper === "ABG") {
            operatorFilter[id.ABG] = that.filter.operators[name] === true;
          } else if (upper === "AEN") {
            operatorFilter[id.AEN] = that.filter.operators[name] === true;
          } else {
            throw new Error(
              `${thisFileName}initOpratorFilter: '${name}' not a valid operator name. Must be <all>, <none>, alt, cat, rep, tls, tbs, trg, and, not, bkr, bka or bkn`
            );
          }
        }
      };
      const initRuleFilter = function() {
        const setRules = function(set) {
          operatorFilter[id.RNM] = set;
          operatorFilter[id.UDT] = set;
          const count = rules.length + udts.length;
          ruleFilter.length = 0;
          for (let i2 = 0; i2 < count; i2 += 1) {
            ruleFilter.push(set);
          }
        };
        let items;
        let i;
        const list = [];
        for (i = 0; i < rules.length; i += 1) {
          list.push(rules[i].lower);
        }
        for (i = 0; i < udts.length; i += 1) {
          list.push(udts[i].lower);
        }
        ruleFilter.length = 0;
        items = 0;
        for (const name in that.filter.rules) {
          items += 1;
        }
        if (items === 0) {
          setRules(true);
          return;
        }
        for (const name in that.filter.rules) {
          const lower = name.toLowerCase();
          if (lower === "<all>") {
            setRules(true);
            return;
          }
          if (lower === "<none>") {
            setRules(false);
            return;
          }
        }
        setRules(false);
        operatorFilter[id.RNM] = true;
        operatorFilter[id.UDT] = true;
        for (const name in that.filter.rules) {
          const lower = name.toLowerCase();
          i = list.indexOf(lower);
          if (i < 0) {
            throw new Error(`${thisFileName}initRuleFilter: '${name}' not a valid rule or udt name`);
          }
          ruleFilter[i] = that.filter.rules[name] === true;
        }
      };
      this.traceObject = "traceObject";
      this.filter = {
        operators: [],
        rules: []
      };
      this.setMaxRecords = function(max, last) {
        lastRecord = -1;
        if (typeof max === "number" && max > 0) {
          maxRecords = Math.ceil(max);
        } else {
          maxRecords = 0;
          return;
        }
        if (typeof last === "number") {
          lastRecord = Math.floor(last);
          if (lastRecord < 0) {
            lastRecord = -1;
          }
        }
      };
      this.getMaxRecords = function() {
        return maxRecords;
      };
      this.getLastRecord = function() {
        return lastRecord;
      };
      this.init = function(rulesIn, udtsIn, charsIn) {
        records.length = 0;
        recordStack.length = 0;
        filteredRecords = 0;
        treeDepth = 0;
        chars = charsIn;
        rules = rulesIn;
        udts = udtsIn;
        initOperatorFilter();
        initRuleFilter();
        circular.init(maxRecords);
      };
      const filterOps = function(op) {
        let ret = false;
        if (op.type === id.RNM) {
          if (operatorFilter[op.type] && ruleFilter[op.index]) {
            ret = true;
          } else {
            ret = false;
          }
        } else if (op.type === id.UDT) {
          if (operatorFilter[op.type] && ruleFilter[rules.length + op.index]) {
            ret = true;
          } else {
            ret = false;
          }
        } else {
          ret = operatorFilter[op.type];
        }
        return ret;
      };
      const filterRecords = function(record) {
        if (lastRecord === -1) {
          return true;
        }
        if (record <= lastRecord) {
          return true;
        }
        return false;
      };
      this.down = function(op, state, offset, length, anchor, lookAround) {
        if (filterRecords(filteredRecords) && filterOps(op)) {
          recordStack.push(filteredRecords);
          records[circular.increment()] = {
            dirUp: false,
            depth: treeDepth,
            thisLine: filteredRecords,
            thatLine: void 0,
            opcode: op,
            state,
            phraseIndex: offset,
            phraseLength: length,
            lookAnchor: anchor,
            lookAround
          };
          filteredRecords += 1;
          treeDepth += 1;
        }
      };
      this.up = function(op, state, offset, length, anchor, lookAround) {
        if (filterRecords(filteredRecords) && filterOps(op)) {
          const thisLine = filteredRecords;
          const thatLine = recordStack.pop();
          const thatRecord = circular.getListIndex(thatLine);
          if (thatRecord !== -1) {
            records[thatRecord].thatLine = thisLine;
          }
          treeDepth -= 1;
          records[circular.increment()] = {
            dirUp: true,
            depth: treeDepth,
            thisLine,
            thatLine,
            opcode: op,
            state,
            phraseIndex: offset,
            phraseLength: length,
            lookAnchor: anchor,
            lookAround
          };
          filteredRecords += 1;
        }
      };
      const toTreeObj = function() {
        function nodeOpcode(node2, opcode) {
          let name;
          let casetype;
          let modetype;
          if (opcode) {
            node2.op = { id: opcode.type, name: utils.opcodeToString(opcode.type) };
            node2.opData = void 0;
            switch (opcode.type) {
              case id.RNM:
                node2.opData = rules[opcode.index].name;
                break;
              case id.UDT:
                node2.opData = udts[opcode.index].name;
                break;
              case id.BKR:
                if (opcode.index < rules.length) {
                  name = rules[opcode.index].name;
                } else {
                  name = udts[opcode.index - rules.length].name;
                }
                casetype = opcode.bkrCase === id.BKR_MODE_CI ? "%i" : "%s";
                modetype = opcode.bkrMode === id.BKR_MODE_UM ? "%u" : "%p";
                node2.opData = `\\\\${casetype}${modetype}${name}`;
                break;
              case id.TLS:
                node2.opData = [];
                for (let i = 0; i < opcode.string.length; i += 1) {
                  node2.opData.push(opcode.string[i]);
                }
                break;
              case id.TBS:
                node2.opData = [];
                for (let i = 0; i < opcode.string.length; i += 1) {
                  node2.opData.push(opcode.string[i]);
                }
                break;
              case id.TRG:
                node2.opData = [opcode.min, opcode.max];
                break;
              case id.REP:
                node2.opData = [opcode.min, opcode.max];
                break;
              default:
                throw new Error("unrecognized opcode");
            }
          } else {
            node2.op = { id: void 0, name: void 0 };
            node2.opData = void 0;
          }
        }
        function nodePhrase(state, index, length) {
          if (state === id.MATCH) {
            return {
              index,
              length
            };
          }
          if (state === id.NOMATCH) {
            return {
              index,
              length: 0
            };
          }
          if (state === id.EMPTY) {
            return {
              index,
              length: 0
            };
          }
          return null;
        }
        let nodeId = -1;
        function nodeDown(parent2, record2, depth2) {
          const node2 = {
            // eslint-disable-next-line no-plusplus
            id: nodeId++,
            branch: -1,
            parent: parent2,
            up: false,
            down: false,
            depth: depth2,
            children: []
          };
          if (record2) {
            node2.down = true;
            node2.state = { id: record2.state, name: utils.stateToString(record2.state) };
            node2.phrase = null;
            nodeOpcode(node2, record2.opcode);
          } else {
            node2.state = { id: void 0, name: void 0 };
            node2.phrase = nodePhrase();
            nodeOpcode(node2, void 0);
          }
          return node2;
        }
        function nodeUp(node2, record2) {
          if (record2) {
            node2.up = true;
            node2.state = { id: record2.state, name: utils.stateToString(record2.state) };
            node2.phrase = nodePhrase(record2.state, record2.phraseIndex, record2.phraseLength);
            if (!node2.down) {
              nodeOpcode(node2, record2.opcode);
            }
          }
        }
        let leafNodes = 0;
        let depth = -1;
        let branchCount = 1;
        function walk(node2) {
          depth += 1;
          node2.branch = branchCount;
          if (depth > treeDepth) {
            treeDepth = depth;
          }
          if (node2.children.length === 0) {
            leafNodes += 1;
          } else {
            for (let i = 0; i < node2.children.length; i += 1) {
              if (i > 0) {
                branchCount += 1;
              }
              node2.children[i].leftMost = false;
              node2.children[i].rightMost = false;
              if (node2.leftMost) {
                node2.children[i].leftMost = i === 0;
              }
              if (node2.rightMost) {
                node2.children[i].rightMost = i === node2.children.length - 1;
              }
              walk(node2.children[i]);
            }
          }
          depth -= 1;
        }
        function display(node2, offset) {
          let name;
          const obj2 = {};
          obj2.id = node2.id;
          obj2.branch = node2.branch;
          obj2.leftMost = node2.leftMost;
          obj2.rightMost = node2.rightMost;
          name = node2.state.name ? node2.state.name : "ACTIVE";
          obj2.state = { id: node2.state.id, name };
          name = node2.op.name ? node2.op.name : "?";
          obj2.op = { id: node2.op.id, name };
          if (typeof node2.opData === "string") {
            obj2.opData = node2.opData;
          } else if (Array.isArray(node2.opData)) {
            obj2.opData = [];
            for (let i = 0; i < node2.opData.length; i += 1) {
              obj2.opData[i] = node2.opData[i];
            }
          } else {
            obj2.opData = void 0;
          }
          if (node2.phrase) {
            obj2.phrase = { index: node2.phrase.index, length: node2.phrase.length };
          } else {
            obj2.phrase = null;
          }
          obj2.depth = node2.depth;
          obj2.children = [];
          for (let i = 0; i < node2.children.length; i += 1) {
            const c = i !== node2.children.length - 1;
            obj2.children[i] = display(node2.children[i], offset, c);
          }
          return obj2;
        }
        const branch = [];
        let root;
        let node;
        let parent;
        let record;
        let firstRecord = true;
        const dummy = nodeDown(null, null, -1);
        branch.push(dummy);
        node = dummy;
        circular.forEach((lineIndex) => {
          record = records[lineIndex];
          if (firstRecord) {
            firstRecord = false;
            if (record.depth > 0) {
              const num = record.dirUp ? record.depth + 1 : record.depth;
              for (let i = 0; i < num; i += 1) {
                parent = node;
                node = nodeDown(node, null, i);
                branch.push(node);
                parent.children.push(node);
              }
            }
          }
          if (record.dirUp) {
            node = branch.pop();
            nodeUp(node, record);
            node = branch[branch.length - 1];
          } else {
            parent = node;
            node = nodeDown(node, record, record.depth);
            branch.push(node);
            parent.children.push(node);
          }
        });
        while (branch.length > 1) {
          node = branch.pop();
          nodeUp(node, null);
        }
        if (dummy.children.length === 0) {
          throw new Error("trace.toTree(): parse tree has no nodes");
        }
        if (branch.length === 0) {
          throw new Error("trace.toTree(): integrity check: dummy root node disappeared?");
        }
        root = dummy.children[0];
        let prev = root;
        while (root && !root.down && !root.up) {
          prev = root;
          root = root.children[0];
        }
        root = prev;
        root.leftMost = true;
        root.rightMost = true;
        walk(root);
        root.branch = 0;
        const obj = {};
        obj.string = [];
        for (let i = 0; i < chars.length; i += 1) {
          obj.string[i] = chars[i];
        }
        obj.rules = [];
        for (let i = 0; i < rules.length; i += 1) {
          obj.rules[i] = rules[i].name;
        }
        obj.udts = [];
        for (let i = 0; i < udts.length; i += 1) {
          obj.udts[i] = udts[i].name;
        }
        obj.id = {};
        obj.id.ALT = { id: id.ALT, name: "ALT" };
        obj.id.CAT = { id: id.CAT, name: "CAT" };
        obj.id.REP = { id: id.REP, name: "REP" };
        obj.id.RNM = { id: id.RNM, name: "RNM" };
        obj.id.TLS = { id: id.TLS, name: "TLS" };
        obj.id.TBS = { id: id.TBS, name: "TBS" };
        obj.id.TRG = { id: id.TRG, name: "TRG" };
        obj.id.UDT = { id: id.UDT, name: "UDT" };
        obj.id.AND = { id: id.AND, name: "AND" };
        obj.id.NOT = { id: id.NOT, name: "NOT" };
        obj.id.BKR = { id: id.BKR, name: "BKR" };
        obj.id.BKA = { id: id.BKA, name: "BKA" };
        obj.id.BKN = { id: id.BKN, name: "BKN" };
        obj.id.ABG = { id: id.ABG, name: "ABG" };
        obj.id.AEN = { id: id.AEN, name: "AEN" };
        obj.id.ACTIVE = { id: id.ACTIVE, name: "ACTIVE" };
        obj.id.MATCH = { id: id.MATCH, name: "MATCH" };
        obj.id.EMPTY = { id: id.EMPTY, name: "EMPTY" };
        obj.id.NOMATCH = { id: id.NOMATCH, name: "NOMATCH" };
        obj.treeDepth = treeDepth;
        obj.leafNodes = leafNodes;
        let branchesIncomplete;
        if (root.down) {
          if (root.up) {
            branchesIncomplete = "none";
          } else {
            branchesIncomplete = "right";
          }
        } else if (root.up) {
          branchesIncomplete = "left";
        } else {
          branchesIncomplete = "both";
        }
        obj.branchesIncomplete = branchesIncomplete;
        obj.tree = display(root, root.depth, false);
        return obj;
      };
      this.toTree = function(stringify) {
        const obj = toTreeObj();
        if (stringify) {
          return JSON.stringify(obj);
        }
        return obj;
      };
      this.toHtmlPage = function(mode, caption, title) {
        return utils.htmlToPage(this.toHtml(mode, caption), title);
      };
      const htmlHeader = function(mode, caption) {
        let modeName;
        switch (mode) {
          case MODE_HEX:
            modeName = "hexadecimal";
            break;
          case MODE_DEC:
            modeName = "decimal";
            break;
          case MODE_ASCII:
            modeName = "ASCII";
            break;
          case MODE_UNICODE:
            modeName = "UNICODE";
            break;
          default:
            throw new Error(`${thisFileName}htmlHeader: unrecognized mode: ${mode}`);
        }
        let header = "";
        header += `<p>display mode: ${modeName}</p>
`;
        header += `<table class="${style.CLASS_TRACE}">
`;
        if (typeof caption === "string") {
          header += `<caption>${caption}</caption>`;
        }
        return header;
      };
      const htmlFooter = function() {
        let footer = "";
        footer += "</table>\n";
        footer += `<p class="${style.CLASS_MONOSPACE}">legend:<br>
`;
        footer += "(a)&nbsp;-&nbsp;line number<br>\n";
        footer += "(b)&nbsp;-&nbsp;matching line number<br>\n";
        footer += "(c)&nbsp;-&nbsp;phrase offset<br>\n";
        footer += "(d)&nbsp;-&nbsp;phrase length<br>\n";
        footer += "(e)&nbsp;-&nbsp;tree depth<br>\n";
        footer += "(f)&nbsp;-&nbsp;operator state<br>\n";
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style.CLASS_ACTIVE}">&darr;</span>&nbsp;&nbsp;phrase opened<br>
`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style.CLASS_MATCH}">&uarr;M</span> phrase matched<br>
`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style.CLASS_EMPTY}">&uarr;E</span> empty phrase matched<br>
`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style.CLASS_NOMATCH}">&uarr;N</span> phrase not matched<br>
`;
        footer += "operator&nbsp;-&nbsp;ALT, CAT, REP, RNM, TRG, TLS, TBS<sup>&dagger;</sup>, UDT, AND, NOT, BKA, BKN, BKR, ABG, AEN<sup>&Dagger;</sup><br>\n";
        footer += `phrase&nbsp;&nbsp;&nbsp;-&nbsp;up to ${MAX_PHRASE} characters of the phrase being matched<br>
`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style.CLASS_MATCH}">matched characters</span><br>
`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style.CLASS_LOOKAHEAD}">matched characters in look ahead mode</span><br>
`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style.CLASS_LOOKBEHIND}">matched characters in look behind mode</span><br>
`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style.CLASS_REMAINDER}">remainder characters(not yet examined by parser)</span><br>
`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style.CLASS_CTRLCHAR}">control characters, TAB, LF, CR, etc. (ASCII mode only)</span><br>
`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_EMPTY} empty string<br>
`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_END} end of input string<br>
`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_CONTINUE} input string display truncated<br>
`;
        footer += "</p>\n";
        footer += `<p class="${style.CLASS_MONOSPACE}">
`;
        footer += "<sup>&dagger;</sup>original ABNF operators:<br>\n";
        footer += "ALT - alternation<br>\n";
        footer += "CAT - concatenation<br>\n";
        footer += "REP - repetition<br>\n";
        footer += "RNM - rule name<br>\n";
        footer += "TRG - terminal range<br>\n";
        footer += "TLS - terminal literal string (case insensitive)<br>\n";
        footer += "TBS - terminal binary string (case sensitive)<br>\n";
        footer += "<br>\n";
        footer += "<sup>&Dagger;</sup>super set SABNF operators:<br>\n";
        footer += "UDT - user-defined terminal<br>\n";
        footer += "AND - positive look ahead<br>\n";
        footer += "NOT - negative look ahead<br>\n";
        footer += "BKA - positive look behind<br>\n";
        footer += "BKN - negative look behind<br>\n";
        footer += "BKR - back reference<br>\n";
        footer += "ABG - anchor - begin of input string<br>\n";
        footer += "AEN - anchor - end of input string<br>\n";
        footer += "</p>\n";
        return footer;
      };
      this.indent = function(depth) {
        let html = "";
        for (let i = 0; i < depth; i += 1) {
          html += ".";
        }
        return html;
      };
      const displayTrg = function(mode, op) {
        let html = "";
        if (op.type === id.TRG) {
          if (mode === MODE_HEX || mode === MODE_UNICODE) {
            let hex = op.min.toString(16).toUpperCase();
            if (hex.length % 2 !== 0) {
              hex = `0${hex}`;
            }
            html += mode === MODE_HEX ? "%x" : "U+";
            html += hex;
            hex = op.max.toString(16).toUpperCase();
            if (hex.length % 2 !== 0) {
              hex = `0${hex}`;
            }
            html += `&ndash;${hex}`;
          } else {
            html = `%d${op.min.toString(10)}&ndash;${op.max.toString(10)}`;
          }
        }
        return html;
      };
      const displayRep = function(mode, op) {
        let html = "";
        if (op.type === id.REP) {
          if (mode === MODE_HEX) {
            let hex = op.min.toString(16).toUpperCase();
            if (hex.length % 2 !== 0) {
              hex = `0${hex}`;
            }
            html = `x${hex}`;
            if (op.max < Infinity) {
              hex = op.max.toString(16).toUpperCase();
              if (hex.length % 2 !== 0) {
                hex = `0${hex}`;
              }
            } else {
              hex = "inf";
            }
            html += `&ndash;${hex}`;
          } else if (op.max < Infinity) {
            html = `${op.min.toString(10)}&ndash;${op.max.toString(10)}`;
          } else {
            html = `${op.min.toString(10)}&ndash;inf`;
          }
        }
        return html;
      };
      const displayTbs = function(mode, op) {
        let html = "";
        if (op.type === id.TBS) {
          const len = Math.min(op.string.length, MAX_TLS * 2);
          if (mode === MODE_HEX || mode === MODE_UNICODE) {
            html += mode === MODE_HEX ? "%x" : "U+";
            for (let i = 0; i < len; i += 1) {
              let hex;
              if (i > 0) {
                html += ".";
              }
              hex = op.string[i].toString(16).toUpperCase();
              if (hex.length % 2 !== 0) {
                hex = `0${hex}`;
              }
              html += hex;
            }
          } else {
            html = "%d";
            for (let i = 0; i < len; i += 1) {
              if (i > 0) {
                html += ".";
              }
              html += op.string[i].toString(10);
            }
          }
          if (len < op.string.length) {
            html += PHRASE_CONTINUE;
          }
        }
        return html;
      };
      const displayTls = function(mode, op) {
        let html = "";
        if (op.type === id.TLS) {
          const len = Math.min(op.string.length, MAX_TLS);
          if (mode === MODE_HEX || mode === MODE_DEC) {
            let charu;
            let charl;
            let base;
            if (mode === MODE_HEX) {
              html = "%x";
              base = 16;
            } else {
              html = "%d";
              base = 10;
            }
            for (let i = 0; i < len; i += 1) {
              if (i > 0) {
                html += ".";
              }
              charl = op.string[i];
              if (charl >= 97 && charl <= 122) {
                charu = charl - 32;
                html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();
              } else if (charl >= 65 && charl <= 90) {
                charu = charl;
                charl += 32;
                html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();
              } else {
                html += charl.toString(base).toUpperCase();
              }
            }
            if (len < op.string.length) {
              html += PHRASE_CONTINUE;
            }
          } else {
            html = '"';
            for (let i = 0; i < len; i += 1) {
              html += utils.asciiChars[op.string[i]];
            }
            if (len < op.string.length) {
              html += PHRASE_CONTINUE;
            }
            html += '"';
          }
        }
        return html;
      };
      const subPhrase = function(mode, charsArg, index, length, prev) {
        if (length === 0) {
          return "";
        }
        let phrase = "";
        const comma = prev ? "," : "";
        switch (mode) {
          case MODE_HEX:
            phrase = comma + utils.charsToHex(charsArg, index, length);
            break;
          case MODE_DEC:
            if (prev) {
              return `,${utils.charsToDec(charsArg, index, length)}`;
            }
            phrase = comma + utils.charsToDec(charsArg, index, length);
            break;
          case MODE_UNICODE:
            phrase = utils.charsToUnicode(charsArg, index, length);
            break;
          case MODE_ASCII:
          default:
            phrase = utils.charsToAsciiHtml(charsArg, index, length);
            break;
        }
        return phrase;
      };
      const displayBehind = function(mode, charsArg, state, index, length, anchor) {
        let html = "";
        let beg1;
        let len1;
        let beg2;
        let len2;
        let lastchar = PHRASE_END;
        const spanBehind = `<span class="${style.CLASS_LOOKBEHIND}">`;
        const spanRemainder = `<span class="${style.CLASS_REMAINDER}">`;
        const spanend = "</span>";
        let prev = false;
        switch (state) {
          case id.EMPTY:
            html += PHRASE_EMPTY;
          case id.NOMATCH:
          case id.MATCH:
          case id.ACTIVE:
            beg1 = index - length;
            len1 = anchor - beg1;
            beg2 = anchor;
            len2 = charsArg.length - beg2;
            break;
          default:
            throw new Error("unrecognized state");
        }
        lastchar = PHRASE_END;
        if (len1 > MAX_PHRASE) {
          len1 = MAX_PHRASE;
          lastchar = PHRASE_CONTINUE;
          len2 = 0;
        } else if (len1 + len2 > MAX_PHRASE) {
          lastchar = PHRASE_CONTINUE;
          len2 = MAX_PHRASE - len1;
        }
        if (len1 > 0) {
          html += spanBehind;
          html += subPhrase(mode, charsArg, beg1, len1, prev);
          html += spanend;
          prev = true;
        }
        if (len2 > 0) {
          html += spanRemainder;
          html += subPhrase(mode, charsArg, beg2, len2, prev);
          html += spanend;
        }
        return html + lastchar;
      };
      const displayForward = function(mode, charsArg, state, index, length, spanAhead) {
        let html = "";
        let beg1;
        let len1;
        let beg2;
        let len2;
        let lastchar = PHRASE_END;
        const spanRemainder = `<span class="${style.CLASS_REMAINDER}">`;
        const spanend = "</span>";
        let prev = false;
        switch (state) {
          case id.EMPTY:
            html += PHRASE_EMPTY;
          case id.NOMATCH:
          case id.ACTIVE:
            beg1 = index;
            len1 = 0;
            beg2 = index;
            len2 = charsArg.length - beg2;
            break;
          case id.MATCH:
            beg1 = index;
            len1 = length;
            beg2 = index + len1;
            len2 = charsArg.length - beg2;
            break;
          default:
            throw new Error("unrecognized state");
        }
        lastchar = PHRASE_END;
        if (len1 > MAX_PHRASE) {
          len1 = MAX_PHRASE;
          lastchar = PHRASE_CONTINUE;
          len2 = 0;
        } else if (len1 + len2 > MAX_PHRASE) {
          lastchar = PHRASE_CONTINUE;
          len2 = MAX_PHRASE - len1;
        }
        if (len1 > 0) {
          html += spanAhead;
          html += subPhrase(mode, charsArg, beg1, len1, prev);
          html += spanend;
          prev = true;
        }
        if (len2 > 0) {
          html += spanRemainder;
          html += subPhrase(mode, charsArg, beg2, len2, prev);
          html += spanend;
        }
        return html + lastchar;
      };
      const displayAhead = function(mode, charsArg, state, index, length) {
        const spanAhead = `<span class="${style.CLASS_LOOKAHEAD}">`;
        return displayForward(mode, charsArg, state, index, length, spanAhead);
      };
      const displayNone = function(mode, charsArg, state, index, length) {
        const spanAhead = `<span class="${style.CLASS_MATCH}">`;
        return displayForward(mode, charsArg, state, index, length, spanAhead);
      };
      const htmlTable = function(mode) {
        if (rules === null) {
          return "";
        }
        let html = "";
        let thisLine;
        let thatLine;
        let lookAhead;
        let lookBehind;
        let lookAround;
        let anchor;
        html += "<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>";
        html += "<th>operator</th><th>phrase</th></tr>\n";
        circular.forEach((lineIndex) => {
          const line = records[lineIndex];
          thisLine = line.thisLine;
          thatLine = line.thatLine !== void 0 ? line.thatLine : "--";
          lookAhead = false;
          lookBehind = false;
          lookAround = false;
          if (line.lookAround === id.LOOKAROUND_AHEAD) {
            lookAhead = true;
            lookAround = true;
            anchor = line.lookAnchor;
          }
          if (line.opcode.type === id.AND || line.opcode.type === id.NOT) {
            lookAhead = true;
            lookAround = true;
            anchor = line.phraseIndex;
          }
          if (line.lookAround === id.LOOKAROUND_BEHIND) {
            lookBehind = true;
            lookAround = true;
            anchor = line.lookAnchor;
          }
          if (line.opcode.type === id.BKA || line.opcode.type === id.BKN) {
            lookBehind = true;
            lookAround = true;
            anchor = line.phraseIndex;
          }
          html += "<tr>";
          html += `<td>${thisLine}</td><td>${thatLine}</td>`;
          html += `<td>${line.phraseIndex}</td>`;
          html += `<td>${line.phraseLength}</td>`;
          html += `<td>${line.depth}</td>`;
          html += "<td>";
          switch (line.state) {
            case id.ACTIVE:
              html += `<span class="${style.CLASS_ACTIVE}">&darr;&nbsp;</span>`;
              break;
            case id.MATCH:
              html += `<span class="${style.CLASS_MATCH}">&uarr;M</span>`;
              break;
            case id.NOMATCH:
              html += `<span class="${style.CLASS_NOMATCH}">&uarr;N</span>`;
              break;
            case id.EMPTY:
              html += `<span class="${style.CLASS_EMPTY}">&uarr;E</span>`;
              break;
            default:
              html += `<span class="${style.CLASS_ACTIVE}">--</span>`;
              break;
          }
          html += "</td>";
          html += "<td>";
          html += that.indent(line.depth);
          if (lookAhead) {
            html += `<span class="${style.CLASS_LOOKAHEAD}">`;
          } else if (lookBehind) {
            html += `<span class="${style.CLASS_LOOKBEHIND}">`;
          }
          html += utils.opcodeToString(line.opcode.type);
          if (line.opcode.type === id.RNM) {
            html += `(${rules[line.opcode.index].name}) `;
          }
          if (line.opcode.type === id.BKR) {
            const casetype = line.opcode.bkrCase === id.BKR_MODE_CI ? "%i" : "%s";
            const modetype = line.opcode.bkrMode === id.BKR_MODE_UM ? "%u" : "%p";
            html += `(\\${casetype}${modetype}${rules[line.opcode.index].name}) `;
          }
          if (line.opcode.type === id.UDT) {
            html += `(${udts[line.opcode.index].name}) `;
          }
          if (line.opcode.type === id.TRG) {
            html += `(${displayTrg(mode, line.opcode)}) `;
          }
          if (line.opcode.type === id.TBS) {
            html += `(${displayTbs(mode, line.opcode)}) `;
          }
          if (line.opcode.type === id.TLS) {
            html += `(${displayTls(mode, line.opcode)}) `;
          }
          if (line.opcode.type === id.REP) {
            html += `(${displayRep(mode, line.opcode)}) `;
          }
          if (lookAround) {
            html += "</span>";
          }
          html += "</td>";
          html += "<td>";
          if (lookBehind) {
            html += displayBehind(mode, chars, line.state, line.phraseIndex, line.phraseLength, anchor);
          } else if (lookAhead) {
            html += displayAhead(mode, chars, line.state, line.phraseIndex, line.phraseLength);
          } else {
            html += displayNone(mode, chars, line.state, line.phraseIndex, line.phraseLength);
          }
          html += "</td></tr>\n";
        });
        html += "<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>";
        html += "<th>operator</th><th>phrase</th></tr>\n";
        html += "</table>\n";
        return html;
      };
      this.toHtml = function(modearg, caption) {
        let mode = MODE_ASCII;
        if (typeof modearg === "string" && modearg.length >= 3) {
          const modein = modearg.toLowerCase().slice(0, 3);
          if (modein === "hex") {
            mode = MODE_HEX;
          } else if (modein === "dec") {
            mode = MODE_DEC;
          } else if (modein === "uni") {
            mode = MODE_UNICODE;
          }
        }
        let html = "";
        html += htmlHeader(mode, caption);
        html += htmlTable(mode);
        html += htmlFooter();
        return html;
      };
    };
  }
});

// node_modules/apg-js/src/apg-lib/node-exports.js
var require_node_exports = __commonJS({
  "node_modules/apg-js/src/apg-lib/node-exports.js"(exports, module) {
    module.exports = {
      ast: require_ast(),
      circular: require_circular_buffer(),
      ids: require_identifiers(),
      parser: require_parser(),
      stats: require_stats(),
      trace: require_trace(),
      utils: require_utilities(),
      emitcss: require_emitcss(),
      style: require_style()
    };
  }
});

// node_modules/apg-js/src/apg-api/scanner-grammar.js
var require_scanner_grammar = __commonJS({
  "node_modules/apg-js/src/apg-api/scanner-grammar.js"(exports, module) {
    module.exports = function grammar() {
      this.grammarObject = "grammarObject";
      this.rules = [];
      this.rules[0] = { name: "file", lower: "file", index: 0, isBkr: false };
      this.rules[1] = { name: "line", lower: "line", index: 1, isBkr: false };
      this.rules[2] = { name: "line-text", lower: "line-text", index: 2, isBkr: false };
      this.rules[3] = { name: "last-line", lower: "last-line", index: 3, isBkr: false };
      this.rules[4] = { name: "valid", lower: "valid", index: 4, isBkr: false };
      this.rules[5] = { name: "invalid", lower: "invalid", index: 5, isBkr: false };
      this.rules[6] = { name: "end", lower: "end", index: 6, isBkr: false };
      this.rules[7] = { name: "CRLF", lower: "crlf", index: 7, isBkr: false };
      this.rules[8] = { name: "LF", lower: "lf", index: 8, isBkr: false };
      this.rules[9] = { name: "CR", lower: "cr", index: 9, isBkr: false };
      this.udts = [];
      this.rules[0].opcodes = [];
      this.rules[0].opcodes[0] = { type: 2, children: [1, 3] };
      this.rules[0].opcodes[1] = { type: 3, min: 0, max: Infinity };
      this.rules[0].opcodes[2] = { type: 4, index: 1 };
      this.rules[0].opcodes[3] = { type: 3, min: 0, max: 1 };
      this.rules[0].opcodes[4] = { type: 4, index: 3 };
      this.rules[1].opcodes = [];
      this.rules[1].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[1].opcodes[1] = { type: 4, index: 2 };
      this.rules[1].opcodes[2] = { type: 4, index: 6 };
      this.rules[2].opcodes = [];
      this.rules[2].opcodes[0] = { type: 3, min: 0, max: Infinity };
      this.rules[2].opcodes[1] = { type: 1, children: [2, 3] };
      this.rules[2].opcodes[2] = { type: 4, index: 4 };
      this.rules[2].opcodes[3] = { type: 4, index: 5 };
      this.rules[3].opcodes = [];
      this.rules[3].opcodes[0] = { type: 3, min: 1, max: Infinity };
      this.rules[3].opcodes[1] = { type: 1, children: [2, 3] };
      this.rules[3].opcodes[2] = { type: 4, index: 4 };
      this.rules[3].opcodes[3] = { type: 4, index: 5 };
      this.rules[4].opcodes = [];
      this.rules[4].opcodes[0] = { type: 1, children: [1, 2] };
      this.rules[4].opcodes[1] = { type: 5, min: 32, max: 126 };
      this.rules[4].opcodes[2] = { type: 6, string: [9] };
      this.rules[5].opcodes = [];
      this.rules[5].opcodes[0] = { type: 1, children: [1, 2, 3, 4] };
      this.rules[5].opcodes[1] = { type: 5, min: 0, max: 8 };
      this.rules[5].opcodes[2] = { type: 5, min: 11, max: 12 };
      this.rules[5].opcodes[3] = { type: 5, min: 14, max: 31 };
      this.rules[5].opcodes[4] = { type: 5, min: 127, max: 4294967295 };
      this.rules[6].opcodes = [];
      this.rules[6].opcodes[0] = { type: 1, children: [1, 2, 3] };
      this.rules[6].opcodes[1] = { type: 4, index: 7 };
      this.rules[6].opcodes[2] = { type: 4, index: 8 };
      this.rules[6].opcodes[3] = { type: 4, index: 9 };
      this.rules[7].opcodes = [];
      this.rules[7].opcodes[0] = { type: 6, string: [13, 10] };
      this.rules[8].opcodes = [];
      this.rules[8].opcodes[0] = { type: 6, string: [10] };
      this.rules[9].opcodes = [];
      this.rules[9].opcodes[0] = { type: 6, string: [13] };
      this.toString = function toString() {
        let str = "";
        str += "file = *line [last-line]\n";
        str += "line = line-text end\n";
        str += "line-text = *(valid/invalid)\n";
        str += "last-line = 1*(valid/invalid)\n";
        str += "valid = %d32-126 / %d9\n";
        str += "invalid = %d0-8 / %d11-12 /%d14-31 / %x7f-ffffffff\n";
        str += "end = CRLF / LF / CR\n";
        str += "CRLF = %d13.10\n";
        str += "LF = %d10\n";
        str += "CR = %d13\n";
        return str;
      };
    };
  }
});

// node_modules/apg-js/src/apg-api/scanner-callbacks.js
var require_scanner_callbacks = __commonJS({
  "node_modules/apg-js/src/apg-api/scanner-callbacks.js"(exports) {
    var ids = require_identifiers();
    var utils = require_utilities();
    function semLine(state, chars, phraseIndex, phraseCount, data) {
      if (state === ids.SEM_PRE) {
        data.endLength = 0;
        data.textLength = 0;
        data.invalidCount = 0;
      } else {
        data.lines.push({
          lineNo: data.lines.length,
          beginChar: phraseIndex,
          length: phraseCount,
          textLength: data.textLength,
          endType: data.endType,
          invalidChars: data.invalidCount
        });
      }
      return ids.SEM_OK;
    }
    function semLineText(state, chars, phraseIndex, phraseCount, data) {
      if (state === ids.SEM_PRE) {
        data.textLength = phraseCount;
      }
      return ids.SEM_OK;
    }
    function semLastLine(state, chars, phraseIndex, phraseCount, data) {
      if (state === ids.SEM_PRE) {
        data.endLength = 0;
        data.textLength = 0;
        data.invalidCount = 0;
      } else if (data.strict) {
        data.lines.push({
          lineNo: data.lines.length,
          beginChar: phraseIndex,
          length: phraseCount,
          textLength: phraseCount,
          endType: "none",
          invalidChars: data.invalidCount
        });
        data.errors.push({
          line: data.lineNo,
          char: phraseIndex + phraseCount,
          msg: "no line end on last line - strict ABNF specifies CRLF(\\r\\n, \\x0D\\x0A)"
        });
      } else {
        chars.push(10);
        data.lines.push({
          lineNo: data.lines.length,
          beginChar: phraseIndex,
          length: phraseCount + 1,
          textLength: phraseCount,
          endType: "LF",
          invalidChars: data.invalidCount
        });
      }
      return ids.SEM_OK;
    }
    function semInvalid(state, chars, phraseIndex, phraseCount, data) {
      if (state === ids.SEM_PRE) {
        data.errors.push({
          line: data.lineNo,
          char: phraseIndex,
          msg: `invalid character found '\\x${utils.charToHex(chars[phraseIndex])}'`
        });
      }
      return ids.SEM_OK;
    }
    function semEnd(state, chars, phraseIndex, phraseCount, data) {
      if (state === ids.SEM_POST) {
        data.lineNo += 1;
      }
      return ids.SEM_OK;
    }
    function semLF(state, chars, phraseIndex, phraseCount, data) {
      if (state === ids.SEM_PRE) {
        data.endType = "LF";
        if (data.strict) {
          data.errors.push({
            line: data.lineNo,
            char: phraseIndex,
            msg: "line end character LF(\\n, \\x0A) - strict ABNF specifies CRLF(\\r\\n, \\x0D\\x0A)"
          });
        }
      }
      return ids.SEM_OK;
    }
    function semCR(state, chars, phraseIndex, phraseCount, data) {
      if (state === ids.SEM_PRE) {
        data.endType = "CR";
        if (data.strict) {
          data.errors.push({
            line: data.lineNo,
            char: phraseIndex,
            msg: "line end character CR(\\r, \\x0D) - strict ABNF specifies CRLF(\\r\\n, \\x0D\\x0A)"
          });
        }
      }
      return ids.SEM_OK;
    }
    function semCRLF(state, chars, phraseIndex, phraseCount, data) {
      if (state === ids.SEM_PRE) {
        data.endType = "CRLF";
      }
      return ids.SEM_OK;
    }
    var callbacks = [];
    callbacks.line = semLine;
    callbacks["line-text"] = semLineText;
    callbacks["last-line"] = semLastLine;
    callbacks.invalid = semInvalid;
    callbacks.end = semEnd;
    callbacks.lf = semLF;
    callbacks.cr = semCR;
    callbacks.crlf = semCRLF;
    exports.callbacks = callbacks;
  }
});

// node_modules/apg-js/src/apg-api/scanner.js
var require_scanner = __commonJS({
  "node_modules/apg-js/src/apg-api/scanner.js"(exports, module) {
    module.exports = function exfn(chars, errors, strict, trace) {
      const thisFileName = "scanner.js: ";
      const apglib = require_node_exports();
      const grammar = new (require_scanner_grammar())();
      const { callbacks } = require_scanner_callbacks();
      const lines = [];
      const parser = new apglib.parser();
      parser.ast = new apglib.ast();
      parser.ast.callbacks = callbacks;
      if (trace) {
        if (trace.traceObject !== "traceObject") {
          throw new TypeError(`${thisFileName}trace argument is not a trace object`);
        }
        parser.trace = trace;
      }
      const test = parser.parse(grammar, "file", chars);
      if (test.success !== true) {
        errors.push({
          line: 0,
          char: 0,
          msg: "syntax analysis error analyzing input SABNF grammar"
        });
        return;
      }
      const data = {
        lines,
        lineNo: 0,
        errors,
        strict: !!strict
      };
      parser.ast.translate(data);
      return lines;
    };
  }
});

// node_modules/apg-js/src/apg-api/syntax-callbacks.js
var require_syntax_callbacks = __commonJS({
  "node_modules/apg-js/src/apg-api/syntax-callbacks.js"(exports, module) {
    module.exports = function exfn() {
      const thisFileName = "syntax-callbacks.js: ";
      const apglib = require_node_exports();
      const id = apglib.ids;
      let topAlt;
      const synFile = function synFile2(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            data.altStack = [];
            data.repCount = 0;
            break;
          case id.EMPTY:
            data.errors.push({
              line: 0,
              char: 0,
              msg: "grammar file is empty"
            });
            break;
          case id.MATCH:
            if (data.ruleCount === 0) {
              data.errors.push({
                line: 0,
                char: 0,
                msg: "no rules defined"
              });
            }
            break;
          case id.NOMATCH:
            throw new Error(`${thisFileName}synFile: grammar file NOMATCH: design error: should never happen.`);
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synRule = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            data.altStack.length = 0;
            topAlt = {
              groupOpen: null,
              groupError: false,
              optionOpen: null,
              optionError: false,
              tlsOpen: null,
              clsOpen: null,
              prosValOpen: null,
              basicError: false
            };
            data.altStack.push(topAlt);
            break;
          case id.EMPTY:
            throw new Error(`${thisFileName}synRule: EMPTY: rule cannot be empty`);
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.ruleCount += 1;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synRuleError = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: "Unrecognized SABNF line. Invalid rule, comment or blank line."
            });
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synRuleNameError = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: "Rule names must be alphanum and begin with alphabetic character."
            });
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synDefinedAsError = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: "Expected '=' or '=/'. Not found."
            });
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synAndOp = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: "AND operator(&) found - strict ABNF specified."
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synNotOp = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: "NOT operator(!) found - strict ABNF specified."
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synBkaOp = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: "Positive look-behind operator(&&) found - strict ABNF specified."
              });
            } else if (data.lite) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: "Positive look-behind operator(&&) found - apg-lite specified."
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synBknOp = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: "Negative look-behind operator(!!) found - strict ABNF specified."
              });
            } else if (data.lite) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: "Negative look-behind operator(!!) found - apg-lite specified."
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synAbgOp = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: "Beginning of string anchor(%^) found - strict ABNF specified."
              });
            } else if (data.lite) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: "Beginning of string anchor(%^) found - apg-lite specified."
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synAenOp = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: "End of string anchor(%$) found - strict ABNF specified."
              });
            } else if (data.lite) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: "End of string anchor(%$) found - apg-lite specified."
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synBkrOp = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              const name = apglib.utils.charsToString(chars, phraseIndex, result.phraseLength);
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: `Back reference operator(${name}) found - strict ABNF specified.`
              });
            } else if (data.lite) {
              const name = apglib.utils.charsToString(chars, phraseIndex, result.phraseLength);
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: `Back reference operator(${name}) found - apg-lite specified.`
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synUdtOp = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              const name = apglib.utils.charsToString(chars, phraseIndex, result.phraseLength);
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: `UDT operator found(${name}) - strict ABNF specified.`
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synTlsOpen = function(result, chars, phraseIndex) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            topAlt.tlsOpen = phraseIndex;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synTlsString = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            data.stringTabChar = false;
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.stringTabChar !== false) {
              data.errors.push({
                line: data.findLine(data.lines, data.stringTabChar),
                char: data.stringTabChar,
                msg: "Tab character (\\t, x09) not allowed in literal string (see 'quoted-string' definition, RFC 7405.)"
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synStringTab = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.stringTabChar = phraseIndex;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synTlsClose = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.tlsOpen),
              char: topAlt.tlsOpen,
              msg: 'Case-insensitive literal string("...") opened but not closed.'
            });
            topAlt.basicError = true;
            topAlt.tlsOpen = null;
            break;
          case id.MATCH:
            topAlt.tlsOpen = null;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synClsOpen = function(result, chars, phraseIndex) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            topAlt.clsOpen = phraseIndex;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synClsString = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            data.stringTabChar = false;
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.stringTabChar !== false) {
              data.errors.push({
                line: data.findLine(data.lines, data.stringTabChar),
                char: data.stringTabChar,
                msg: "Tab character (\\t, x09) not allowed in literal string."
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synClsClose = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.clsOpen),
              char: topAlt.clsOpen,
              msg: "Case-sensitive literal string('...') opened but not closed."
            });
            topAlt.clsOpen = null;
            topAlt.basicError = true;
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, topAlt.clsOpen),
                char: topAlt.clsOpen,
                msg: "Case-sensitive string operator('...') found - strict ABNF specified."
              });
            }
            topAlt.clsOpen = null;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synProsValOpen = function(result, chars, phraseIndex) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            topAlt.prosValOpen = phraseIndex;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synProsValString = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            data.stringTabChar = false;
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.stringTabChar !== false) {
              data.errors.push({
                line: data.findLine(data.lines, data.stringTabChar),
                char: data.stringTabChar,
                msg: "Tab character (\\t, x09) not allowed in prose value string."
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synProsValClose = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.prosValOpen),
              char: topAlt.prosValOpen,
              msg: "Prose value operator(<...>) opened but not closed."
            });
            topAlt.basicError = true;
            topAlt.prosValOpen = null;
            break;
          case id.MATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.prosValOpen),
              char: topAlt.prosValOpen,
              msg: "Prose value operator(<...>) found. The ABNF syntax is valid, but a parser cannot be generated from this grammar."
            });
            topAlt.prosValOpen = null;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synGroupOpen = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            topAlt = {
              groupOpen: phraseIndex,
              groupError: false,
              optionOpen: null,
              optionError: false,
              tlsOpen: null,
              clsOpen: null,
              prosValOpen: null,
              basicError: false
            };
            data.altStack.push(topAlt);
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synGroupClose = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.groupOpen),
              char: topAlt.groupOpen,
              msg: 'Group "(...)" opened but not closed.'
            });
            topAlt = data.altStack.pop();
            topAlt.groupError = true;
            break;
          case id.MATCH:
            topAlt = data.altStack.pop();
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synOptionOpen = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            topAlt = {
              groupOpen: null,
              groupError: false,
              optionOpen: phraseIndex,
              optionError: false,
              tlsOpen: null,
              clsOpen: null,
              prosValOpen: null,
              basicError: false
            };
            data.altStack.push(topAlt);
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synOptionClose = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.optionOpen),
              char: topAlt.optionOpen,
              msg: 'Option "[...]" opened but not closed.'
            });
            topAlt = data.altStack.pop();
            topAlt.optionError = true;
            break;
          case id.MATCH:
            topAlt = data.altStack.pop();
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synBasicElementError = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (topAlt.basicError === false) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: "Unrecognized SABNF element."
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synLineEnd = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (result.phraseLength === 1 && data.strict) {
              const end = chars[phraseIndex] === 13 ? "CR" : "LF";
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: `Line end '${end}' found - strict ABNF specified, only CRLF allowed.`
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synLineEndError = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: "Unrecognized grammar element or characters."
            });
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synRepetition = function(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.repCount += 1;
            break;
          case id.MATCH:
            data.repCount += 1;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      this.callbacks = [];
      this.callbacks.andop = synAndOp;
      this.callbacks.basicelementerr = synBasicElementError;
      this.callbacks.clsclose = synClsClose;
      this.callbacks.clsopen = synClsOpen;
      this.callbacks.clsstring = synClsString;
      this.callbacks.definedaserror = synDefinedAsError;
      this.callbacks.file = synFile;
      this.callbacks.groupclose = synGroupClose;
      this.callbacks.groupopen = synGroupOpen;
      this.callbacks.lineenderror = synLineEndError;
      this.callbacks.lineend = synLineEnd;
      this.callbacks.notop = synNotOp;
      this.callbacks.optionclose = synOptionClose;
      this.callbacks.optionopen = synOptionOpen;
      this.callbacks.prosvalclose = synProsValClose;
      this.callbacks.prosvalopen = synProsValOpen;
      this.callbacks.prosvalstring = synProsValString;
      this.callbacks.repetition = synRepetition;
      this.callbacks.rule = synRule;
      this.callbacks.ruleerror = synRuleError;
      this.callbacks.rulenameerror = synRuleNameError;
      this.callbacks.stringtab = synStringTab;
      this.callbacks.tlsclose = synTlsClose;
      this.callbacks.tlsopen = synTlsOpen;
      this.callbacks.tlsstring = synTlsString;
      this.callbacks.udtop = synUdtOp;
      this.callbacks.bkaop = synBkaOp;
      this.callbacks.bknop = synBknOp;
      this.callbacks.bkrop = synBkrOp;
      this.callbacks.abgop = synAbgOp;
      this.callbacks.aenop = synAenOp;
    };
  }
});

// node_modules/apg-js/src/apg-api/semantic-callbacks.js
var require_semantic_callbacks = __commonJS({
  "node_modules/apg-js/src/apg-api/semantic-callbacks.js"(exports, module) {
    module.exports = function exfn() {
      const apglib = require_node_exports();
      const id = apglib.ids;
      const NameList = function NameList2() {
        this.names = [];
        this.add = function add(name) {
          let ret = -1;
          const find = this.get(name);
          if (find === -1) {
            ret = {
              name,
              lower: name.toLowerCase(),
              index: this.names.length
            };
            this.names.push(ret);
          }
          return ret;
        };
        this.get = function get2(name) {
          let ret = -1;
          const lower = name.toLowerCase();
          for (let i = 0; i < this.names.length; i += 1) {
            if (this.names[i].lower === lower) {
              ret = this.names[i];
              break;
            }
          }
          return ret;
        };
      };
      const decnum = function decnum2(chars, beg, len) {
        let num = 0;
        for (let i = beg; i < beg + len; i += 1) {
          num = 10 * num + chars[i] - 48;
        }
        return num;
      };
      const binnum = function binnum2(chars, beg, len) {
        let num = 0;
        for (let i = beg; i < beg + len; i += 1) {
          num = 2 * num + chars[i] - 48;
        }
        return num;
      };
      const hexnum = function hexnum2(chars, beg, len) {
        let num = 0;
        for (let i = beg; i < beg + len; i += 1) {
          let digit = chars[i];
          if (digit >= 48 && digit <= 57) {
            digit -= 48;
          } else if (digit >= 65 && digit <= 70) {
            digit -= 55;
          } else if (digit >= 97 && digit <= 102) {
            digit -= 87;
          } else {
            throw new Error("hexnum out of range");
          }
          num = 16 * num + digit;
        }
        return num;
      };
      function semFile(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.ruleNames = new NameList();
          data.udtNames = new NameList();
          data.rules = [];
          data.udts = [];
          data.rulesLineMap = [];
          data.opcodes = [];
          data.altStack = [];
          data.topStack = null;
          data.topRule = null;
        } else if (state === id.SEM_POST) {
          let nameObj;
          data.rules.forEach((rule) => {
            rule.isBkr = false;
            rule.opcodes.forEach((op) => {
              if (op.type === id.RNM) {
                nameObj = data.ruleNames.get(op.index.name);
                if (nameObj === -1) {
                  data.errors.push({
                    line: data.findLine(data.lines, op.index.phraseIndex, data.charsLength),
                    char: op.index.phraseIndex,
                    msg: `Rule name '${op.index.name}' used but not defined.`
                  });
                  op.index = -1;
                } else {
                  op.index = nameObj.index;
                }
              }
            });
          });
          data.udts.forEach((udt) => {
            udt.isBkr = false;
          });
          data.rules.forEach((rule) => {
            rule.opcodes.forEach((op) => {
              if (op.type === id.BKR) {
                rule.hasBkr = true;
                nameObj = data.ruleNames.get(op.index.name);
                if (nameObj !== -1) {
                  data.rules[nameObj.index].isBkr = true;
                  op.index = nameObj.index;
                } else {
                  nameObj = data.udtNames.get(op.index.name);
                  if (nameObj !== -1) {
                    data.udts[nameObj.index].isBkr = true;
                    op.index = data.rules.length + nameObj.index;
                  } else {
                    data.errors.push({
                      line: data.findLine(data.lines, op.index.phraseIndex, data.charsLength),
                      char: op.index.phraseIndex,
                      msg: `Back reference name '${op.index.name}' refers to undefined rule or unamed UDT.`
                    });
                    op.index = -1;
                  }
                }
              }
            });
          });
        }
        return ret;
      }
      function semRule(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.altStack.length = 0;
          data.topStack = null;
          data.rulesLineMap.push({
            line: data.findLine(data.lines, phraseIndex, data.charsLength),
            char: phraseIndex
          });
        }
        return ret;
      }
      function semRuleLookup(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.ruleName = "";
          data.definedas = "";
        } else if (state === id.SEM_POST) {
          let ruleName;
          if (data.definedas === "=") {
            ruleName = data.ruleNames.add(data.ruleName);
            if (ruleName === -1) {
              data.definedas = null;
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: `Rule name '${data.ruleName}' previously defined.`
              });
            } else {
              data.topRule = {
                name: ruleName.name,
                lower: ruleName.lower,
                opcodes: [],
                index: ruleName.index
              };
              data.rules.push(data.topRule);
              data.opcodes = data.topRule.opcodes;
            }
          } else {
            ruleName = data.ruleNames.get(data.ruleName);
            if (ruleName === -1) {
              data.definedas = null;
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: `Rule name '${data.ruleName}' for incremental alternate not previously defined.`
              });
            } else {
              data.topRule = data.rules[ruleName.index];
              data.opcodes = data.topRule.opcodes;
            }
          }
        }
        return ret;
      }
      function semAlternation(state, chars, phraseIndex, phraseCount, data) {
        let ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          const TRUE = true;
          while (TRUE) {
            if (data.definedas === null) {
              ret = id.SEM_SKIP;
              break;
            }
            if (data.topStack === null) {
              if (data.definedas === "=") {
                data.topStack = {
                  alt: {
                    type: id.ALT,
                    children: []
                  },
                  cat: null
                };
                data.altStack.push(data.topStack);
                data.opcodes.push(data.topStack.alt);
                break;
              }
              data.topStack = {
                alt: data.opcodes[0],
                cat: null
              };
              data.altStack.push(data.topStack);
              break;
            }
            data.topStack = {
              alt: {
                type: id.ALT,
                children: []
              },
              cat: null
            };
            data.altStack.push(data.topStack);
            data.opcodes.push(data.topStack.alt);
            break;
          }
        } else if (state === id.SEM_POST) {
          data.altStack.pop();
          if (data.altStack.length > 0) {
            data.topStack = data.altStack[data.altStack.length - 1];
          } else {
            data.topStack = null;
          }
        }
        return ret;
      }
      function semConcatenation(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.topStack.alt.children.push(data.opcodes.length);
          data.topStack.cat = {
            type: id.CAT,
            children: []
          };
          data.opcodes.push(data.topStack.cat);
        } else if (state === id.SEM_POST) {
          data.topStack.cat = null;
        }
        return ret;
      }
      function semRepetition(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.topStack.cat.children.push(data.opcodes.length);
        }
        return ret;
      }
      function semOptionOpen(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.REP,
            min: 0,
            max: 1,
            char: phraseIndex
          });
        }
        return ret;
      }
      function semRuleName(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.ruleName = apglib.utils.charsToString(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semDefined(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.definedas = "=";
        }
        return ret;
      }
      function semIncAlt(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.definedas = "=/";
        }
        return ret;
      }
      function semRepOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.min = 0;
          data.max = Infinity;
          data.topRep = {
            type: id.REP,
            min: 0,
            max: Infinity
          };
          data.opcodes.push(data.topRep);
        } else if (state === id.SEM_POST) {
          if (data.min > data.max) {
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: `repetition min cannot be greater than max: min: ${data.min}: max: ${data.max}`
            });
          }
          data.topRep.min = data.min;
          data.topRep.max = data.max;
        }
        return ret;
      }
      function semRepMin(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.min = decnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semRepMax(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.max = decnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semRepMinMax(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.max = decnum(chars, phraseIndex, phraseCount);
          data.min = data.max;
        }
        return ret;
      }
      function semAndOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.AND
          });
        }
        return ret;
      }
      function semNotOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.NOT
          });
        }
        return ret;
      }
      function semRnmOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.RNM,
            /* NOTE: this is temporary info, index will be replaced with integer later. */
            /* Probably not the best coding practice but here you go. */
            index: {
              phraseIndex,
              name: apglib.utils.charsToString(chars, phraseIndex, phraseCount)
            }
          });
        }
        return ret;
      }
      function semAbgOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.ABG
          });
        }
        return ret;
      }
      function semAenOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.AEN
          });
        }
        return ret;
      }
      function semBkaOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.BKA
          });
        }
        return ret;
      }
      function semBknOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.BKN
          });
        }
        return ret;
      }
      function semBkrOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.ci = true;
          data.cs = false;
          data.um = true;
          data.pm = false;
        } else if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.BKR,
            bkrCase: data.cs === true ? id.BKR_MODE_CS : id.BKR_MODE_CI,
            bkrMode: data.pm === true ? id.BKR_MODE_PM : id.BKR_MODE_UM,
            /* NOTE: this is temporary info, index will be replaced with integer later. */
            /* Probably not the best coding practice but here you go. */
            index: {
              phraseIndex: data.bkrname.phraseIndex,
              name: apglib.utils.charsToString(chars, data.bkrname.phraseIndex, data.bkrname.phraseLength)
            }
          });
        }
        return ret;
      }
      function semBkrCi(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.ci = true;
        }
        return ret;
      }
      function semBkrCs(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.cs = true;
        }
        return ret;
      }
      function semBkrUm(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.um = true;
        }
        return ret;
      }
      function semBkrPm(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.pm = true;
        }
        return ret;
      }
      function semBkrName(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.bkrname = {
            phraseIndex,
            phraseLength: phraseCount
          };
        }
        return ret;
      }
      function semUdtEmpty(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          const name = apglib.utils.charsToString(chars, phraseIndex, phraseCount);
          let udtName = data.udtNames.add(name);
          if (udtName === -1) {
            udtName = data.udtNames.get(name);
            if (udtName === -1) {
              throw new Error("semUdtEmpty: name look up error");
            }
          } else {
            data.udts.push({
              name: udtName.name,
              lower: udtName.lower,
              index: udtName.index,
              empty: true
            });
          }
          data.opcodes.push({
            type: id.UDT,
            empty: true,
            index: udtName.index
          });
        }
        return ret;
      }
      function semUdtNonEmpty(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          const name = apglib.utils.charsToString(chars, phraseIndex, phraseCount);
          let udtName = data.udtNames.add(name);
          if (udtName === -1) {
            udtName = data.udtNames.get(name);
            if (udtName === -1) {
              throw new Error("semUdtNonEmpty: name look up error");
            }
          } else {
            data.udts.push({
              name: udtName.name,
              lower: udtName.lower,
              index: udtName.index,
              empty: false
            });
          }
          data.opcodes.push({
            type: id.UDT,
            empty: false,
            index: udtName.index,
            syntax: null,
            semantic: null
          });
        }
        return ret;
      }
      function semTlsOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.tlscase = true;
        }
        return ret;
      }
      function semTlsCase(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          if (phraseCount > 0 && (chars[phraseIndex + 1] === 83 || chars[phraseIndex + 1] === 115)) {
            data.tlscase = false;
          }
        }
        return ret;
      }
      function semTlsString(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          if (data.tlscase) {
            const str = chars.slice(phraseIndex, phraseIndex + phraseCount);
            for (let i = 0; i < str.length; i += 1) {
              if (str[i] >= 65 && str[i] <= 90) {
                str[i] += 32;
              }
            }
            data.opcodes.push({
              type: id.TLS,
              string: str
            });
          } else {
            data.opcodes.push({
              type: id.TBS,
              string: chars.slice(phraseIndex, phraseIndex + phraseCount)
            });
          }
        }
        return ret;
      }
      function semClsOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          if (phraseCount <= 2) {
            data.opcodes.push({
              type: id.TLS,
              string: []
            });
          } else {
            data.opcodes.push({
              type: id.TBS,
              string: chars.slice(phraseIndex + 1, phraseIndex + phraseCount - 1)
            });
          }
        }
        return ret;
      }
      function semTbsOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.tbsstr = [];
        } else if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.TBS,
            string: data.tbsstr
          });
        }
        return ret;
      }
      function semTrgOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.min = 0;
          data.max = 0;
        } else if (state === id.SEM_POST) {
          if (data.min > data.max) {
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: `TRG, (%dmin-max), min cannot be greater than max: min: ${data.min}: max: ${data.max}`
            });
          }
          data.opcodes.push({
            type: id.TRG,
            min: data.min,
            max: data.max
          });
        }
        return ret;
      }
      function semDmin(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.min = decnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semDmax(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.max = decnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semBmin(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.min = binnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semBmax(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.max = binnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semXmin(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.min = hexnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semXmax(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.max = hexnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semDstring(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.tbsstr.push(decnum(chars, phraseIndex, phraseCount));
        }
        return ret;
      }
      function semBstring(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.tbsstr.push(binnum(chars, phraseIndex, phraseCount));
        }
        return ret;
      }
      function semXstring(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.tbsstr.push(hexnum(chars, phraseIndex, phraseCount));
        }
        return ret;
      }
      this.callbacks = [];
      this.callbacks.abgop = semAbgOp;
      this.callbacks.aenop = semAenOp;
      this.callbacks.alternation = semAlternation;
      this.callbacks.andop = semAndOp;
      this.callbacks.bmax = semBmax;
      this.callbacks.bmin = semBmin;
      this.callbacks.bkaop = semBkaOp;
      this.callbacks.bknop = semBknOp;
      this.callbacks.bkrop = semBkrOp;
      this.callbacks["bkr-name"] = semBkrName;
      this.callbacks.bstring = semBstring;
      this.callbacks.clsop = semClsOp;
      this.callbacks.ci = semBkrCi;
      this.callbacks.cs = semBkrCs;
      this.callbacks.um = semBkrUm;
      this.callbacks.pm = semBkrPm;
      this.callbacks.concatenation = semConcatenation;
      this.callbacks.defined = semDefined;
      this.callbacks.dmax = semDmax;
      this.callbacks.dmin = semDmin;
      this.callbacks.dstring = semDstring;
      this.callbacks.file = semFile;
      this.callbacks.incalt = semIncAlt;
      this.callbacks.notop = semNotOp;
      this.callbacks.optionopen = semOptionOpen;
      this.callbacks["rep-max"] = semRepMax;
      this.callbacks["rep-min"] = semRepMin;
      this.callbacks["rep-min-max"] = semRepMinMax;
      this.callbacks.repetition = semRepetition;
      this.callbacks.repop = semRepOp;
      this.callbacks.rnmop = semRnmOp;
      this.callbacks.rule = semRule;
      this.callbacks.rulelookup = semRuleLookup;
      this.callbacks.rulename = semRuleName;
      this.callbacks.tbsop = semTbsOp;
      this.callbacks.tlscase = semTlsCase;
      this.callbacks.tlsstring = semTlsString;
      this.callbacks.tlsop = semTlsOp;
      this.callbacks.trgop = semTrgOp;
      this.callbacks["udt-empty"] = semUdtEmpty;
      this.callbacks["udt-non-empty"] = semUdtNonEmpty;
      this.callbacks.xmax = semXmax;
      this.callbacks.xmin = semXmin;
      this.callbacks.xstring = semXstring;
    };
  }
});

// node_modules/apg-js/src/apg-api/sabnf-grammar.js
var require_sabnf_grammar = __commonJS({
  "node_modules/apg-js/src/apg-api/sabnf-grammar.js"(exports, module) {
    module.exports = function grammar() {
      this.grammarObject = "grammarObject";
      this.rules = [];
      this.rules[0] = { name: "File", lower: "file", index: 0, isBkr: false };
      this.rules[1] = { name: "BlankLine", lower: "blankline", index: 1, isBkr: false };
      this.rules[2] = { name: "Rule", lower: "rule", index: 2, isBkr: false };
      this.rules[3] = { name: "RuleLookup", lower: "rulelookup", index: 3, isBkr: false };
      this.rules[4] = { name: "RuleNameTest", lower: "rulenametest", index: 4, isBkr: false };
      this.rules[5] = { name: "RuleName", lower: "rulename", index: 5, isBkr: false };
      this.rules[6] = { name: "RuleNameError", lower: "rulenameerror", index: 6, isBkr: false };
      this.rules[7] = { name: "DefinedAsTest", lower: "definedastest", index: 7, isBkr: false };
      this.rules[8] = { name: "DefinedAsError", lower: "definedaserror", index: 8, isBkr: false };
      this.rules[9] = { name: "DefinedAs", lower: "definedas", index: 9, isBkr: false };
      this.rules[10] = { name: "Defined", lower: "defined", index: 10, isBkr: false };
      this.rules[11] = { name: "IncAlt", lower: "incalt", index: 11, isBkr: false };
      this.rules[12] = { name: "RuleError", lower: "ruleerror", index: 12, isBkr: false };
      this.rules[13] = { name: "LineEndError", lower: "lineenderror", index: 13, isBkr: false };
      this.rules[14] = { name: "Alternation", lower: "alternation", index: 14, isBkr: false };
      this.rules[15] = { name: "Concatenation", lower: "concatenation", index: 15, isBkr: false };
      this.rules[16] = { name: "Repetition", lower: "repetition", index: 16, isBkr: false };
      this.rules[17] = { name: "Modifier", lower: "modifier", index: 17, isBkr: false };
      this.rules[18] = { name: "Predicate", lower: "predicate", index: 18, isBkr: false };
      this.rules[19] = { name: "BasicElement", lower: "basicelement", index: 19, isBkr: false };
      this.rules[20] = { name: "BasicElementErr", lower: "basicelementerr", index: 20, isBkr: false };
      this.rules[21] = { name: "Group", lower: "group", index: 21, isBkr: false };
      this.rules[22] = { name: "GroupError", lower: "grouperror", index: 22, isBkr: false };
      this.rules[23] = { name: "GroupOpen", lower: "groupopen", index: 23, isBkr: false };
      this.rules[24] = { name: "GroupClose", lower: "groupclose", index: 24, isBkr: false };
      this.rules[25] = { name: "Option", lower: "option", index: 25, isBkr: false };
      this.rules[26] = { name: "OptionError", lower: "optionerror", index: 26, isBkr: false };
      this.rules[27] = { name: "OptionOpen", lower: "optionopen", index: 27, isBkr: false };
      this.rules[28] = { name: "OptionClose", lower: "optionclose", index: 28, isBkr: false };
      this.rules[29] = { name: "RnmOp", lower: "rnmop", index: 29, isBkr: false };
      this.rules[30] = { name: "BkrOp", lower: "bkrop", index: 30, isBkr: false };
      this.rules[31] = { name: "bkrModifier", lower: "bkrmodifier", index: 31, isBkr: false };
      this.rules[32] = { name: "cs", lower: "cs", index: 32, isBkr: false };
      this.rules[33] = { name: "ci", lower: "ci", index: 33, isBkr: false };
      this.rules[34] = { name: "um", lower: "um", index: 34, isBkr: false };
      this.rules[35] = { name: "pm", lower: "pm", index: 35, isBkr: false };
      this.rules[36] = { name: "bkr-name", lower: "bkr-name", index: 36, isBkr: false };
      this.rules[37] = { name: "rname", lower: "rname", index: 37, isBkr: false };
      this.rules[38] = { name: "uname", lower: "uname", index: 38, isBkr: false };
      this.rules[39] = { name: "ename", lower: "ename", index: 39, isBkr: false };
      this.rules[40] = { name: "UdtOp", lower: "udtop", index: 40, isBkr: false };
      this.rules[41] = { name: "udt-non-empty", lower: "udt-non-empty", index: 41, isBkr: false };
      this.rules[42] = { name: "udt-empty", lower: "udt-empty", index: 42, isBkr: false };
      this.rules[43] = { name: "RepOp", lower: "repop", index: 43, isBkr: false };
      this.rules[44] = { name: "AltOp", lower: "altop", index: 44, isBkr: false };
      this.rules[45] = { name: "CatOp", lower: "catop", index: 45, isBkr: false };
      this.rules[46] = { name: "StarOp", lower: "starop", index: 46, isBkr: false };
      this.rules[47] = { name: "AndOp", lower: "andop", index: 47, isBkr: false };
      this.rules[48] = { name: "NotOp", lower: "notop", index: 48, isBkr: false };
      this.rules[49] = { name: "BkaOp", lower: "bkaop", index: 49, isBkr: false };
      this.rules[50] = { name: "BknOp", lower: "bknop", index: 50, isBkr: false };
      this.rules[51] = { name: "AbgOp", lower: "abgop", index: 51, isBkr: false };
      this.rules[52] = { name: "AenOp", lower: "aenop", index: 52, isBkr: false };
      this.rules[53] = { name: "TrgOp", lower: "trgop", index: 53, isBkr: false };
      this.rules[54] = { name: "TbsOp", lower: "tbsop", index: 54, isBkr: false };
      this.rules[55] = { name: "TlsOp", lower: "tlsop", index: 55, isBkr: false };
      this.rules[56] = { name: "TlsCase", lower: "tlscase", index: 56, isBkr: false };
      this.rules[57] = { name: "TlsOpen", lower: "tlsopen", index: 57, isBkr: false };
      this.rules[58] = { name: "TlsClose", lower: "tlsclose", index: 58, isBkr: false };
      this.rules[59] = { name: "TlsString", lower: "tlsstring", index: 59, isBkr: false };
      this.rules[60] = { name: "StringTab", lower: "stringtab", index: 60, isBkr: false };
      this.rules[61] = { name: "ClsOp", lower: "clsop", index: 61, isBkr: false };
      this.rules[62] = { name: "ClsOpen", lower: "clsopen", index: 62, isBkr: false };
      this.rules[63] = { name: "ClsClose", lower: "clsclose", index: 63, isBkr: false };
      this.rules[64] = { name: "ClsString", lower: "clsstring", index: 64, isBkr: false };
      this.rules[65] = { name: "ProsVal", lower: "prosval", index: 65, isBkr: false };
      this.rules[66] = { name: "ProsValOpen", lower: "prosvalopen", index: 66, isBkr: false };
      this.rules[67] = { name: "ProsValString", lower: "prosvalstring", index: 67, isBkr: false };
      this.rules[68] = { name: "ProsValClose", lower: "prosvalclose", index: 68, isBkr: false };
      this.rules[69] = { name: "rep-min", lower: "rep-min", index: 69, isBkr: false };
      this.rules[70] = { name: "rep-min-max", lower: "rep-min-max", index: 70, isBkr: false };
      this.rules[71] = { name: "rep-max", lower: "rep-max", index: 71, isBkr: false };
      this.rules[72] = { name: "rep-num", lower: "rep-num", index: 72, isBkr: false };
      this.rules[73] = { name: "dString", lower: "dstring", index: 73, isBkr: false };
      this.rules[74] = { name: "xString", lower: "xstring", index: 74, isBkr: false };
      this.rules[75] = { name: "bString", lower: "bstring", index: 75, isBkr: false };
      this.rules[76] = { name: "Dec", lower: "dec", index: 76, isBkr: false };
      this.rules[77] = { name: "Hex", lower: "hex", index: 77, isBkr: false };
      this.rules[78] = { name: "Bin", lower: "bin", index: 78, isBkr: false };
      this.rules[79] = { name: "dmin", lower: "dmin", index: 79, isBkr: false };
      this.rules[80] = { name: "dmax", lower: "dmax", index: 80, isBkr: false };
      this.rules[81] = { name: "bmin", lower: "bmin", index: 81, isBkr: false };
      this.rules[82] = { name: "bmax", lower: "bmax", index: 82, isBkr: false };
      this.rules[83] = { name: "xmin", lower: "xmin", index: 83, isBkr: false };
      this.rules[84] = { name: "xmax", lower: "xmax", index: 84, isBkr: false };
      this.rules[85] = { name: "dnum", lower: "dnum", index: 85, isBkr: false };
      this.rules[86] = { name: "bnum", lower: "bnum", index: 86, isBkr: false };
      this.rules[87] = { name: "xnum", lower: "xnum", index: 87, isBkr: false };
      this.rules[88] = { name: "alphanum", lower: "alphanum", index: 88, isBkr: false };
      this.rules[89] = { name: "owsp", lower: "owsp", index: 89, isBkr: false };
      this.rules[90] = { name: "wsp", lower: "wsp", index: 90, isBkr: false };
      this.rules[91] = { name: "space", lower: "space", index: 91, isBkr: false };
      this.rules[92] = { name: "comment", lower: "comment", index: 92, isBkr: false };
      this.rules[93] = { name: "LineEnd", lower: "lineend", index: 93, isBkr: false };
      this.rules[94] = { name: "LineContinue", lower: "linecontinue", index: 94, isBkr: false };
      this.udts = [];
      this.rules[0].opcodes = [];
      this.rules[0].opcodes[0] = { type: 3, min: 0, max: Infinity };
      this.rules[0].opcodes[1] = { type: 1, children: [2, 3, 4] };
      this.rules[0].opcodes[2] = { type: 4, index: 1 };
      this.rules[0].opcodes[3] = { type: 4, index: 2 };
      this.rules[0].opcodes[4] = { type: 4, index: 12 };
      this.rules[1].opcodes = [];
      this.rules[1].opcodes[0] = { type: 2, children: [1, 5, 7] };
      this.rules[1].opcodes[1] = { type: 3, min: 0, max: Infinity };
      this.rules[1].opcodes[2] = { type: 1, children: [3, 4] };
      this.rules[1].opcodes[3] = { type: 6, string: [32] };
      this.rules[1].opcodes[4] = { type: 6, string: [9] };
      this.rules[1].opcodes[5] = { type: 3, min: 0, max: 1 };
      this.rules[1].opcodes[6] = { type: 4, index: 92 };
      this.rules[1].opcodes[7] = { type: 4, index: 93 };
      this.rules[2].opcodes = [];
      this.rules[2].opcodes[0] = { type: 2, children: [1, 2, 3, 4] };
      this.rules[2].opcodes[1] = { type: 4, index: 3 };
      this.rules[2].opcodes[2] = { type: 4, index: 89 };
      this.rules[2].opcodes[3] = { type: 4, index: 14 };
      this.rules[2].opcodes[4] = { type: 1, children: [5, 8] };
      this.rules[2].opcodes[5] = { type: 2, children: [6, 7] };
      this.rules[2].opcodes[6] = { type: 4, index: 89 };
      this.rules[2].opcodes[7] = { type: 4, index: 93 };
      this.rules[2].opcodes[8] = { type: 2, children: [9, 10] };
      this.rules[2].opcodes[9] = { type: 4, index: 13 };
      this.rules[2].opcodes[10] = { type: 4, index: 93 };
      this.rules[3].opcodes = [];
      this.rules[3].opcodes[0] = { type: 2, children: [1, 2, 3] };
      this.rules[3].opcodes[1] = { type: 4, index: 4 };
      this.rules[3].opcodes[2] = { type: 4, index: 89 };
      this.rules[3].opcodes[3] = { type: 4, index: 7 };
      this.rules[4].opcodes = [];
      this.rules[4].opcodes[0] = { type: 1, children: [1, 2] };
      this.rules[4].opcodes[1] = { type: 4, index: 5 };
      this.rules[4].opcodes[2] = { type: 4, index: 6 };
      this.rules[5].opcodes = [];
      this.rules[5].opcodes[0] = { type: 4, index: 88 };
      this.rules[6].opcodes = [];
      this.rules[6].opcodes[0] = { type: 3, min: 1, max: Infinity };
      this.rules[6].opcodes[1] = { type: 1, children: [2, 3] };
      this.rules[6].opcodes[2] = { type: 5, min: 33, max: 60 };
      this.rules[6].opcodes[3] = { type: 5, min: 62, max: 126 };
      this.rules[7].opcodes = [];
      this.rules[7].opcodes[0] = { type: 1, children: [1, 2] };
      this.rules[7].opcodes[1] = { type: 4, index: 9 };
      this.rules[7].opcodes[2] = { type: 4, index: 8 };
      this.rules[8].opcodes = [];
      this.rules[8].opcodes[0] = { type: 3, min: 1, max: 2 };
      this.rules[8].opcodes[1] = { type: 5, min: 33, max: 126 };
      this.rules[9].opcodes = [];
      this.rules[9].opcodes[0] = { type: 1, children: [1, 2] };
      this.rules[9].opcodes[1] = { type: 4, index: 11 };
      this.rules[9].opcodes[2] = { type: 4, index: 10 };
      this.rules[10].opcodes = [];
      this.rules[10].opcodes[0] = { type: 6, string: [61] };
      this.rules[11].opcodes = [];
      this.rules[11].opcodes[0] = { type: 6, string: [61, 47] };
      this.rules[12].opcodes = [];
      this.rules[12].opcodes[0] = { type: 2, children: [1, 6] };
      this.rules[12].opcodes[1] = { type: 3, min: 1, max: Infinity };
      this.rules[12].opcodes[2] = { type: 1, children: [3, 4, 5] };
      this.rules[12].opcodes[3] = { type: 5, min: 32, max: 126 };
      this.rules[12].opcodes[4] = { type: 6, string: [9] };
      this.rules[12].opcodes[5] = { type: 4, index: 94 };
      this.rules[12].opcodes[6] = { type: 4, index: 93 };
      this.rules[13].opcodes = [];
      this.rules[13].opcodes[0] = { type: 3, min: 1, max: Infinity };
      this.rules[13].opcodes[1] = { type: 1, children: [2, 3, 4] };
      this.rules[13].opcodes[2] = { type: 5, min: 32, max: 126 };
      this.rules[13].opcodes[3] = { type: 6, string: [9] };
      this.rules[13].opcodes[4] = { type: 4, index: 94 };
      this.rules[14].opcodes = [];
      this.rules[14].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[14].opcodes[1] = { type: 4, index: 15 };
      this.rules[14].opcodes[2] = { type: 3, min: 0, max: Infinity };
      this.rules[14].opcodes[3] = { type: 2, children: [4, 5, 6] };
      this.rules[14].opcodes[4] = { type: 4, index: 89 };
      this.rules[14].opcodes[5] = { type: 4, index: 44 };
      this.rules[14].opcodes[6] = { type: 4, index: 15 };
      this.rules[15].opcodes = [];
      this.rules[15].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[15].opcodes[1] = { type: 4, index: 16 };
      this.rules[15].opcodes[2] = { type: 3, min: 0, max: Infinity };
      this.rules[15].opcodes[3] = { type: 2, children: [4, 5] };
      this.rules[15].opcodes[4] = { type: 4, index: 45 };
      this.rules[15].opcodes[5] = { type: 4, index: 16 };
      this.rules[16].opcodes = [];
      this.rules[16].opcodes[0] = { type: 2, children: [1, 3] };
      this.rules[16].opcodes[1] = { type: 3, min: 0, max: 1 };
      this.rules[16].opcodes[2] = { type: 4, index: 17 };
      this.rules[16].opcodes[3] = { type: 1, children: [4, 5, 6, 7] };
      this.rules[16].opcodes[4] = { type: 4, index: 21 };
      this.rules[16].opcodes[5] = { type: 4, index: 25 };
      this.rules[16].opcodes[6] = { type: 4, index: 19 };
      this.rules[16].opcodes[7] = { type: 4, index: 20 };
      this.rules[17].opcodes = [];
      this.rules[17].opcodes[0] = { type: 1, children: [1, 5] };
      this.rules[17].opcodes[1] = { type: 2, children: [2, 3] };
      this.rules[17].opcodes[2] = { type: 4, index: 18 };
      this.rules[17].opcodes[3] = { type: 3, min: 0, max: 1 };
      this.rules[17].opcodes[4] = { type: 4, index: 43 };
      this.rules[17].opcodes[5] = { type: 4, index: 43 };
      this.rules[18].opcodes = [];
      this.rules[18].opcodes[0] = { type: 1, children: [1, 2, 3, 4] };
      this.rules[18].opcodes[1] = { type: 4, index: 49 };
      this.rules[18].opcodes[2] = { type: 4, index: 50 };
      this.rules[18].opcodes[3] = { type: 4, index: 47 };
      this.rules[18].opcodes[4] = { type: 4, index: 48 };
      this.rules[19].opcodes = [];
      this.rules[19].opcodes[0] = { type: 1, children: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] };
      this.rules[19].opcodes[1] = { type: 4, index: 40 };
      this.rules[19].opcodes[2] = { type: 4, index: 29 };
      this.rules[19].opcodes[3] = { type: 4, index: 53 };
      this.rules[19].opcodes[4] = { type: 4, index: 54 };
      this.rules[19].opcodes[5] = { type: 4, index: 55 };
      this.rules[19].opcodes[6] = { type: 4, index: 61 };
      this.rules[19].opcodes[7] = { type: 4, index: 30 };
      this.rules[19].opcodes[8] = { type: 4, index: 51 };
      this.rules[19].opcodes[9] = { type: 4, index: 52 };
      this.rules[19].opcodes[10] = { type: 4, index: 65 };
      this.rules[20].opcodes = [];
      this.rules[20].opcodes[0] = { type: 3, min: 1, max: Infinity };
      this.rules[20].opcodes[1] = { type: 1, children: [2, 3, 4, 5] };
      this.rules[20].opcodes[2] = { type: 5, min: 33, max: 40 };
      this.rules[20].opcodes[3] = { type: 5, min: 42, max: 46 };
      this.rules[20].opcodes[4] = { type: 5, min: 48, max: 92 };
      this.rules[20].opcodes[5] = { type: 5, min: 94, max: 126 };
      this.rules[21].opcodes = [];
      this.rules[21].opcodes[0] = { type: 2, children: [1, 2, 3] };
      this.rules[21].opcodes[1] = { type: 4, index: 23 };
      this.rules[21].opcodes[2] = { type: 4, index: 14 };
      this.rules[21].opcodes[3] = { type: 1, children: [4, 5] };
      this.rules[21].opcodes[4] = { type: 4, index: 24 };
      this.rules[21].opcodes[5] = { type: 4, index: 22 };
      this.rules[22].opcodes = [];
      this.rules[22].opcodes[0] = { type: 3, min: 1, max: Infinity };
      this.rules[22].opcodes[1] = { type: 1, children: [2, 3, 4, 5] };
      this.rules[22].opcodes[2] = { type: 5, min: 33, max: 40 };
      this.rules[22].opcodes[3] = { type: 5, min: 42, max: 46 };
      this.rules[22].opcodes[4] = { type: 5, min: 48, max: 92 };
      this.rules[22].opcodes[5] = { type: 5, min: 94, max: 126 };
      this.rules[23].opcodes = [];
      this.rules[23].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[23].opcodes[1] = { type: 6, string: [40] };
      this.rules[23].opcodes[2] = { type: 4, index: 89 };
      this.rules[24].opcodes = [];
      this.rules[24].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[24].opcodes[1] = { type: 4, index: 89 };
      this.rules[24].opcodes[2] = { type: 6, string: [41] };
      this.rules[25].opcodes = [];
      this.rules[25].opcodes[0] = { type: 2, children: [1, 2, 3] };
      this.rules[25].opcodes[1] = { type: 4, index: 27 };
      this.rules[25].opcodes[2] = { type: 4, index: 14 };
      this.rules[25].opcodes[3] = { type: 1, children: [4, 5] };
      this.rules[25].opcodes[4] = { type: 4, index: 28 };
      this.rules[25].opcodes[5] = { type: 4, index: 26 };
      this.rules[26].opcodes = [];
      this.rules[26].opcodes[0] = { type: 3, min: 1, max: Infinity };
      this.rules[26].opcodes[1] = { type: 1, children: [2, 3, 4, 5] };
      this.rules[26].opcodes[2] = { type: 5, min: 33, max: 40 };
      this.rules[26].opcodes[3] = { type: 5, min: 42, max: 46 };
      this.rules[26].opcodes[4] = { type: 5, min: 48, max: 92 };
      this.rules[26].opcodes[5] = { type: 5, min: 94, max: 126 };
      this.rules[27].opcodes = [];
      this.rules[27].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[27].opcodes[1] = { type: 6, string: [91] };
      this.rules[27].opcodes[2] = { type: 4, index: 89 };
      this.rules[28].opcodes = [];
      this.rules[28].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[28].opcodes[1] = { type: 4, index: 89 };
      this.rules[28].opcodes[2] = { type: 6, string: [93] };
      this.rules[29].opcodes = [];
      this.rules[29].opcodes[0] = { type: 4, index: 88 };
      this.rules[30].opcodes = [];
      this.rules[30].opcodes[0] = { type: 2, children: [1, 2, 4] };
      this.rules[30].opcodes[1] = { type: 6, string: [92] };
      this.rules[30].opcodes[2] = { type: 3, min: 0, max: 1 };
      this.rules[30].opcodes[3] = { type: 4, index: 31 };
      this.rules[30].opcodes[4] = { type: 4, index: 36 };
      this.rules[31].opcodes = [];
      this.rules[31].opcodes[0] = { type: 1, children: [1, 7, 13, 19] };
      this.rules[31].opcodes[1] = { type: 2, children: [2, 3] };
      this.rules[31].opcodes[2] = { type: 4, index: 32 };
      this.rules[31].opcodes[3] = { type: 3, min: 0, max: 1 };
      this.rules[31].opcodes[4] = { type: 1, children: [5, 6] };
      this.rules[31].opcodes[5] = { type: 4, index: 34 };
      this.rules[31].opcodes[6] = { type: 4, index: 35 };
      this.rules[31].opcodes[7] = { type: 2, children: [8, 9] };
      this.rules[31].opcodes[8] = { type: 4, index: 33 };
      this.rules[31].opcodes[9] = { type: 3, min: 0, max: 1 };
      this.rules[31].opcodes[10] = { type: 1, children: [11, 12] };
      this.rules[31].opcodes[11] = { type: 4, index: 34 };
      this.rules[31].opcodes[12] = { type: 4, index: 35 };
      this.rules[31].opcodes[13] = { type: 2, children: [14, 15] };
      this.rules[31].opcodes[14] = { type: 4, index: 34 };
      this.rules[31].opcodes[15] = { type: 3, min: 0, max: 1 };
      this.rules[31].opcodes[16] = { type: 1, children: [17, 18] };
      this.rules[31].opcodes[17] = { type: 4, index: 32 };
      this.rules[31].opcodes[18] = { type: 4, index: 33 };
      this.rules[31].opcodes[19] = { type: 2, children: [20, 21] };
      this.rules[31].opcodes[20] = { type: 4, index: 35 };
      this.rules[31].opcodes[21] = { type: 3, min: 0, max: 1 };
      this.rules[31].opcodes[22] = { type: 1, children: [23, 24] };
      this.rules[31].opcodes[23] = { type: 4, index: 32 };
      this.rules[31].opcodes[24] = { type: 4, index: 33 };
      this.rules[32].opcodes = [];
      this.rules[32].opcodes[0] = { type: 6, string: [37, 115] };
      this.rules[33].opcodes = [];
      this.rules[33].opcodes[0] = { type: 6, string: [37, 105] };
      this.rules[34].opcodes = [];
      this.rules[34].opcodes[0] = { type: 6, string: [37, 117] };
      this.rules[35].opcodes = [];
      this.rules[35].opcodes[0] = { type: 6, string: [37, 112] };
      this.rules[36].opcodes = [];
      this.rules[36].opcodes[0] = { type: 1, children: [1, 2, 3] };
      this.rules[36].opcodes[1] = { type: 4, index: 38 };
      this.rules[36].opcodes[2] = { type: 4, index: 39 };
      this.rules[36].opcodes[3] = { type: 4, index: 37 };
      this.rules[37].opcodes = [];
      this.rules[37].opcodes[0] = { type: 4, index: 88 };
      this.rules[38].opcodes = [];
      this.rules[38].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[38].opcodes[1] = { type: 6, string: [117, 95] };
      this.rules[38].opcodes[2] = { type: 4, index: 88 };
      this.rules[39].opcodes = [];
      this.rules[39].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[39].opcodes[1] = { type: 6, string: [101, 95] };
      this.rules[39].opcodes[2] = { type: 4, index: 88 };
      this.rules[40].opcodes = [];
      this.rules[40].opcodes[0] = { type: 1, children: [1, 2] };
      this.rules[40].opcodes[1] = { type: 4, index: 42 };
      this.rules[40].opcodes[2] = { type: 4, index: 41 };
      this.rules[41].opcodes = [];
      this.rules[41].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[41].opcodes[1] = { type: 6, string: [117, 95] };
      this.rules[41].opcodes[2] = { type: 4, index: 88 };
      this.rules[42].opcodes = [];
      this.rules[42].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[42].opcodes[1] = { type: 6, string: [101, 95] };
      this.rules[42].opcodes[2] = { type: 4, index: 88 };
      this.rules[43].opcodes = [];
      this.rules[43].opcodes[0] = { type: 1, children: [1, 5, 8, 11, 12] };
      this.rules[43].opcodes[1] = { type: 2, children: [2, 3, 4] };
      this.rules[43].opcodes[2] = { type: 4, index: 69 };
      this.rules[43].opcodes[3] = { type: 4, index: 46 };
      this.rules[43].opcodes[4] = { type: 4, index: 71 };
      this.rules[43].opcodes[5] = { type: 2, children: [6, 7] };
      this.rules[43].opcodes[6] = { type: 4, index: 69 };
      this.rules[43].opcodes[7] = { type: 4, index: 46 };
      this.rules[43].opcodes[8] = { type: 2, children: [9, 10] };
      this.rules[43].opcodes[9] = { type: 4, index: 46 };
      this.rules[43].opcodes[10] = { type: 4, index: 71 };
      this.rules[43].opcodes[11] = { type: 4, index: 46 };
      this.rules[43].opcodes[12] = { type: 4, index: 70 };
      this.rules[44].opcodes = [];
      this.rules[44].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[44].opcodes[1] = { type: 6, string: [47] };
      this.rules[44].opcodes[2] = { type: 4, index: 89 };
      this.rules[45].opcodes = [];
      this.rules[45].opcodes[0] = { type: 4, index: 90 };
      this.rules[46].opcodes = [];
      this.rules[46].opcodes[0] = { type: 6, string: [42] };
      this.rules[47].opcodes = [];
      this.rules[47].opcodes[0] = { type: 6, string: [38] };
      this.rules[48].opcodes = [];
      this.rules[48].opcodes[0] = { type: 6, string: [33] };
      this.rules[49].opcodes = [];
      this.rules[49].opcodes[0] = { type: 6, string: [38, 38] };
      this.rules[50].opcodes = [];
      this.rules[50].opcodes[0] = { type: 6, string: [33, 33] };
      this.rules[51].opcodes = [];
      this.rules[51].opcodes[0] = { type: 6, string: [37, 94] };
      this.rules[52].opcodes = [];
      this.rules[52].opcodes[0] = { type: 6, string: [37, 36] };
      this.rules[53].opcodes = [];
      this.rules[53].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[53].opcodes[1] = { type: 6, string: [37] };
      this.rules[53].opcodes[2] = { type: 1, children: [3, 8, 13] };
      this.rules[53].opcodes[3] = { type: 2, children: [4, 5, 6, 7] };
      this.rules[53].opcodes[4] = { type: 4, index: 76 };
      this.rules[53].opcodes[5] = { type: 4, index: 79 };
      this.rules[53].opcodes[6] = { type: 6, string: [45] };
      this.rules[53].opcodes[7] = { type: 4, index: 80 };
      this.rules[53].opcodes[8] = { type: 2, children: [9, 10, 11, 12] };
      this.rules[53].opcodes[9] = { type: 4, index: 77 };
      this.rules[53].opcodes[10] = { type: 4, index: 83 };
      this.rules[53].opcodes[11] = { type: 6, string: [45] };
      this.rules[53].opcodes[12] = { type: 4, index: 84 };
      this.rules[53].opcodes[13] = { type: 2, children: [14, 15, 16, 17] };
      this.rules[53].opcodes[14] = { type: 4, index: 78 };
      this.rules[53].opcodes[15] = { type: 4, index: 81 };
      this.rules[53].opcodes[16] = { type: 6, string: [45] };
      this.rules[53].opcodes[17] = { type: 4, index: 82 };
      this.rules[54].opcodes = [];
      this.rules[54].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[54].opcodes[1] = { type: 6, string: [37] };
      this.rules[54].opcodes[2] = { type: 1, children: [3, 10, 17] };
      this.rules[54].opcodes[3] = { type: 2, children: [4, 5, 6] };
      this.rules[54].opcodes[4] = { type: 4, index: 76 };
      this.rules[54].opcodes[5] = { type: 4, index: 73 };
      this.rules[54].opcodes[6] = { type: 3, min: 0, max: Infinity };
      this.rules[54].opcodes[7] = { type: 2, children: [8, 9] };
      this.rules[54].opcodes[8] = { type: 6, string: [46] };
      this.rules[54].opcodes[9] = { type: 4, index: 73 };
      this.rules[54].opcodes[10] = { type: 2, children: [11, 12, 13] };
      this.rules[54].opcodes[11] = { type: 4, index: 77 };
      this.rules[54].opcodes[12] = { type: 4, index: 74 };
      this.rules[54].opcodes[13] = { type: 3, min: 0, max: Infinity };
      this.rules[54].opcodes[14] = { type: 2, children: [15, 16] };
      this.rules[54].opcodes[15] = { type: 6, string: [46] };
      this.rules[54].opcodes[16] = { type: 4, index: 74 };
      this.rules[54].opcodes[17] = { type: 2, children: [18, 19, 20] };
      this.rules[54].opcodes[18] = { type: 4, index: 78 };
      this.rules[54].opcodes[19] = { type: 4, index: 75 };
      this.rules[54].opcodes[20] = { type: 3, min: 0, max: Infinity };
      this.rules[54].opcodes[21] = { type: 2, children: [22, 23] };
      this.rules[54].opcodes[22] = { type: 6, string: [46] };
      this.rules[54].opcodes[23] = { type: 4, index: 75 };
      this.rules[55].opcodes = [];
      this.rules[55].opcodes[0] = { type: 2, children: [1, 2, 3, 4] };
      this.rules[55].opcodes[1] = { type: 4, index: 56 };
      this.rules[55].opcodes[2] = { type: 4, index: 57 };
      this.rules[55].opcodes[3] = { type: 4, index: 59 };
      this.rules[55].opcodes[4] = { type: 4, index: 58 };
      this.rules[56].opcodes = [];
      this.rules[56].opcodes[0] = { type: 3, min: 0, max: 1 };
      this.rules[56].opcodes[1] = { type: 1, children: [2, 3] };
      this.rules[56].opcodes[2] = { type: 7, string: [37, 105] };
      this.rules[56].opcodes[3] = { type: 7, string: [37, 115] };
      this.rules[57].opcodes = [];
      this.rules[57].opcodes[0] = { type: 6, string: [34] };
      this.rules[58].opcodes = [];
      this.rules[58].opcodes[0] = { type: 6, string: [34] };
      this.rules[59].opcodes = [];
      this.rules[59].opcodes[0] = { type: 3, min: 0, max: Infinity };
      this.rules[59].opcodes[1] = { type: 1, children: [2, 3, 4] };
      this.rules[59].opcodes[2] = { type: 5, min: 32, max: 33 };
      this.rules[59].opcodes[3] = { type: 5, min: 35, max: 126 };
      this.rules[59].opcodes[4] = { type: 4, index: 60 };
      this.rules[60].opcodes = [];
      this.rules[60].opcodes[0] = { type: 6, string: [9] };
      this.rules[61].opcodes = [];
      this.rules[61].opcodes[0] = { type: 2, children: [1, 2, 3] };
      this.rules[61].opcodes[1] = { type: 4, index: 62 };
      this.rules[61].opcodes[2] = { type: 4, index: 64 };
      this.rules[61].opcodes[3] = { type: 4, index: 63 };
      this.rules[62].opcodes = [];
      this.rules[62].opcodes[0] = { type: 6, string: [39] };
      this.rules[63].opcodes = [];
      this.rules[63].opcodes[0] = { type: 6, string: [39] };
      this.rules[64].opcodes = [];
      this.rules[64].opcodes[0] = { type: 3, min: 0, max: Infinity };
      this.rules[64].opcodes[1] = { type: 1, children: [2, 3, 4] };
      this.rules[64].opcodes[2] = { type: 5, min: 32, max: 38 };
      this.rules[64].opcodes[3] = { type: 5, min: 40, max: 126 };
      this.rules[64].opcodes[4] = { type: 4, index: 60 };
      this.rules[65].opcodes = [];
      this.rules[65].opcodes[0] = { type: 2, children: [1, 2, 3] };
      this.rules[65].opcodes[1] = { type: 4, index: 66 };
      this.rules[65].opcodes[2] = { type: 4, index: 67 };
      this.rules[65].opcodes[3] = { type: 4, index: 68 };
      this.rules[66].opcodes = [];
      this.rules[66].opcodes[0] = { type: 6, string: [60] };
      this.rules[67].opcodes = [];
      this.rules[67].opcodes[0] = { type: 3, min: 0, max: Infinity };
      this.rules[67].opcodes[1] = { type: 1, children: [2, 3, 4] };
      this.rules[67].opcodes[2] = { type: 5, min: 32, max: 61 };
      this.rules[67].opcodes[3] = { type: 5, min: 63, max: 126 };
      this.rules[67].opcodes[4] = { type: 4, index: 60 };
      this.rules[68].opcodes = [];
      this.rules[68].opcodes[0] = { type: 6, string: [62] };
      this.rules[69].opcodes = [];
      this.rules[69].opcodes[0] = { type: 4, index: 72 };
      this.rules[70].opcodes = [];
      this.rules[70].opcodes[0] = { type: 4, index: 72 };
      this.rules[71].opcodes = [];
      this.rules[71].opcodes[0] = { type: 4, index: 72 };
      this.rules[72].opcodes = [];
      this.rules[72].opcodes[0] = { type: 3, min: 1, max: Infinity };
      this.rules[72].opcodes[1] = { type: 5, min: 48, max: 57 };
      this.rules[73].opcodes = [];
      this.rules[73].opcodes[0] = { type: 4, index: 85 };
      this.rules[74].opcodes = [];
      this.rules[74].opcodes[0] = { type: 4, index: 87 };
      this.rules[75].opcodes = [];
      this.rules[75].opcodes[0] = { type: 4, index: 86 };
      this.rules[76].opcodes = [];
      this.rules[76].opcodes[0] = { type: 1, children: [1, 2] };
      this.rules[76].opcodes[1] = { type: 6, string: [68] };
      this.rules[76].opcodes[2] = { type: 6, string: [100] };
      this.rules[77].opcodes = [];
      this.rules[77].opcodes[0] = { type: 1, children: [1, 2] };
      this.rules[77].opcodes[1] = { type: 6, string: [88] };
      this.rules[77].opcodes[2] = { type: 6, string: [120] };
      this.rules[78].opcodes = [];
      this.rules[78].opcodes[0] = { type: 1, children: [1, 2] };
      this.rules[78].opcodes[1] = { type: 6, string: [66] };
      this.rules[78].opcodes[2] = { type: 6, string: [98] };
      this.rules[79].opcodes = [];
      this.rules[79].opcodes[0] = { type: 4, index: 85 };
      this.rules[80].opcodes = [];
      this.rules[80].opcodes[0] = { type: 4, index: 85 };
      this.rules[81].opcodes = [];
      this.rules[81].opcodes[0] = { type: 4, index: 86 };
      this.rules[82].opcodes = [];
      this.rules[82].opcodes[0] = { type: 4, index: 86 };
      this.rules[83].opcodes = [];
      this.rules[83].opcodes[0] = { type: 4, index: 87 };
      this.rules[84].opcodes = [];
      this.rules[84].opcodes[0] = { type: 4, index: 87 };
      this.rules[85].opcodes = [];
      this.rules[85].opcodes[0] = { type: 3, min: 1, max: Infinity };
      this.rules[85].opcodes[1] = { type: 5, min: 48, max: 57 };
      this.rules[86].opcodes = [];
      this.rules[86].opcodes[0] = { type: 3, min: 1, max: Infinity };
      this.rules[86].opcodes[1] = { type: 5, min: 48, max: 49 };
      this.rules[87].opcodes = [];
      this.rules[87].opcodes[0] = { type: 3, min: 1, max: Infinity };
      this.rules[87].opcodes[1] = { type: 1, children: [2, 3, 4] };
      this.rules[87].opcodes[2] = { type: 5, min: 48, max: 57 };
      this.rules[87].opcodes[3] = { type: 5, min: 65, max: 70 };
      this.rules[87].opcodes[4] = { type: 5, min: 97, max: 102 };
      this.rules[88].opcodes = [];
      this.rules[88].opcodes[0] = { type: 2, children: [1, 4] };
      this.rules[88].opcodes[1] = { type: 1, children: [2, 3] };
      this.rules[88].opcodes[2] = { type: 5, min: 97, max: 122 };
      this.rules[88].opcodes[3] = { type: 5, min: 65, max: 90 };
      this.rules[88].opcodes[4] = { type: 3, min: 0, max: Infinity };
      this.rules[88].opcodes[5] = { type: 1, children: [6, 7, 8, 9] };
      this.rules[88].opcodes[6] = { type: 5, min: 97, max: 122 };
      this.rules[88].opcodes[7] = { type: 5, min: 65, max: 90 };
      this.rules[88].opcodes[8] = { type: 5, min: 48, max: 57 };
      this.rules[88].opcodes[9] = { type: 6, string: [45] };
      this.rules[89].opcodes = [];
      this.rules[89].opcodes[0] = { type: 3, min: 0, max: Infinity };
      this.rules[89].opcodes[1] = { type: 4, index: 91 };
      this.rules[90].opcodes = [];
      this.rules[90].opcodes[0] = { type: 3, min: 1, max: Infinity };
      this.rules[90].opcodes[1] = { type: 4, index: 91 };
      this.rules[91].opcodes = [];
      this.rules[91].opcodes[0] = { type: 1, children: [1, 2, 3, 4] };
      this.rules[91].opcodes[1] = { type: 6, string: [32] };
      this.rules[91].opcodes[2] = { type: 6, string: [9] };
      this.rules[91].opcodes[3] = { type: 4, index: 92 };
      this.rules[91].opcodes[4] = { type: 4, index: 94 };
      this.rules[92].opcodes = [];
      this.rules[92].opcodes[0] = { type: 2, children: [1, 2] };
      this.rules[92].opcodes[1] = { type: 6, string: [59] };
      this.rules[92].opcodes[2] = { type: 3, min: 0, max: Infinity };
      this.rules[92].opcodes[3] = { type: 1, children: [4, 5] };
      this.rules[92].opcodes[4] = { type: 5, min: 32, max: 126 };
      this.rules[92].opcodes[5] = { type: 6, string: [9] };
      this.rules[93].opcodes = [];
      this.rules[93].opcodes[0] = { type: 1, children: [1, 2, 3] };
      this.rules[93].opcodes[1] = { type: 6, string: [13, 10] };
      this.rules[93].opcodes[2] = { type: 6, string: [10] };
      this.rules[93].opcodes[3] = { type: 6, string: [13] };
      this.rules[94].opcodes = [];
      this.rules[94].opcodes[0] = { type: 2, children: [1, 5] };
      this.rules[94].opcodes[1] = { type: 1, children: [2, 3, 4] };
      this.rules[94].opcodes[2] = { type: 6, string: [13, 10] };
      this.rules[94].opcodes[3] = { type: 6, string: [10] };
      this.rules[94].opcodes[4] = { type: 6, string: [13] };
      this.rules[94].opcodes[5] = { type: 1, children: [6, 7] };
      this.rules[94].opcodes[6] = { type: 6, string: [32] };
      this.rules[94].opcodes[7] = { type: 6, string: [9] };
      this.toString = function toString() {
        let str = "";
        str += ";\n";
        str += "; ABNF for JavaScript APG 2.0 SABNF\n";
        str += "; RFC 5234 with some restrictions and additions.\n";
        str += "; Updated 11/24/2015 for RFC 7405 case-sensitive literal string notation\n";
        str += ';  - accepts %s"string" as a case-sensitive string\n';
        str += ';  - accepts %i"string" as a case-insensitive string\n';
        str += ';  - accepts "string" as a case-insensitive string\n';
        str += ";\n";
        str += "; Some restrictions:\n";
        str += ";   1. Rules must begin at first character of each line.\n";
        str += ";      Indentations on first rule and rules thereafter are not allowed.\n";
        str += ";   2. Relaxed line endings. CRLF, LF or CR are accepted as valid line ending.\n";
        str += ";   3. Prose values, i.e. <prose value>, are accepted as valid grammar syntax.\n";
        str += ";      However, a working parser cannot be generated from them.\n";
        str += ";\n";
        str += "; Super set (SABNF) additions:\n";
        str += ";   1. Look-ahead (syntactic predicate) operators are accepted as element prefixes.\n";
        str += ";      & is the positive look-ahead operator, succeeds and backtracks if the look-ahead phrase is found\n";
        str += ";      ! is the negative look-ahead operator, succeeds and backtracks if the look-ahead phrase is NOT found\n";
        str += ";      e.g. &%d13 or &rule or !(A / B)\n";
        str += ";   2. User-Defined Terminals (UDT) of the form, u_name and e_name are accepted.\n";
        str += ";      'name' is alpha followed by alpha/num/hyphen just like a rule name.\n";
        str += ";      u_name may be used as an element but no rule definition is given.\n";
        str += ";      e.g. rule = A / u_myUdt\n";
        str += ';           A = "a"\n';
        str += ";      would be a valid grammar.\n";
        str += ";   3. Case-sensitive, single-quoted strings are accepted.\n";
        str += ";      e.g. 'abc' would be equivalent to %d97.98.99\n";
        str += ';      (kept for backward compatibility, but superseded by %s"abc")  \n';
        str += "; New 12/26/2015\n";
        str += ";   4. Look-behind operators are accepted as element prefixes.\n";
        str += ";      && is the positive look-behind operator, succeeds and backtracks if the look-behind phrase is found\n";
        str += ";      !! is the negative look-behind operator, succeeds and backtracks if the look-behind phrase is NOT found\n";
        str += ";      e.g. &&%d13 or &&rule or !!(A / B)\n";
        str += ";   5. Back reference operators, i.e. \\rulename, are accepted.\n";
        str += ";      A back reference operator acts like a TLS or TBS terminal except that the phrase it attempts\n";
        str += ";      to match is a phrase previously matched by the rule 'rulename'.\n";
        str += ";      There are two modes of previous phrase matching - the parent-frame mode and the universal mode.\n";
        str += ";      In universal mode, \\rulename matches the last match to 'rulename' regardless of where it was found.\n";
        str += ";      In parent-frame mode, \\rulename matches only the last match found on the parent's frame or parse tree level.\n";
        str += ";      Back reference modifiers can be used to specify case and mode.\n";
        str += ";      \\A defaults to case-insensitive and universal mode, e.g. \\A === \\%i%uA\n";
        str += ";      Modifiers %i and %s determine case-insensitive and case-sensitive mode, respectively.\n";
        str += ";      Modifiers %u and %p determine universal mode and parent frame mode, respectively.\n";
        str += ";      Case and mode modifiers can appear in any order, e.g. \\%s%pA === \\%p%sA. \n";
        str += ";   7. String begin anchor, ABG(%^) matches the beginning of the input string location.\n";
        str += ";      Returns EMPTY or NOMATCH. Never consumes any characters.\n";
        str += ";   8. String end anchor, AEN(%$) matches the end of the input string location.\n";
        str += ";      Returns EMPTY or NOMATCH. Never consumes any characters.\n";
        str += ";\n";
        str += "File            = *(BlankLine / Rule / RuleError)\n";
        str += "BlankLine       = *(%d32/%d9) [comment] LineEnd\n";
        str += "Rule            = RuleLookup owsp Alternation ((owsp LineEnd)\n";
        str += "                / (LineEndError LineEnd))\n";
        str += "RuleLookup      = RuleNameTest owsp DefinedAsTest\n";
        str += "RuleNameTest    = RuleName/RuleNameError\n";
        str += "RuleName        = alphanum\n";
        str += "RuleNameError   = 1*(%d33-60/%d62-126)\n";
        str += "DefinedAsTest   = DefinedAs / DefinedAsError\n";
        str += "DefinedAsError  = 1*2%d33-126\n";
        str += "DefinedAs       = IncAlt / Defined\n";
        str += "Defined         = %d61\n";
        str += "IncAlt          = %d61.47\n";
        str += "RuleError       = 1*(%d32-126 / %d9  / LineContinue) LineEnd\n";
        str += "LineEndError    = 1*(%d32-126 / %d9  / LineContinue)\n";
        str += "Alternation     = Concatenation *(owsp AltOp Concatenation)\n";
        str += "Concatenation   = Repetition *(CatOp Repetition)\n";
        str += "Repetition      = [Modifier] (Group / Option / BasicElement / BasicElementErr)\n";
        str += "Modifier        = (Predicate [RepOp])\n";
        str += "                / RepOp\n";
        str += "Predicate       = BkaOp\n";
        str += "                / BknOp\n";
        str += "                / AndOp\n";
        str += "                / NotOp\n";
        str += "BasicElement    = UdtOp\n";
        str += "                / RnmOp\n";
        str += "                / TrgOp\n";
        str += "                / TbsOp\n";
        str += "                / TlsOp\n";
        str += "                / ClsOp\n";
        str += "                / BkrOp\n";
        str += "                / AbgOp\n";
        str += "                / AenOp\n";
        str += "                / ProsVal\n";
        str += "BasicElementErr = 1*(%d33-40/%d42-46/%d48-92/%d94-126)\n";
        str += "Group           = GroupOpen  Alternation (GroupClose / GroupError)\n";
        str += "GroupError      = 1*(%d33-40/%d42-46/%d48-92/%d94-126) ; same as BasicElementErr\n";
        str += "GroupOpen       = %d40 owsp\n";
        str += "GroupClose      = owsp %d41\n";
        str += "Option          = OptionOpen Alternation (OptionClose / OptionError)\n";
        str += "OptionError     = 1*(%d33-40/%d42-46/%d48-92/%d94-126) ; same as BasicElementErr\n";
        str += "OptionOpen      = %d91 owsp\n";
        str += "OptionClose     = owsp %d93\n";
        str += "RnmOp           = alphanum\n";
        str += "BkrOp           = %d92 [bkrModifier] bkr-name\n";
        str += "bkrModifier     = (cs [um / pm]) / (ci [um / pm]) / (um [cs /ci]) / (pm [cs / ci])\n";
        str += "cs              = '%s'\n";
        str += "ci              = '%i'\n";
        str += "um              = '%u'\n";
        str += "pm              = '%p'\n";
        str += "bkr-name        = uname / ename / rname\n";
        str += "rname           = alphanum\n";
        str += "uname           = %d117.95 alphanum\n";
        str += "ename           = %d101.95 alphanum\n";
        str += "UdtOp           = udt-empty\n";
        str += "                / udt-non-empty\n";
        str += "udt-non-empty   = %d117.95 alphanum\n";
        str += "udt-empty       = %d101.95 alphanum\n";
        str += "RepOp           = (rep-min StarOp rep-max)\n";
        str += "                / (rep-min StarOp)\n";
        str += "                / (StarOp rep-max)\n";
        str += "                / StarOp\n";
        str += "                / rep-min-max\n";
        str += "AltOp           = %d47 owsp\n";
        str += "CatOp           = wsp\n";
        str += "StarOp          = %d42\n";
        str += "AndOp           = %d38\n";
        str += "NotOp           = %d33\n";
        str += "BkaOp           = %d38.38\n";
        str += "BknOp           = %d33.33\n";
        str += "AbgOp           = %d37.94\n";
        str += "AenOp           = %d37.36\n";
        str += "TrgOp           = %d37 ((Dec dmin %d45 dmax) / (Hex xmin %d45 xmax) / (Bin bmin %d45 bmax))\n";
        str += "TbsOp           = %d37 ((Dec dString *(%d46 dString)) / (Hex xString *(%d46 xString)) / (Bin bString *(%d46 bString)))\n";
        str += "TlsOp           = TlsCase TlsOpen TlsString TlsClose\n";
        str += 'TlsCase         = ["%i" / "%s"]\n';
        str += "TlsOpen         = %d34\n";
        str += "TlsClose        = %d34\n";
        str += "TlsString       = *(%d32-33/%d35-126/StringTab)\n";
        str += "StringTab       = %d9\n";
        str += "ClsOp           = ClsOpen ClsString ClsClose\n";
        str += "ClsOpen         = %d39\n";
        str += "ClsClose        = %d39\n";
        str += "ClsString       = *(%d32-38/%d40-126/StringTab)\n";
        str += "ProsVal         = ProsValOpen ProsValString ProsValClose\n";
        str += "ProsValOpen     = %d60\n";
        str += "ProsValString   = *(%d32-61/%d63-126/StringTab)\n";
        str += "ProsValClose    = %d62\n";
        str += "rep-min         = rep-num\n";
        str += "rep-min-max     = rep-num\n";
        str += "rep-max         = rep-num\n";
        str += "rep-num         = 1*(%d48-57)\n";
        str += "dString         = dnum\n";
        str += "xString         = xnum\n";
        str += "bString         = bnum\n";
        str += "Dec             = (%d68/%d100)\n";
        str += "Hex             = (%d88/%d120)\n";
        str += "Bin             = (%d66/%d98)\n";
        str += "dmin            = dnum\n";
        str += "dmax            = dnum\n";
        str += "bmin            = bnum\n";
        str += "bmax            = bnum\n";
        str += "xmin            = xnum\n";
        str += "xmax            = xnum\n";
        str += "dnum            = 1*(%d48-57)\n";
        str += "bnum            = 1*%d48-49\n";
        str += "xnum            = 1*(%d48-57 / %d65-70 / %d97-102)\n";
        str += ";\n";
        str += "; Basics\n";
        str += "alphanum        = (%d97-122/%d65-90) *(%d97-122/%d65-90/%d48-57/%d45)\n";
        str += "owsp            = *space\n";
        str += "wsp             = 1*space\n";
        str += "space           = %d32\n";
        str += "                / %d9\n";
        str += "                / comment\n";
        str += "                / LineContinue\n";
        str += "comment         = %d59 *(%d32-126 / %d9)\n";
        str += "LineEnd         = %d13.10\n";
        str += "                / %d10\n";
        str += "                / %d13\n";
        str += "LineContinue    = (%d13.10 / %d10 / %d13) (%d32 / %d9)\n";
        return str;
      };
    };
  }
});

// node_modules/apg-js/src/apg-api/parser.js
var require_parser2 = __commonJS({
  "node_modules/apg-js/src/apg-api/parser.js"(exports, module) {
    module.exports = function exportParser() {
      const thisFileName = "parser: ";
      const ApgLib = require_node_exports();
      const id = ApgLib.ids;
      const syn = new (require_syntax_callbacks())();
      const sem = new (require_semantic_callbacks())();
      const sabnfGrammar = new (require_sabnf_grammar())();
      const parser = new ApgLib.parser();
      parser.ast = new ApgLib.ast();
      parser.callbacks = syn.callbacks;
      parser.ast.callbacks = sem.callbacks;
      const findLine = function findLine2(lines, charIndex, charLength) {
        if (charIndex < 0 || charIndex >= charLength) {
          return -1;
        }
        for (let i = 0; i < lines.length; i += 1) {
          if (charIndex >= lines[i].beginChar && charIndex < lines[i].beginChar + lines[i].length) {
            return i;
          }
        }
        return -1;
      };
      const translateIndex = function translateIndex2(map, index) {
        let ret = -1;
        if (index < map.length) {
          for (let i = index; i < map.length; i += 1) {
            if (map[i] !== null) {
              ret = map[i];
              break;
            }
          }
        }
        return ret;
      };
      const reduceOpcodes = function reduceOpcodes2(rules) {
        rules.forEach((rule) => {
          const opcodes = [];
          const map = [];
          let reducedIndex = 0;
          rule.opcodes.forEach((op) => {
            if (op.type === id.ALT && op.children.length === 1) {
              map.push(null);
            } else if (op.type === id.CAT && op.children.length === 1) {
              map.push(null);
            } else if (op.type === id.REP && op.min === 1 && op.max === 1) {
              map.push(null);
            } else {
              map.push(reducedIndex);
              opcodes.push(op);
              reducedIndex += 1;
            }
          });
          map.push(reducedIndex);
          opcodes.forEach((op) => {
            if (op.type === id.ALT || op.type === id.CAT) {
              for (let i = 0; i < op.children.length; i += 1) {
                op.children[i] = translateIndex(map, op.children[i]);
              }
            }
          });
          rule.opcodes = opcodes;
        });
      };
      this.syntax = function syntax(chars, lines, errors, strict, lite, trace) {
        if (trace) {
          if (trace.traceObject !== "traceObject") {
            throw new TypeError(`${thisFileName}trace argument is not a trace object`);
          }
          parser.trace = trace;
        }
        const data = {};
        data.errors = errors;
        data.strict = !!strict;
        data.lite = !!lite;
        data.lines = lines;
        data.findLine = findLine;
        data.charsLength = chars.length;
        data.ruleCount = 0;
        const result = parser.parse(sabnfGrammar, "file", chars, data);
        if (!result.success) {
          errors.push({
            line: 0,
            char: 0,
            msg: "syntax analysis of input grammar failed"
          });
        }
      };
      this.semantic = function semantic(chars, lines, errors) {
        const data = {};
        data.errors = errors;
        data.lines = lines;
        data.findLine = findLine;
        data.charsLength = chars.length;
        parser.ast.translate(data);
        if (errors.length) {
          return null;
        }
        reduceOpcodes(data.rules);
        return {
          rules: data.rules,
          udts: data.udts,
          lineMap: data.rulesLineMap
        };
      };
      this.generateSource = function generateSource(chars, lines, rules, udts, config) {
        let source = "";
        let typescript = false;
        let lite = false;
        if (config) {
          if (config.typescript) {
            typescript = true;
            lite = false;
          } else if (config.lite) {
            typescript = false;
            lite = true;
          }
        }
        let i;
        let bkrname;
        let bkrlower;
        let opcodeCount = 0;
        let charCodeMin = Infinity;
        let charCodeMax = 0;
        const ruleNames = [];
        const udtNames = [];
        let alt = 0;
        let cat = 0;
        let rnm = 0;
        let udt = 0;
        let rep = 0;
        let and = 0;
        let not = 0;
        let tls = 0;
        let tbs = 0;
        let trg = 0;
        let bkr = 0;
        let bka = 0;
        let bkn = 0;
        let abg = 0;
        let aen = 0;
        rules.forEach((rule) => {
          ruleNames.push(rule.lower);
          opcodeCount += rule.opcodes.length;
          rule.opcodes.forEach((op) => {
            switch (op.type) {
              case id.ALT:
                alt += 1;
                break;
              case id.CAT:
                cat += 1;
                break;
              case id.RNM:
                rnm += 1;
                break;
              case id.UDT:
                udt += 1;
                break;
              case id.REP:
                rep += 1;
                break;
              case id.AND:
                and += 1;
                break;
              case id.NOT:
                not += 1;
                break;
              case id.BKA:
                bka += 1;
                break;
              case id.BKN:
                bkn += 1;
                break;
              case id.BKR:
                bkr += 1;
                break;
              case id.ABG:
                abg += 1;
                break;
              case id.AEN:
                aen += 1;
                break;
              case id.TLS:
                tls += 1;
                for (i = 0; i < op.string.length; i += 1) {
                  if (op.string[i] < charCodeMin) {
                    charCodeMin = op.string[i];
                  }
                  if (op.string[i] > charCodeMax) {
                    charCodeMax = op.string[i];
                  }
                }
                break;
              case id.TBS:
                tbs += 1;
                for (i = 0; i < op.string.length; i += 1) {
                  if (op.string[i] < charCodeMin) {
                    charCodeMin = op.string[i];
                  }
                  if (op.string[i] > charCodeMax) {
                    charCodeMax = op.string[i];
                  }
                }
                break;
              case id.TRG:
                trg += 1;
                if (op.min < charCodeMin) {
                  charCodeMin = op.min;
                }
                if (op.max > charCodeMax) {
                  charCodeMax = op.max;
                }
                break;
              default:
                throw new Error("generateSource: unrecognized opcode");
            }
          });
        });
        ruleNames.sort();
        if (udts.length > 0) {
          udts.forEach((udtFunc) => {
            udtNames.push(udtFunc.lower);
          });
          udtNames.sort();
        }
        source += "// copyright: Copyright (c) 2024 Lowell D. Thomas, all rights reserved<br>\n";
        source += "//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\n";
        source += "//\n";
        source += "// Generated by apg-js, Version 4.4.0 [apg-js](https://github.com/ldthomas/apg-js)\n";
        if (config) {
          if (config.funcName) {
            source += `const ${config.funcName} = function grammar(){
`;
          } else if (typescript) {
            source += "export function grammar(){\n";
          } else if (lite) {
            source += "export default function grammar(){\n";
          } else {
            source += `module.exports = function grammar(){
`;
          }
        } else {
          source += `module.exports = function grammar(){
`;
        }
        source += "  // ```\n";
        source += "  // SUMMARY\n";
        source += `  //      rules = ${rules.length}
`;
        source += `  //       udts = ${udts.length}
`;
        source += `  //    opcodes = ${opcodeCount}
`;
        source += "  //        ---   ABNF original opcodes\n";
        source += `  //        ALT = ${alt}
`;
        source += `  //        CAT = ${cat}
`;
        source += `  //        REP = ${rep}
`;
        source += `  //        RNM = ${rnm}
`;
        source += `  //        TLS = ${tls}
`;
        source += `  //        TBS = ${tbs}
`;
        source += `  //        TRG = ${trg}
`;
        source += "  //        ---   SABNF superset opcodes\n";
        source += `  //        UDT = ${udt}
`;
        source += `  //        AND = ${and}
`;
        source += `  //        NOT = ${not}
`;
        if (!lite) {
          source += `  //        BKA = ${bka}
`;
          source += `  //        BKN = ${bkn}
`;
          source += `  //        BKR = ${bkr}
`;
          source += `  //        ABG = ${abg}
`;
          source += `  //        AEN = ${aen}
`;
        }
        source += "  // characters = [";
        if (tls + tbs + trg === 0) {
          source += " none defined ]";
        } else {
          source += `${charCodeMin} - ${charCodeMax}]`;
        }
        if (udt > 0) {
          source += " + user defined";
        }
        source += "\n";
        source += "  // ```\n";
        source += "  /* OBJECT IDENTIFIER (for internal parser use) */\n";
        source += "  this.grammarObject = 'grammarObject';\n";
        source += "\n";
        source += "  /* RULES */\n";
        source += "  this.rules = [];\n";
        rules.forEach((rule, ii) => {
          let thisRule = "  this.rules[";
          thisRule += ii;
          thisRule += "] = { name: '";
          thisRule += rule.name;
          thisRule += "', lower: '";
          thisRule += rule.lower;
          thisRule += "', index: ";
          thisRule += rule.index;
          thisRule += ", isBkr: ";
          thisRule += rule.isBkr;
          thisRule += " };\n";
          source += thisRule;
        });
        source += "\n";
        source += "  /* UDTS */\n";
        source += "  this.udts = [];\n";
        if (udts.length > 0) {
          udts.forEach((udtFunc, ii) => {
            let thisUdt = "  this.udts[";
            thisUdt += ii;
            thisUdt += "] = { name: '";
            thisUdt += udtFunc.name;
            thisUdt += "', lower: '";
            thisUdt += udtFunc.lower;
            thisUdt += "', index: ";
            thisUdt += udtFunc.index;
            thisUdt += ", empty: ";
            thisUdt += udtFunc.empty;
            thisUdt += ", isBkr: ";
            thisUdt += udtFunc.isBkr;
            thisUdt += " };\n";
            source += thisUdt;
          });
        }
        source += "\n";
        source += "  /* OPCODES */\n";
        rules.forEach((rule, ruleIndex) => {
          if (ruleIndex > 0) {
            source += "\n";
          }
          source += `  /* ${rule.name} */
`;
          source += `  this.rules[${ruleIndex}].opcodes = [];
`;
          rule.opcodes.forEach((op, opIndex) => {
            let prefix;
            switch (op.type) {
              case id.ALT:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type}, children: [${op.children.toString()}] };// ALT
`;
                break;
              case id.CAT:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type}, children: [${op.children.toString()}] };// CAT
`;
                break;
              case id.RNM:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type}, index: ${op.index} };// RNM(${rules[op.index].name})
`;
                break;
              case id.BKR:
                if (op.index >= rules.length) {
                  bkrname = udts[op.index - rules.length].name;
                  bkrlower = udts[op.index - rules.length].lower;
                } else {
                  bkrname = rules[op.index].name;
                  bkrlower = rules[op.index].lower;
                }
                prefix = "%i";
                if (op.bkrCase === id.BKR_MODE_CS) {
                  prefix = "%s";
                }
                if (op.bkrMode === id.BKR_MODE_UM) {
                  prefix += "%u";
                } else {
                  prefix += "%p";
                }
                bkrname = prefix + bkrname;
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type}, index: ${op.index}, lower: '${bkrlower}', bkrCase: ${op.bkrCase}, bkrMode: ${op.bkrMode} };// BKR(\\${bkrname})
`;
                break;
              case id.UDT:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type}, empty: ${op.empty}, index: ${op.index} };// UDT(${udts[op.index].name})
`;
                break;
              case id.REP:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type}, min: ${op.min}, max: ${op.max} };// REP
`;
                break;
              case id.AND:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type} };// AND
`;
                break;
              case id.NOT:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type} };// NOT
`;
                break;
              case id.ABG:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type} };// ABG(%^)
`;
                break;
              case id.AEN:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type} };// AEN(%$)
`;
                break;
              case id.BKA:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type} };// BKA
`;
                break;
              case id.BKN:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type} };// BKN
`;
                break;
              case id.TLS:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type}, string: [${op.string.toString()}] };// TLS
`;
                break;
              case id.TBS:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type}, string: [${op.string.toString()}] };// TBS
`;
                break;
              case id.TRG:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = { type: ${op.type}, min: ${op.min}, max: ${op.max} };// TRG
`;
                break;
              default:
                throw new Error("parser.js: ~143: unrecognized opcode");
            }
          });
        });
        source += "\n";
        source += "  // The `toString()` function will display the original grammar file(s) that produced these opcodes.\n";
        source += "  this.toString = function toString(){\n";
        source += '    let str = "";\n';
        let str;
        lines.forEach((line) => {
          const end = line.beginChar + line.length;
          str = "";
          source += '    str += "';
          for (let ii = line.beginChar; ii < end; ii += 1) {
            switch (chars[ii]) {
              case 9:
                str = " ";
                break;
              case 10:
                str = "\\n";
                break;
              case 13:
                str = "\\r";
                break;
              case 34:
                str = '\\"';
                break;
              case 92:
                str = "\\\\";
                break;
              default:
                str = String.fromCharCode(chars[ii]);
                break;
            }
            source += str;
          }
          source += '";\n';
        });
        source += "    return str;\n";
        source += "  }\n";
        source += "}\n";
        return source;
      };
      this.generateObject = function generateObject(stringArg, rules, udts) {
        const obj = {};
        const ruleNames = [];
        const udtNames = [];
        const string = stringArg.slice(0);
        obj.grammarObject = "grammarObject";
        rules.forEach((rule) => {
          ruleNames.push(rule.lower);
        });
        ruleNames.sort();
        if (udts.length > 0) {
          udts.forEach((udtFunc) => {
            udtNames.push(udtFunc.lower);
          });
          udtNames.sort();
        }
        obj.callbacks = [];
        ruleNames.forEach((name) => {
          obj.callbacks[name] = false;
        });
        if (udts.length > 0) {
          udtNames.forEach((name) => {
            obj.callbacks[name] = false;
          });
        }
        obj.rules = rules;
        obj.udts = udts;
        obj.toString = function toStringFunc() {
          return string;
        };
        return obj;
      };
    };
  }
});

// node_modules/apg-js/src/apg-api/rule-attributes.js
var require_rule_attributes = __commonJS({
  "node_modules/apg-js/src/apg-api/rule-attributes.js"(exports, module) {
    module.exports = function exportRuleAttributes() {
      const id = require_identifiers();
      const thisFile = "rule-attributes.js";
      let state = null;
      function isEmptyOnly(attr) {
        if (attr.left || attr.nested || attr.right || attr.cyclic) {
          return false;
        }
        return attr.empty;
      }
      function isRecursive(attr) {
        if (attr.left || attr.nested || attr.right || attr.cyclic) {
          return true;
        }
        return false;
      }
      function isCatNested(attrs, count) {
        let i = 0;
        let j2 = 0;
        let k = 0;
        for (i = 0; i < count; i += 1) {
          if (attrs[i].nested) {
            return true;
          }
        }
        for (i = 0; i < count; i += 1) {
          if (attrs[i].right && !attrs[i].leaf) {
            for (j2 = i + 1; j2 < count; j2 += 1) {
              if (!isEmptyOnly(attrs[j2])) {
                return true;
              }
            }
          }
        }
        for (i = count - 1; i >= 0; i -= 1) {
          if (attrs[i].left && !attrs[i].leaf) {
            for (j2 = i - 1; j2 >= 0; j2 -= 1) {
              if (!isEmptyOnly(attrs[j2])) {
                return true;
              }
            }
          }
        }
        for (i = 0; i < count; i += 1) {
          if (!attrs[i].empty && !isRecursive(attrs[i])) {
            for (j2 = i + 1; j2 < count; j2 += 1) {
              if (isRecursive(attrs[j2])) {
                for (k = j2 + 1; k < count; k += 1) {
                  if (!attrs[k].empty && !isRecursive(attrs[k])) {
                    return true;
                  }
                }
              }
            }
          }
        }
        return false;
      }
      function isCatCyclic(attrs, count) {
        for (let i = 0; i < count; i += 1) {
          if (!attrs[i].cyclic) {
            return false;
          }
        }
        return true;
      }
      function isCatLeft(attrs, count) {
        for (let i = 0; i < count; i += 1) {
          if (attrs[i].left) {
            return true;
          }
          if (!attrs[i].empty) {
            return false;
          }
        }
        return false;
      }
      function isCatRight(attrs, count) {
        for (let i = count - 1; i >= 0; i -= 1) {
          if (attrs[i].right) {
            return true;
          }
          if (!attrs[i].empty) {
            return false;
          }
        }
        return false;
      }
      function isCatEmpty(attrs, count) {
        for (let i = 0; i < count; i += 1) {
          if (!attrs[i].empty) {
            return false;
          }
        }
        return true;
      }
      function isCatFinite(attrs, count) {
        for (let i = 0; i < count; i += 1) {
          if (!attrs[i].finite) {
            return false;
          }
        }
        return true;
      }
      function cat(stateArg, opcodes, opIndex, iAttr) {
        let i = 0;
        const opCat = opcodes[opIndex];
        const count = opCat.children.length;
        const childAttrs = [];
        for (i = 0; i < count; i += 1) {
          childAttrs.push(stateArg.attrGen());
        }
        for (i = 0; i < count; i += 1) {
          opEval(stateArg, opcodes, opCat.children[i], childAttrs[i]);
        }
        iAttr.left = isCatLeft(childAttrs, count);
        iAttr.right = isCatRight(childAttrs, count);
        iAttr.nested = isCatNested(childAttrs, count);
        iAttr.empty = isCatEmpty(childAttrs, count);
        iAttr.finite = isCatFinite(childAttrs, count);
        iAttr.cyclic = isCatCyclic(childAttrs, count);
      }
      function alt(stateArg, opcodes, opIndex, iAttr) {
        let i = 0;
        const opAlt = opcodes[opIndex];
        const count = opAlt.children.length;
        const childAttrs = [];
        for (i = 0; i < count; i += 1) {
          childAttrs.push(stateArg.attrGen());
        }
        for (i = 0; i < count; i += 1) {
          opEval(stateArg, opcodes, opAlt.children[i], childAttrs[i]);
        }
        iAttr.left = false;
        iAttr.right = false;
        iAttr.nested = false;
        iAttr.empty = false;
        iAttr.finite = false;
        iAttr.cyclic = false;
        for (i = 0; i < count; i += 1) {
          if (childAttrs[i].left) {
            iAttr.left = true;
          }
          if (childAttrs[i].nested) {
            iAttr.nested = true;
          }
          if (childAttrs[i].right) {
            iAttr.right = true;
          }
          if (childAttrs[i].empty) {
            iAttr.empty = true;
          }
          if (childAttrs[i].finite) {
            iAttr.finite = true;
          }
          if (childAttrs[i].cyclic) {
            iAttr.cyclic = true;
          }
        }
      }
      function bkr(stateArg, opcodes, opIndex, iAttr) {
        const opBkr = opcodes[opIndex];
        if (opBkr.index >= stateArg.ruleCount) {
          iAttr.empty = stateArg.udts[opBkr.index - stateArg.ruleCount].empty;
          iAttr.finite = true;
        } else {
          ruleAttrsEval(stateArg, opBkr.index, iAttr);
          iAttr.left = false;
          iAttr.nested = false;
          iAttr.right = false;
          iAttr.cyclic = false;
        }
      }
      function opEval(stateArg, opcodes, opIndex, iAttr) {
        stateArg.attrInit(iAttr);
        const opi = opcodes[opIndex];
        switch (opi.type) {
          case id.ALT:
            alt(stateArg, opcodes, opIndex, iAttr);
            break;
          case id.CAT:
            cat(stateArg, opcodes, opIndex, iAttr);
            break;
          case id.REP:
            opEval(stateArg, opcodes, opIndex + 1, iAttr);
            if (opi.min === 0) {
              iAttr.empty = true;
              iAttr.finite = true;
            }
            break;
          case id.RNM:
            ruleAttrsEval(stateArg, opcodes[opIndex].index, iAttr);
            break;
          case id.BKR:
            bkr(stateArg, opcodes, opIndex, iAttr);
            break;
          case id.AND:
          case id.NOT:
          case id.BKA:
          case id.BKN:
            opEval(stateArg, opcodes, opIndex + 1, iAttr);
            iAttr.empty = true;
            break;
          case id.TLS:
            iAttr.empty = !opcodes[opIndex].string.length;
            iAttr.finite = true;
            iAttr.cyclic = false;
            break;
          case id.TBS:
          case id.TRG:
            iAttr.empty = false;
            iAttr.finite = true;
            iAttr.cyclic = false;
            break;
          case id.UDT:
            iAttr.empty = opi.empty;
            iAttr.finite = true;
            iAttr.cyclic = false;
            break;
          case id.ABG:
          case id.AEN:
            iAttr.empty = true;
            iAttr.finite = true;
            iAttr.cyclic = false;
            break;
          default:
            throw new Error(`unknown opcode type: ${opi}`);
        }
      }
      function ruleAttrsEval(stateArg, ruleIndex, iAttr) {
        const attri = stateArg.attrsWorking[ruleIndex];
        if (attri.isComplete) {
          stateArg.attrCopy(iAttr, attri);
        } else if (!attri.isOpen) {
          attri.isOpen = true;
          opEval(stateArg, attri.rule.opcodes, 0, iAttr);
          attri.left = iAttr.left;
          attri.right = iAttr.right;
          attri.nested = iAttr.nested;
          attri.empty = iAttr.empty;
          attri.finite = iAttr.finite;
          attri.cyclic = iAttr.cyclic;
          attri.leaf = false;
          attri.isOpen = false;
          attri.isComplete = true;
        } else if (ruleIndex === stateArg.startRule) {
          if (ruleIndex === stateArg.startRule) {
            iAttr.left = true;
            iAttr.right = true;
            iAttr.cyclic = true;
            iAttr.leaf = true;
          }
        } else {
          iAttr.finite = true;
        }
      }
      const ruleAttributes = (stateArg) => {
        state = stateArg;
        let i = 0;
        let j2 = 0;
        const iAttr = state.attrGen();
        for (i = 0; i < state.ruleCount; i += 1) {
          for (j2 = 0; j2 < state.ruleCount; j2 += 1) {
            state.attrInit(state.attrsWorking[j2]);
          }
          state.startRule = i;
          ruleAttrsEval(state, i, iAttr);
          state.attrCopy(state.attrs[i], state.attrsWorking[i]);
        }
        state.attributesComplete = true;
        let attri = null;
        for (i = 0; i < state.ruleCount; i += 1) {
          attri = state.attrs[i];
          if (attri.left || !attri.finite || attri.cyclic) {
            const temp = state.attrGen(attri.rule);
            state.attrCopy(temp, attri);
            state.attrsErrors.push(temp);
            state.attrsErrorCount += 1;
          }
        }
      };
      const truth = (val) => val ? "t" : "f";
      const tError = (val) => val ? "e" : "f";
      const fError = (val) => val ? "t" : "e";
      const showAttr = (seq, index, attr, dep) => {
        let str = `${seq}:${index}:`;
        str += `${tError(attr.left)} `;
        str += `${truth(attr.nested)} `;
        str += `${truth(attr.right)} `;
        str += `${tError(attr.cyclic)} `;
        str += `${fError(attr.finite)} `;
        str += `${truth(attr.empty)}:`;
        str += `${state.typeToString(dep.recursiveType)}:`;
        str += dep.recursiveType === id.ATTR_MR ? dep.groupNumber : "-";
        str += `:${attr.rule.name}
`;
        return str;
      };
      const showLegend = () => {
        let str = "LEGEND - t=true, f=false, e=error\n";
        str += "sequence:rule index:left nested right cyclic finite empty:type:group number:rule name\n";
        return str;
      };
      const showAttributeErrors = () => {
        let attri = null;
        let depi = null;
        let str = "";
        str += "RULE ATTRIBUTES WITH ERRORS\n";
        str += showLegend();
        if (state.attrsErrorCount) {
          for (let i = 0; i < state.attrsErrorCount; i += 1) {
            attri = state.attrsErrors[i];
            depi = state.ruleDeps[attri.rule.index];
            str += showAttr(i, attri.rule.index, attri, depi);
          }
        } else {
          str += "<none>\n";
        }
        return str;
      };
      const show = (type) => {
        let i = 0;
        let ii = 0;
        let attri = null;
        let depi = null;
        let str = "";
        let { ruleIndexes } = state;
        if (type === 97) {
          ruleIndexes = state.ruleAlphaIndexes;
        } else if (type === 116) {
          ruleIndexes = state.ruleTypeIndexes;
        }
        for (i = 0; i < state.ruleCount; i += 1) {
          ii = ruleIndexes[i];
          attri = state.attrs[ii];
          depi = state.ruleDeps[ii];
          str += showAttr(i, ii, attri, depi);
        }
        return str;
      };
      const showAttributes = (order = "index") => {
        if (!state.attributesComplete) {
          throw new Error(`${thisFile}:showAttributes: attributes not available`);
        }
        let str = "";
        const leader = "RULE ATTRIBUTES\n";
        if (order.charCodeAt(0) === 97) {
          str += "alphabetical by rule name\n";
          str += leader;
          str += showLegend();
          str += show(97);
        } else if (order.charCodeAt(0) === 116) {
          str += "ordered by rule type\n";
          str += leader;
          str += showLegend();
          str += show(116);
        } else {
          str += "ordered by rule index\n";
          str += leader;
          str += showLegend();
          str += show();
        }
        return str;
      };
      return { ruleAttributes, showAttributes, showAttributeErrors };
    }();
  }
});

// node_modules/apg-js/src/apg-api/rule-dependencies.js
var require_rule_dependencies = __commonJS({
  "node_modules/apg-js/src/apg-api/rule-dependencies.js"(exports, module) {
    module.exports = (() => {
      const id = require_identifiers();
      let state = null;
      const scan = (ruleCount, ruleDeps, index, isScanned) => {
        let i = 0;
        let j2 = 0;
        const rdi = ruleDeps[index];
        isScanned[index] = true;
        const op = rdi.rule.opcodes;
        for (i = 0; i < op.length; i += 1) {
          const opi = op[i];
          if (opi.type === id.RNM) {
            rdi.refersTo[opi.index] = true;
            if (!isScanned[opi.index]) {
              scan(ruleCount, ruleDeps, opi.index, isScanned);
            }
            for (j2 = 0; j2 < ruleCount; j2 += 1) {
              if (ruleDeps[opi.index].refersTo[j2]) {
                rdi.refersTo[j2] = true;
              }
            }
          } else if (opi.type === id.UDT) {
            rdi.refersToUdt[opi.index] = true;
          } else if (opi.type === id.BKR) {
            if (opi.index < ruleCount) {
              rdi.refersTo[opi.index] = true;
              if (!isScanned[opi.index]) {
                scan(ruleCount, ruleDeps, opi.index, isScanned);
              }
            } else {
              rdi.refersToUdt[ruleCount - opi.index] = true;
            }
          }
        }
      };
      const ruleDependencies = (stateArg) => {
        state = stateArg;
        let i = 0;
        let j2 = 0;
        let groupCount = 0;
        let rdi = null;
        let rdj = null;
        let newGroup = false;
        state.dependenciesComplete = false;
        const isScanned = state.falseArray(state.ruleCount);
        for (i = 0; i < state.ruleCount; i += 1) {
          state.falsifyArray(isScanned);
          scan(state.ruleCount, state.ruleDeps, i, isScanned);
        }
        for (i = 0; i < state.ruleCount; i += 1) {
          for (j2 = 0; j2 < state.ruleCount; j2 += 1) {
            if (i !== j2) {
              if (state.ruleDeps[j2].refersTo[i]) {
                state.ruleDeps[i].referencedBy[j2] = true;
              }
            }
          }
        }
        for (i = 0; i < state.ruleCount; i += 1) {
          state.ruleDeps[i].recursiveType = id.ATTR_N;
          if (state.ruleDeps[i].refersTo[i]) {
            state.ruleDeps[i].recursiveType = id.ATTR_R;
          }
        }
        groupCount = -1;
        for (i = 0; i < state.ruleCount; i += 1) {
          rdi = state.ruleDeps[i];
          if (rdi.recursiveType === id.ATTR_R) {
            newGroup = true;
            for (j2 = 0; j2 < state.ruleCount; j2 += 1) {
              if (i !== j2) {
                rdj = state.ruleDeps[j2];
                if (rdj.recursiveType === id.ATTR_R) {
                  if (rdi.refersTo[j2] && rdj.refersTo[i]) {
                    if (newGroup) {
                      groupCount += 1;
                      rdi.recursiveType = id.ATTR_MR;
                      rdi.groupNumber = groupCount;
                      newGroup = false;
                    }
                    rdj.recursiveType = id.ATTR_MR;
                    rdj.groupNumber = groupCount;
                  }
                }
              }
            }
          }
        }
        state.isMutuallyRecursive = groupCount > -1;
        state.ruleAlphaIndexes.sort(state.compRulesAlpha);
        state.ruleTypeIndexes.sort(state.compRulesAlpha);
        state.ruleTypeIndexes.sort(state.compRulesType);
        if (state.isMutuallyRecursive) {
          state.ruleTypeIndexes.sort(state.compRulesGroup);
        }
        if (state.udtCount) {
          state.udtAlphaIndexes.sort(state.compUdtsAlpha);
        }
        state.dependenciesComplete = true;
      };
      const show = (type = null) => {
        let i = 0;
        let j2 = 0;
        let count = 0;
        let startSeg = 0;
        const maxRule = state.ruleCount - 1;
        const maxUdt = state.udtCount - 1;
        const lineLength = 100;
        let str = "";
        let pre = "";
        const toArrow = "=> ";
        const byArrow = "<= ";
        let first = false;
        let rdi = null;
        let { ruleIndexes } = state;
        let { udtIndexes } = state;
        if (type === 97) {
          ruleIndexes = state.ruleAlphaIndexes;
          udtIndexes = state.udtAlphaIndexes;
        } else if (type === 116) {
          ruleIndexes = state.ruleTypeIndexes;
          udtIndexes = state.udtAlphaIndexes;
        }
        for (i = 0; i < state.ruleCount; i += 1) {
          rdi = state.ruleDeps[ruleIndexes[i]];
          pre = `${ruleIndexes[i]}:${state.typeToString(rdi.recursiveType)}:`;
          if (state.isMutuallyRecursive) {
            pre += rdi.groupNumber > -1 ? rdi.groupNumber : "-";
            pre += ":";
          }
          pre += " ";
          str += `${pre + state.rules[ruleIndexes[i]].name}
`;
          first = true;
          count = 0;
          startSeg = str.length;
          str += pre;
          for (j2 = 0; j2 < state.ruleCount; j2 += 1) {
            if (rdi.refersTo[ruleIndexes[j2]]) {
              if (first) {
                str += toArrow;
                first = false;
                str += state.ruleDeps[ruleIndexes[j2]].rule.name;
              } else {
                str += `, ${state.ruleDeps[ruleIndexes[j2]].rule.name}`;
              }
              count += 1;
            }
            if (str.length - startSeg > lineLength && j2 !== maxRule) {
              str += `
${pre}${toArrow}`;
              startSeg = str.length;
            }
          }
          if (state.udtCount) {
            for (j2 = 0; j2 < state.udtCount; j2 += 1) {
              if (rdi.refersToUdt[udtIndexes[j2]]) {
                if (first) {
                  str += toArrow;
                  first = false;
                  str += state.udts[udtIndexes[j2]].name;
                } else {
                  str += `, ${state.udts[udtIndexes[j2]].name}`;
                }
                count += 1;
              }
              if (str.length - startSeg > lineLength && j2 !== maxUdt) {
                str += `
${pre}${toArrow}`;
                startSeg = str.length;
              }
            }
          }
          if (count === 0) {
            str += "=> <none>\n";
          }
          if (first === false) {
            str += "\n";
          }
          first = true;
          count = 0;
          startSeg = str.length;
          str += pre;
          for (j2 = 0; j2 < state.ruleCount; j2 += 1) {
            if (rdi.referencedBy[ruleIndexes[j2]]) {
              if (first) {
                str += byArrow;
                first = false;
                str += state.ruleDeps[ruleIndexes[j2]].rule.name;
              } else {
                str += `, ${state.ruleDeps[ruleIndexes[j2]].rule.name}`;
              }
              count += 1;
            }
            if (str.length - startSeg > lineLength && j2 !== maxRule) {
              str += `
${pre}${toArrow}`;
              startSeg = str.length;
            }
          }
          if (count === 0) {
            str += "<= <none>\n";
          }
          if (first === false) {
            str += "\n";
          }
          str += "\n";
        }
        return str;
      };
      const showRuleDependencies = (order = "index") => {
        let str = "RULE DEPENDENCIES(index:type:[group number:])\n";
        str += "=> refers to rule names\n";
        str += "<= referenced by rule names\n";
        if (!state.dependenciesComplete) {
          return str;
        }
        if (order.charCodeAt(0) === 97) {
          str += "alphabetical by rule name\n";
          str += show(97);
        } else if (order.charCodeAt(0) === 116) {
          str += "ordered by rule type\n";
          str += show(116);
        } else {
          str += "ordered by rule index\n";
          str += show(null);
        }
        return str;
      };
      return { ruleDependencies, showRuleDependencies };
    })();
  }
});

// node_modules/apg-js/src/apg-api/attributes.js
var require_attributes = __commonJS({
  "node_modules/apg-js/src/apg-api/attributes.js"(exports, module) {
    module.exports = function exportAttributes() {
      const id = require_identifiers();
      const { ruleAttributes, showAttributes, showAttributeErrors } = require_rule_attributes();
      const { ruleDependencies, showRuleDependencies } = require_rule_dependencies();
      class State {
        constructor(rules, udts) {
          this.rules = rules;
          this.udts = udts;
          this.ruleCount = rules.length;
          this.udtCount = udts.length;
          this.startRule = 0;
          this.dependenciesComplete = false;
          this.attributesComplete = false;
          this.isMutuallyRecursive = false;
          this.ruleIndexes = this.indexArray(this.ruleCount);
          this.ruleAlphaIndexes = this.indexArray(this.ruleCount);
          this.ruleTypeIndexes = this.indexArray(this.ruleCount);
          this.udtIndexes = this.indexArray(this.udtCount);
          this.udtAlphaIndexes = this.indexArray(this.udtCount);
          this.attrsErrorCount = 0;
          this.attrs = [];
          this.attrsErrors = [];
          this.attrsWorking = [];
          this.ruleDeps = [];
          for (let i = 0; i < this.ruleCount; i += 1) {
            this.attrs.push(this.attrGen(this.rules[i]));
            this.attrsWorking.push(this.attrGen(this.rules[i]));
            this.ruleDeps.push(this.rdGen(rules[i], this.ruleCount, this.udtCount));
          }
          this.compRulesAlpha = this.compRulesAlpha.bind(this);
          this.compUdtsAlpha = this.compUdtsAlpha.bind(this);
          this.compRulesType = this.compRulesType.bind(this);
          this.compRulesGroup = this.compRulesGroup.bind(this);
        }
        // eslint-disable-next-line class-methods-use-this
        attrGen(rule) {
          return {
            left: false,
            nested: false,
            right: false,
            empty: false,
            finite: false,
            cyclic: false,
            leaf: false,
            isOpen: false,
            isComplete: false,
            rule
          };
        }
        // eslint-disable-next-line class-methods-use-this
        attrInit(attr) {
          attr.left = false;
          attr.nested = false;
          attr.right = false;
          attr.empty = false;
          attr.finite = false;
          attr.cyclic = false;
          attr.leaf = false;
          attr.isOpen = false;
          attr.isComplete = false;
        }
        attrCopy(dst, src) {
          dst.left = src.left;
          dst.nested = src.nested;
          dst.right = src.right;
          dst.empty = src.empty;
          dst.finite = src.finite;
          dst.cyclic = src.cyclic;
          dst.leaf = src.leaf;
          dst.isOpen = src.isOpen;
          dst.isComplete = src.isComplete;
          dst.rule = src.rule;
        }
        rdGen(rule, ruleCount, udtCount) {
          const ret = {
            rule,
            recursiveType: id.ATTR_N,
            groupNumber: -1,
            refersTo: this.falseArray(ruleCount),
            refersToUdt: this.falseArray(udtCount),
            referencedBy: this.falseArray(ruleCount)
          };
          return ret;
        }
        typeToString(recursiveType) {
          switch (recursiveType) {
            case id.ATTR_N:
              return " N";
            case id.ATTR_R:
              return " R";
            case id.ATTR_MR:
              return "MR";
            default:
              return "UNKNOWN";
          }
        }
        falseArray(length) {
          const ret = [];
          if (length > 0) {
            for (let i = 0; i < length; i += 1) {
              ret.push(false);
            }
          }
          return ret;
        }
        falsifyArray(a) {
          for (let i = 0; i < a.length; i += 1) {
            a[i] = false;
          }
        }
        indexArray(length) {
          const ret = [];
          if (length > 0) {
            for (let i = 0; i < length; i += 1) {
              ret.push(i);
            }
          }
          return ret;
        }
        compRulesAlpha(left, right) {
          if (this.rules[left].lower < this.rules[right].lower) {
            return -1;
          }
          if (this.rules[left].lower > this.rules[right].lower) {
            return 1;
          }
          return 0;
        }
        compUdtsAlpha(left, right) {
          if (this.udts[left].lower < this.udts[right].lower) {
            return -1;
          }
          if (this.udts[left].lower > this.udts[right].lower) {
            return 1;
          }
          return 0;
        }
        compRulesType(left, right) {
          if (this.ruleDeps[left].recursiveType < this.ruleDeps[right].recursiveType) {
            return -1;
          }
          if (this.ruleDeps[left].recursiveType > this.ruleDeps[right].recursiveType) {
            return 1;
          }
          return 0;
        }
        compRulesGroup(left, right) {
          if (this.ruleDeps[left].recursiveType === id.ATTR_MR && this.ruleDeps[right].recursiveType === id.ATTR_MR) {
            if (this.ruleDeps[left].groupNumber < this.ruleDeps[right].groupNumber) {
              return -1;
            }
            if (this.ruleDeps[left].groupNumber > this.ruleDeps[right].groupNumber) {
              return 1;
            }
          }
          return 0;
        }
      }
      const attributes = function attributes2(rules = [], udts = [], lineMap = [], errors = []) {
        const state = new State(rules, udts);
        ruleDependencies(state);
        ruleAttributes(state);
        if (state.attrsErrorCount) {
          errors.push({ line: 0, char: 0, msg: `${state.attrsErrorCount} attribute errors` });
        }
        return state.attrsErrorCount;
      };
      return { attributes, showAttributes, showAttributeErrors, showRuleDependencies };
    }();
  }
});

// node_modules/apg-js/src/apg-api/show-rules.js
var require_show_rules = __commonJS({
  "node_modules/apg-js/src/apg-api/show-rules.js"(exports, module) {
    module.exports = function exfn() {
      const thisFileName = "show-rules.js";
      const showRules = function showRules2(rulesIn = [], udtsIn = [], order = "index") {
        const thisFuncName = "showRules";
        let alphaArray = [];
        let udtAlphaArray = [];
        const indexArray = [];
        const udtIndexArray = [];
        const rules = rulesIn;
        const udts = udtsIn;
        const ruleCount = rulesIn.length;
        const udtCount = udtsIn.length;
        let str = "RULE/UDT NAMES";
        let i;
        function compRulesAlpha(left, right) {
          if (rules[left].lower < rules[right].lower) {
            return -1;
          }
          if (rules[left].lower > rules[right].lower) {
            return 1;
          }
          return 0;
        }
        function compUdtsAlpha(left, right) {
          if (udts[left].lower < udts[right].lower) {
            return -1;
          }
          if (udts[left].lower > udts[right].lower) {
            return 1;
          }
          return 0;
        }
        if (!(Array.isArray(rulesIn) && rulesIn.length)) {
          throw new Error(`${thisFileName}:${thisFuncName}: rules arg must be array with length > 0`);
        }
        if (!Array.isArray(udtsIn)) {
          throw new Error(`${thisFileName}:${thisFuncName}: udts arg must be array`);
        }
        for (i = 0; i < ruleCount; i += 1) {
          indexArray.push(i);
        }
        alphaArray = indexArray.slice(0);
        alphaArray.sort(compRulesAlpha);
        if (udtCount) {
          for (i = 0; i < udtCount; i += 1) {
            udtIndexArray.push(i);
          }
          udtAlphaArray = udtIndexArray.slice(0);
          udtAlphaArray.sort(compUdtsAlpha);
        }
        if (order.charCodeAt(0) === 97) {
          str += " - alphabetical by rule/UDT name\n";
          for (i = 0; i < ruleCount; i += 1) {
            str += `${i}: ${alphaArray[i]}: ${rules[alphaArray[i]].name}
`;
          }
          if (udtCount) {
            for (i = 0; i < udtCount; i += 1) {
              str += `${i}: ${udtAlphaArray[i]}: ${udts[udtAlphaArray[i]].name}
`;
            }
          }
        } else {
          str += " - ordered by rule/UDT index\n";
          for (i = 0; i < ruleCount; i += 1) {
            str += `${i}: ${rules[i].name}
`;
          }
          if (udtCount) {
            for (i = 0; i < udtCount; i += 1) {
              str += `${i}: ${udts[i].name}
`;
            }
          }
        }
        return str;
      };
      return showRules;
    }();
  }
});

// node_modules/apg-js/src/apg-api/api.js
var require_api = __commonJS({
  "node_modules/apg-js/src/apg-api/api.js"(exports, module) {
    module.exports = function api(src) {
      const { Buffer } = require_buffer();
      const thisFileName = "api.js: ";
      const thisObject = this;
      const apglib = require_node_exports();
      const converter = require_converter();
      const scanner = require_scanner();
      const parser = new (require_parser2())();
      const { attributes, showAttributes, showAttributeErrors, showRuleDependencies } = require_attributes();
      const showRules = require_show_rules();
      const abnfToHtml = function abnfToHtml2(chars, beg, len) {
        const NORMAL = 0;
        const CONTROL = 1;
        const INVALID = 2;
        const CONTROL_BEG = `<span class="${apglib.style.CLASS_CTRLCHAR}">`;
        const CONTROL_END = "</span>";
        const INVALID_BEG = `<span class="${apglib.style.CLASS_NOMATCH}">`;
        const INVALID_END = "</span>";
        let end;
        let html = "";
        const TRUE = true;
        while (TRUE) {
          if (!Array.isArray(chars) || chars.length === 0) {
            break;
          }
          if (typeof beg !== "number") {
            throw new Error("abnfToHtml: beg must be type number");
          }
          if (beg >= chars.length) {
            break;
          }
          if (typeof len !== "number" || beg + len >= chars.length) {
            end = chars.length;
          } else {
            end = beg + len;
          }
          let state = NORMAL;
          for (let i = beg; i < end; i += 1) {
            const ch = chars[i];
            if (ch >= 32 && ch <= 126) {
              if (state === CONTROL) {
                html += CONTROL_END;
                state = NORMAL;
              } else if (state === INVALID) {
                html += INVALID_END;
                state = NORMAL;
              }
              switch (ch) {
                case 32:
                  html += "&nbsp;";
                  break;
                case 60:
                  html += "&lt;";
                  break;
                case 62:
                  html += "&gt;";
                  break;
                case 38:
                  html += "&amp;";
                  break;
                case 34:
                  html += "&quot;";
                  break;
                case 39:
                  html += "&#039;";
                  break;
                case 92:
                  html += "&#092;";
                  break;
                default:
                  html += String.fromCharCode(ch);
                  break;
              }
            } else if (ch === 9 || ch === 10 || ch === 13) {
              if (state === NORMAL) {
                html += CONTROL_BEG;
                state = CONTROL;
              } else if (state === INVALID) {
                html += INVALID_END + CONTROL_BEG;
                state = CONTROL;
              }
              if (ch === 9) {
                html += "TAB";
              }
              if (ch === 10) {
                html += "LF";
              }
              if (ch === 13) {
                html += "CR";
              }
            } else {
              if (state === NORMAL) {
                html += INVALID_BEG;
                state = INVALID;
              } else if (state === CONTROL) {
                html += CONTROL_END + INVALID_BEG;
                state = INVALID;
              }
              html += `\\x${apglib.utils.charToHex(ch)}`;
            }
          }
          if (state === INVALID) {
            html += INVALID_END;
          }
          if (state === CONTROL) {
            html += CONTROL_END;
          }
          break;
        }
        return html;
      };
      const abnfToAscii = function abnfToAscii2(chars, beg, len) {
        let str = "";
        for (let i = beg; i < beg + len; i += 1) {
          const ch = chars[i];
          if (ch >= 32 && ch <= 126) {
            str += String.fromCharCode(ch);
          } else {
            switch (ch) {
              case 9:
                str += "\\t";
                break;
              case 10:
                str += "\\n";
                break;
              case 13:
                str += "\\r";
                break;
              default:
                str += "\\unknown";
                break;
            }
          }
        }
        return str;
      };
      const linesToAscii = function linesToAscii2(lines) {
        let str = "Annotated Input Grammar";
        lines.forEach((val) => {
          str += "\n";
          str += `line no: ${val.lineNo}`;
          str += ` : char index: ${val.beginChar}`;
          str += ` : length: ${val.length}`;
          str += ` : abnf: ${abnfToAscii(thisObject.chars, val.beginChar, val.length)}`;
        });
        str += "\n";
        return str;
      };
      const linesToHtml = function linesToHtml2(lines) {
        let html = "";
        html += `<table class="${apglib.style.CLASS_GRAMMAR}">
`;
        const title = "Annotated Input Grammar";
        html += `<caption>${title}</caption>
`;
        html += "<tr>";
        html += "<th>line<br>no.</th><th>first<br>char</th><th><br>length</th><th><br>text</th>";
        html += "</tr>\n";
        lines.forEach((val) => {
          html += "<tr>";
          html += `<td>${val.lineNo}`;
          html += `</td><td>${val.beginChar}`;
          html += `</td><td>${val.length}`;
          html += `</td><td>${abnfToHtml(thisObject.chars, val.beginChar, val.length)}`;
          html += "</td>";
          html += "</tr>\n";
        });
        html += "</table>\n";
        return html;
      };
      const errorsToHtml = function errorsToHtml2(errors, lines, chars, title) {
        const [style] = apglib;
        let html = "";
        const errorArrow = `<span class="${style.CLASS_NOMATCH}">&raquo;</span>`;
        html += `<p><table class="${style.CLASS_GRAMMAR}">
`;
        if (title && typeof title === "string") {
          html += `<caption>${title}</caption>
`;
        }
        html += "<tr><th>line<br>no.</th><th>line<br>offset</th><th>error<br>offset</th><th><br>text</th></tr>\n";
        errors.forEach((val) => {
          let line;
          let relchar;
          let beg;
          let end;
          let text;
          let prefix = "";
          let suffix = "";
          if (lines.length === 0) {
            text = errorArrow;
            relchar = 0;
          } else {
            line = lines[val.line];
            beg = line.beginChar;
            if (val.char > beg) {
              prefix = abnfToHtml(chars, beg, val.char - beg);
            }
            beg = val.char;
            end = line.beginChar + line.length;
            if (beg < end) {
              suffix = abnfToHtml(chars, beg, end - beg);
            }
            text = prefix + errorArrow + suffix;
            relchar = val.char - line.beginChar;
            html += "<tr>";
            html += `<td>${val.line}</td><td>${line.beginChar}</td><td>${relchar}</td><td>${text}</td>`;
            html += "</tr>\n";
            html += "<tr>";
            html += `<td colspan="3"></td><td>&uarr;:&nbsp;${apglib.utils.stringToAsciiHtml(val.msg)}</td>`;
            html += "</tr>\n";
          }
        });
        html += "</table></p>\n";
        return html;
      };
      const errorsToAscii = function errorsToAscii2(errors, lines, chars) {
        let str;
        let line;
        let beg;
        let len;
        str = "";
        errors.forEach((error) => {
          line = lines[error.line];
          str += `${line.lineNo}: `;
          str += `${line.beginChar}: `;
          str += `${error.char - line.beginChar}: `;
          beg = line.beginChar;
          len = error.char - line.beginChar;
          str += abnfToAscii(chars, beg, len);
          str += " >> ";
          beg = error.char;
          len = line.beginChar + line.length - error.char;
          str += abnfToAscii(chars, beg, len);
          str += "\n";
          str += `${line.lineNo}: `;
          str += `${line.beginChar}: `;
          str += `${error.char - line.beginChar}: `;
          str += "error: ";
          str += error.msg;
          str += "\n";
        });
        return str;
      };
      let isScanned = false;
      let isParsed = false;
      let isTranslated = false;
      let haveAttributes = false;
      let attributeErrors = 0;
      let lineMap;
      this.errors = [];
      if (Buffer.isBuffer(src)) {
        this.chars = converter.decode("BINARY", src);
      } else if (Array.isArray(src)) {
        this.chars = src.slice();
      } else if (typeof src === "string") {
        this.chars = converter.decode("STRING", src);
      } else {
        throw new Error(`${thisFileName}input source is not a string, byte Buffer or character array`);
      }
      this.sabnf = converter.encode("STRING", this.chars);
      this.scan = function scan(strict, trace) {
        this.lines = scanner(this.chars, this.errors, strict, trace);
        isScanned = true;
      };
      this.parse = function parse(strict, lite, trace) {
        if (!isScanned) {
          throw new Error(`${thisFileName}grammar not scanned`);
        }
        parser.syntax(this.chars, this.lines, this.errors, strict, lite, trace);
        isParsed = true;
      };
      this.translate = function translate() {
        if (!isParsed) {
          throw new Error(`${thisFileName}grammar not scanned and parsed`);
        }
        const ret = parser.semantic(this.chars, this.lines, this.errors);
        if (this.errors.length === 0) {
          this.rules = ret.rules;
          this.udts = ret.udts;
          lineMap = ret.lineMap;
          isTranslated = true;
        }
      };
      this.attributes = function attrs() {
        if (!isTranslated) {
          throw new Error(`${thisFileName}grammar not scanned, parsed and translated`);
        }
        attributeErrors = attributes(this.rules, this.udts, lineMap, this.errors);
        haveAttributes = true;
        return attributeErrors;
      };
      this.generate = function generate(strict) {
        this.lines = scanner(this.chars, this.errors, strict);
        if (this.errors.length) {
          return;
        }
        parser.syntax(this.chars, this.lines, this.errors, strict);
        if (this.errors.length) {
          return;
        }
        const ret = parser.semantic(this.chars, this.lines, this.errors);
        if (this.errors.length) {
          return;
        }
        this.rules = ret.rules;
        this.udts = ret.udts;
        lineMap = ret.lineMap;
        attributeErrors = attributes(this.rules, this.udts, lineMap, this.errors);
        haveAttributes = true;
      };
      this.displayRules = function displayRules(order = "index") {
        if (!isTranslated) {
          throw new Error(`${thisFileName}grammar not scanned, parsed and translated`);
        }
        return showRules(this.rules, this.udts, order);
      };
      this.displayRuleDependencies = function displayRuleDependencies(order = "index") {
        if (!haveAttributes) {
          throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);
        }
        return showRuleDependencies(order);
      };
      this.displayAttributes = function displayAttributes(order = "index") {
        if (!haveAttributes) {
          throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);
        }
        if (attributeErrors) {
          showAttributeErrors(order);
        }
        return showAttributes(order);
      };
      this.displayAttributeErrors = function displayAttributeErrors() {
        if (!haveAttributes) {
          throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);
        }
        return showAttributeErrors();
      };
      this.toSource = function toSource(config = void 0) {
        if (!haveAttributes) {
          throw new Error(`${thisFileName}can't generate parser source - must be preceeded by call to attributes()`);
        }
        if (attributeErrors) {
          throw new Error(`${thisFileName}can't generate parser source - attributes have ${attributeErrors} errors`);
        }
        return parser.generateSource(this.chars, this.lines, this.rules, this.udts, config);
      };
      this.toObject = function toObject() {
        if (!haveAttributes) {
          throw new Error(`${thisFileName}can't generate parser source - must be preceeded by call to attributes()`);
        }
        if (attributeErrors) {
          throw new Error(`${thisFileName}can't generate parser source - attributes have ${attributeErrors} errors`);
        }
        return parser.generateObject(this.sabnf, this.rules, this.udts);
      };
      this.errorsToAscii = function errorsToAsciiFunc() {
        return errorsToAscii(this.errors, this.lines, this.chars);
      };
      this.errorsToHtml = function errorsToHtmlFunc(title) {
        return errorsToHtml(this.errors, this.lines, this.chars, title);
      };
      this.linesToAscii = function linesToAsciiFunc() {
        return linesToAscii(this.lines);
      };
      this.linesToHtml = function linesToHtmlFunc() {
        return linesToHtml(this.lines);
      };
    };
  }
});

// node_modules/@noble/hashes/_assert.js
var require_assert = __commonJS({
  "node_modules/@noble/hashes/_assert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
    function number(n) {
      if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`Wrong positive integer: ${n}`);
    }
    exports.number = number;
    function bool(b) {
      if (typeof b !== "boolean")
        throw new Error(`Expected boolean, not ${b}`);
    }
    exports.bool = bool;
    function bytes(b, ...lengths) {
      if (!(b instanceof Uint8Array))
        throw new Error("Expected Uint8Array");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
    }
    exports.bytes = bytes;
    function hash(hash2) {
      if (typeof hash2 !== "function" || typeof hash2.create !== "function")
        throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number(hash2.outputLen);
      number(hash2.blockLen);
    }
    exports.hash = hash;
    function exists(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    exports.exists = exists;
    function output(out, instance) {
      bytes(out);
      const min = instance.outputLen;
      if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
    }
    exports.output = output;
    var assert = { number, bool, bytes, hash, exists, output };
    exports.default = assert;
  }
});

// node_modules/@noble/hashes/_u64.js
var require_u64 = __commonJS({
  "node_modules/@noble/hashes/_u64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;
    var U32_MASK64 = BigInt(2 ** 32 - 1);
    var _32n = BigInt(32);
    function fromBig(n, le2 = false) {
      if (le2)
        return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
      return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    exports.fromBig = fromBig;
    function split(lst, le2 = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le2);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    exports.split = split;
    var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
    exports.toBig = toBig;
    var shrSH = (h, _l, s) => h >>> s;
    exports.shrSH = shrSH;
    var shrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports.shrSL = shrSL;
    var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
    exports.rotrSH = rotrSH;
    var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports.rotrSL = rotrSL;
    var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
    exports.rotrBH = rotrBH;
    var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
    exports.rotrBL = rotrBL;
    var rotr32H = (_h, l) => l;
    exports.rotr32H = rotr32H;
    var rotr32L = (h, _l) => h;
    exports.rotr32L = rotr32L;
    var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
    exports.rotlSH = rotlSH;
    var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
    exports.rotlSL = rotlSL;
    var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
    exports.rotlBH = rotlBH;
    var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
    exports.rotlBL = rotlBL;
    function add(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    exports.add = add;
    var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports.add3L = add3L;
    var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports.add3H = add3H;
    var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports.add4L = add4L;
    var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports.add4H = add4H;
    var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports.add5L = add5L;
    var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports.add5H = add5H;
    var u64 = {
      fromBig,
      split,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH,
      rotlSL,
      rotlBH,
      rotlBL,
      add,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    exports.default = u64;
  }
});

// node_modules/@noble/hashes/crypto.js
var require_crypto = __commonJS({
  "node_modules/@noble/hashes/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = void 0;
    exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  }
});

// node_modules/@noble/hashes/utils.js
var require_utils = __commonJS({
  "node_modules/@noble/hashes/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
    var crypto_1 = require_crypto();
    var u8a = (a) => a instanceof Uint8Array;
    var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.u8 = u8;
    var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports.u32 = u32;
    var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.createView = createView;
    var rotr = (word, shift) => word << 32 - shift | word >>> shift;
    exports.rotr = rotr;
    exports.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    if (!exports.isLE)
      throw new Error("Non little-endian hardware is not supported");
    var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      if (!u8a(bytes))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    exports.bytesToHex = bytesToHex;
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array = new Uint8Array(len / 2);
      for (let i = 0; i < array.length; i++) {
        const j2 = i * 2;
        const hexByte = hex.slice(j2, j2 + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array[i] = byte;
      }
      return array;
    }
    exports.hexToBytes = hexToBytes;
    var nextTick = async () => {
    };
    exports.nextTick = nextTick;
    async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff;
      }
    }
    exports.asyncLoop = asyncLoop;
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports.utf8ToBytes = utf8ToBytes;
    function toBytes(data) {
      if (typeof data === "string")
        data = utf8ToBytes(data);
      if (!u8a(data))
        throw new Error(`expected Uint8Array, got ${typeof data}`);
      return data;
    }
    exports.toBytes = toBytes;
    function concatBytes(...arrays) {
      const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad = 0;
      arrays.forEach((a) => {
        if (!u8a(a))
          throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
      });
      return r;
    }
    exports.concatBytes = concatBytes;
    var Hash = class {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    };
    exports.Hash = Hash;
    var toStr = {}.toString;
    function checkOpts(defaults, opts) {
      if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    exports.checkOpts = checkOpts;
    function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    exports.wrapConstructor = wrapConstructor;
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
    function wrapXOFConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
    function randomBytes(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    exports.randomBytes = randomBytes;
  }
});

// node_modules/@noble/hashes/sha3.js
var require_sha3 = __commonJS({
  "node_modules/@noble/hashes/sha3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;
    var _assert_js_1 = require_assert();
    var _u64_js_1 = require_u64();
    var utils_js_1 = require_utils();
    var [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _7n = BigInt(7);
    var _256n = BigInt(256);
    var _0x71n = BigInt(113);
    for (let round = 0, R2 = _1n, x2 = 1, y = 0; round < 24; round++) {
      [x2, y] = [y, (2 * x2 + 3 * y) % 5];
      SHA3_PI.push(2 * (5 * y + x2));
      SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n;
      for (let j2 = 0; j2 < 7; j2++) {
        R2 = (R2 << _1n ^ (R2 >> _7n) * _0x71n) % _256n;
        if (R2 & _2n)
          t ^= _1n << (_1n << BigInt(j2)) - _1n;
      }
      _SHA3_IOTA.push(t);
    }
    var [SHA3_IOTA_H, SHA3_IOTA_L] = (0, _u64_js_1.split)(_SHA3_IOTA, true);
    var rotlH = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);
    var rotlL = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);
    function keccakP(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x2 = 0; x2 < 10; x2++)
          B[x2] = s[x2] ^ s[x2 + 10] ^ s[x2 + 20] ^ s[x2 + 30] ^ s[x2 + 40];
        for (let x2 = 0; x2 < 10; x2 += 2) {
          const idx1 = (x2 + 8) % 10;
          const idx0 = (x2 + 2) % 10;
          const B0 = B[idx0];
          const B1 = B[idx0 + 1];
          const Th = rotlH(B0, B1, 1) ^ B[idx1];
          const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
          for (let y = 0; y < 50; y += 10) {
            s[x2 + y] ^= Th;
            s[x2 + y + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
          const shift = SHA3_ROTL[t];
          const Th = rotlH(curH, curL, shift);
          const Tl = rotlL(curH, curL, shift);
          const PI = SHA3_PI[t];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th;
          s[PI + 1] = Tl;
        }
        for (let y = 0; y < 50; y += 10) {
          for (let x2 = 0; x2 < 10; x2++)
            B[x2] = s[y + x2];
          for (let x2 = 0; x2 < 10; x2++)
            s[y + x2] ^= ~B[(x2 + 2) % 10] & B[(x2 + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
      }
      B.fill(0);
    }
    exports.keccakP = keccakP;
    var Keccak = class _Keccak extends utils_js_1.Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.number)(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
      }
      keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        (0, _assert_js_1.exists)(this, false);
        (0, _assert_js_1.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes) {
        (0, _assert_js_1.number)(bytes);
        return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
        (0, _assert_js_1.output)(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    exports.Keccak = Keccak;
    var gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
    exports.sha3_224 = gen(6, 144, 224 / 8);
    exports.sha3_256 = gen(6, 136, 256 / 8);
    exports.sha3_384 = gen(6, 104, 384 / 8);
    exports.sha3_512 = gen(6, 72, 512 / 8);
    exports.keccak_224 = gen(1, 144, 224 / 8);
    exports.keccak_256 = gen(1, 136, 256 / 8);
    exports.keccak_384 = gen(1, 104, 384 / 8);
    exports.keccak_512 = gen(1, 72, 512 / 8);
    var genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    exports.shake128 = genShake(31, 168, 128 / 8);
    exports.shake256 = genShake(31, 136, 256 / 8);
  }
});

// node_modules/@spruceid/siwe-parser/dist/utils.js
var require_utils2 = __commonJS({
  "node_modules/@spruceid/siwe-parser/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIntegerNumber = exports.isEIP55Address = void 0;
    var sha3_1 = require_sha3();
    var utils_1 = require_utils();
    var isEIP55Address = (address) => {
      if (address.length != 42) {
        return false;
      }
      const lowerAddress = `${address}`.toLowerCase().replace("0x", "");
      const hash = (0, utils_1.bytesToHex)((0, sha3_1.keccak_256)(lowerAddress));
      let ret = "0x";
      for (let i = 0; i < lowerAddress.length; i++) {
        if (parseInt(hash[i], 16) >= 8) {
          ret += lowerAddress[i].toUpperCase();
        } else {
          ret += lowerAddress[i];
        }
      }
      return address === ret;
    };
    exports.isEIP55Address = isEIP55Address;
    var parseIntegerNumber = (number) => {
      const parsed = parseInt(number);
      if (isNaN(parsed))
        throw new Error("Invalid number.");
      if (parsed === Infinity)
        throw new Error("Invalid number.");
      return parsed;
    };
    exports.parseIntegerNumber = parseIntegerNumber;
  }
});

// node_modules/@spruceid/siwe-parser/dist/abnf.js
var require_abnf = __commonJS({
  "node_modules/@spruceid/siwe-parser/dist/abnf.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParsedMessage = void 0;
    var api_1 = __importDefault2(require_api());
    var node_exports_1 = __importDefault2(require_node_exports());
    var utils_1 = require_utils2();
    var GRAMMAR = `
sign-in-with-ethereum =
    [ scheme "://" ] domain %s" wants you to sign in with your Ethereum account:" LF
    address LF
    LF
    [ statement LF ]
    LF
    %s"URI: " URI LF
    %s"Version: " version LF
    %s"Chain ID: " chain-id LF
    %s"Nonce: " nonce LF
    %s"Issued At: " issued-at
    [ LF %s"Expiration Time: " expiration-time ]
    [ LF %s"Not Before: " not-before ]
    [ LF %s"Request ID: " request-id ]
    [ LF %s"Resources:"
    resources ]

domain = authority

address = "0x" 40*40HEXDIG
    ; Must also conform to captilization
    ; checksum encoding specified in EIP-55
    ; where applicable (EOAs).

statement = 1*( reserved / unreserved / " " )
    ; The purpose is to exclude LF (line breaks).

version = "1"

nonce = 8*( ALPHA / DIGIT )

issued-at = date-time
expiration-time = date-time
not-before = date-time

request-id = *pchar

chain-id = 1*DIGIT
    ; See EIP-155 for valid CHAIN_IDs.

resources = *( LF resource )

resource = "- " URI

; ------------------------------------------------------------------------------
; RFC 3986

URI           = scheme ":" hier-part [ "?" query ] [ "#" fragment ]

hier-part     = "//" authority path-abempty
              / path-absolute
              / path-rootless
              / path-empty

scheme        = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )

authority     = [ userinfo "@" ] host [ ":" port ]
userinfo      = *( unreserved / pct-encoded / sub-delims / ":" )
host          = IP-literal / IPv4address / reg-name
port          = *DIGIT

IP-literal    = "[" ( IPv6address / IPvFuture  ) "]"

IPvFuture     = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )

IPv6address   =                            6( h16 ":" ) ls32
              /                       "::" 5( h16 ":" ) ls32
              / [               h16 ] "::" 4( h16 ":" ) ls32
              / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
              / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
              / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
              / [ *4( h16 ":" ) h16 ] "::"              ls32
              / [ *5( h16 ":" ) h16 ] "::"              h16
              / [ *6( h16 ":" ) h16 ] "::"

h16           = 1*4HEXDIG
ls32          = ( h16 ":" h16 ) / IPv4address
IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
dec-octet     = DIGIT                 ; 0-9
                 / %x31-39 DIGIT         ; 10-99
                 / "1" 2DIGIT            ; 100-199
                 / "2" %x30-34 DIGIT     ; 200-249
                 / "25" %x30-35          ; 250-255

reg-name      = *( unreserved / pct-encoded / sub-delims )

path-abempty  = *( "/" segment )
path-absolute = "/" [ segment-nz *( "/" segment ) ]
path-rootless = segment-nz *( "/" segment )
path-empty    = 0pchar

segment       = *pchar
segment-nz    = 1*pchar

pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"

query         = *( pchar / "/" / "?" )

fragment      = *( pchar / "/" / "?" )

pct-encoded   = "%" HEXDIG HEXDIG

unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
reserved      = gen-delims / sub-delims
gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"
sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
              / "*" / "+" / "," / ";" / "="

; ------------------------------------------------------------------------------
; RFC 3339

date-fullyear   = 4DIGIT
date-month      = 2DIGIT  ; 01-12
date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on
                          ; month/year
time-hour       = 2DIGIT  ; 00-23
time-minute     = 2DIGIT  ; 00-59
time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second
                          ; rules
time-secfrac    = "." 1*DIGIT
time-numoffset  = ("+" / "-") time-hour ":" time-minute
time-offset     = "Z" / time-numoffset

partial-time    = time-hour ":" time-minute ":" time-second
                  [time-secfrac]
full-date       = date-fullyear "-" date-month "-" date-mday
full-time       = partial-time time-offset

date-time       = full-date "T" full-time

; ------------------------------------------------------------------------------
; RFC 5234

ALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z
LF             =  %x0A
                  ; linefeed
DIGIT          =  %x30-39
                  ; 0-9
HEXDIG         =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
`;
    var GrammarApi = class {
      static generateApi() {
        const api = new api_1.default(GRAMMAR);
        api.generate();
        if (api.errors.length) {
          console.error(api.errorsToAscii());
          console.error(api.linesToAscii());
          console.log(api.displayAttributeErrors());
          throw new Error(`ABNF grammar has errors`);
        }
        return api.toObject();
      }
    };
    _a = GrammarApi;
    GrammarApi.grammarObj = _a.generateApi();
    var ParsedMessage = class {
      constructor(msg) {
        const parser = new node_exports_1.default.parser();
        parser.ast = new node_exports_1.default.ast();
        const id = node_exports_1.default.ids;
        const scheme = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE && phraseIndex === 0) {
            data.scheme = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
          }
          return ret;
        };
        parser.ast.callbacks.scheme = scheme;
        const domain = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            data.domain = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
          }
          return ret;
        };
        parser.ast.callbacks.domain = domain;
        const address = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            data.address = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
          }
          return ret;
        };
        parser.ast.callbacks.address = address;
        const statement = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            data.statement = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
          }
          return ret;
        };
        parser.ast.callbacks.statement = statement;
        const uri = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            if (!data.uri) {
              data.uri = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
            }
          }
          return ret;
        };
        parser.ast.callbacks.uri = uri;
        const version = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            data.version = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
          }
          return ret;
        };
        parser.ast.callbacks.version = version;
        const chainId = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            data.chainId = (0, utils_1.parseIntegerNumber)(node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength));
          }
          return ret;
        };
        parser.ast.callbacks["chain-id"] = chainId;
        const nonce = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            data.nonce = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
          }
          return ret;
        };
        parser.ast.callbacks.nonce = nonce;
        const issuedAt = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            data.issuedAt = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
          }
          return ret;
        };
        parser.ast.callbacks["issued-at"] = issuedAt;
        const expirationTime = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            data.expirationTime = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
          }
          return ret;
        };
        parser.ast.callbacks["expiration-time"] = expirationTime;
        const notBefore = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            data.notBefore = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
          }
          return ret;
        };
        parser.ast.callbacks["not-before"] = notBefore;
        const requestId = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            data.requestId = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
          }
          return ret;
        };
        parser.ast.callbacks["request-id"] = requestId;
        const resources = function(state, chars, phraseIndex, phraseLength, data) {
          const ret = id.SEM_OK;
          if (state === id.SEM_PRE) {
            data.resources = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength).slice(3).split("\n- ");
          }
          return ret;
        };
        parser.ast.callbacks.resources = resources;
        const result = parser.parse(GrammarApi.grammarObj, "sign-in-with-ethereum", msg);
        if (!result.success) {
          throw new Error(`Invalid message: ${JSON.stringify(result)}`);
        }
        const elements = {};
        parser.ast.translate(elements);
        for (const [key, value] of Object.entries(elements)) {
          this[key] = value;
        }
        if (this.domain.length === 0) {
          throw new Error("Domain cannot be empty.");
        }
        if (!(0, utils_1.isEIP55Address)(this.address)) {
          throw new Error("Address not conformant to EIP-55.");
        }
      }
    };
    exports.ParsedMessage = ParsedMessage;
  }
});

// node_modules/@spruceid/siwe-parser/dist/parsers.js
var require_parsers = __commonJS({
  "node_modules/@spruceid/siwe-parser/dist/parsers.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParsedMessage = void 0;
    var abnf_1 = require_abnf();
    Object.defineProperty(exports, "ParsedMessage", { enumerable: true, get: function() {
      return abnf_1.ParsedMessage;
    } });
    __exportStar2(require_utils2(), exports);
  }
});

// node_modules/valid-url/index.js
var require_valid_url = __commonJS({
  "node_modules/valid-url/index.js"(exports, module) {
    (function(module2) {
      "use strict";
      module2.exports.is_uri = is_iri;
      module2.exports.is_http_uri = is_http_iri;
      module2.exports.is_https_uri = is_https_iri;
      module2.exports.is_web_uri = is_web_iri;
      module2.exports.isUri = is_iri;
      module2.exports.isHttpUri = is_http_iri;
      module2.exports.isHttpsUri = is_https_iri;
      module2.exports.isWebUri = is_web_iri;
      var splitUri = function(uri) {
        var splitted = uri.match(/(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/);
        return splitted;
      };
      function is_iri(value) {
        if (!value) {
          return;
        }
        if (/[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i.test(value))
          return;
        if (/%[^0-9a-f]/i.test(value))
          return;
        if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value))
          return;
        var splitted = [];
        var scheme = "";
        var authority = "";
        var path5 = "";
        var query = "";
        var fragment = "";
        var out = "";
        splitted = splitUri(value);
        scheme = splitted[1];
        authority = splitted[2];
        path5 = splitted[3];
        query = splitted[4];
        fragment = splitted[5];
        if (!(scheme && scheme.length && path5.length >= 0))
          return;
        if (authority && authority.length) {
          if (!(path5.length === 0 || /^\//.test(path5)))
            return;
        } else {
          if (/^\/\//.test(path5))
            return;
        }
        if (!/^[a-z][a-z0-9\+\-\.]*$/.test(scheme.toLowerCase()))
          return;
        out += scheme + ":";
        if (authority && authority.length) {
          out += "//" + authority;
        }
        out += path5;
        if (query && query.length) {
          out += "?" + query;
        }
        if (fragment && fragment.length) {
          out += "#" + fragment;
        }
        return out;
      }
      function is_http_iri(value, allowHttps) {
        if (!is_iri(value)) {
          return;
        }
        var splitted = [];
        var scheme = "";
        var authority = "";
        var path5 = "";
        var port = "";
        var query = "";
        var fragment = "";
        var out = "";
        splitted = splitUri(value);
        scheme = splitted[1];
        authority = splitted[2];
        path5 = splitted[3];
        query = splitted[4];
        fragment = splitted[5];
        if (!scheme)
          return;
        if (allowHttps) {
          if (scheme.toLowerCase() != "https")
            return;
        } else {
          if (scheme.toLowerCase() != "http")
            return;
        }
        if (!authority) {
          return;
        }
        if (/:(\d+)$/.test(authority)) {
          port = authority.match(/:(\d+)$/)[0];
          authority = authority.replace(/:\d+$/, "");
        }
        out += scheme + ":";
        out += "//" + authority;
        if (port) {
          out += port;
        }
        out += path5;
        if (query && query.length) {
          out += "?" + query;
        }
        if (fragment && fragment.length) {
          out += "#" + fragment;
        }
        return out;
      }
      function is_https_iri(value) {
        return is_http_iri(value, true);
      }
      function is_web_iri(value) {
        return is_http_iri(value) || is_https_iri(value);
      }
    })(module);
  }
});

// node_modules/ethers/node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x2) {
  return typeof x2 === "symbol" ? x2 : "".concat(x2);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar2 = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar2.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar2;
}
function __spread() {
  for (var ar2 = [], i = 0; i < arguments.length; i++)
    ar2 = ar2.concat(__read(arguments[i]));
  return ar2;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j2 = 0, jl = a.length; j2 < jl; j2++, k++)
      r[k] = a[j2];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar2; i < l; i++) {
      if (ar2 || !(i in from)) {
        if (!ar2)
          ar2 = Array.prototype.slice.call(from, 0, i);
        ar2[i] = from[i];
      }
    }
  return to.concat(ar2 || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q2 = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q2.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f)
        i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q2[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q2[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q2.shift(), q2.length)
      resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async)
        inner = dispose;
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    if (inner)
      dispose = function() {
        try {
          inner.call(this);
        } catch (e) {
          return Promise.reject(e);
        }
      };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1)
          return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async)
            return s |= 2, Promise.resolve(result).then(next, function(e) {
              fail(e);
              return next();
            });
        } else
          s |= 1;
      } catch (e) {
        fail(e);
      }
    }
    if (s === 1)
      return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError)
      throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/ethers/node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// node_modules/ethers/lib.commonjs/_version.js
var require_version = __commonJS({
  "node_modules/ethers/lib.commonjs/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "6.13.4";
  }
});

// node_modules/ethers/lib.commonjs/utils/properties.js
var require_properties = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/properties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defineProperties = exports.resolveProperties = void 0;
    function checkType(value, type, name) {
      const types = type.split("|").map((t) => t.trim());
      for (let i = 0; i < types.length; i++) {
        switch (type) {
          case "any":
            return;
          case "bigint":
          case "boolean":
          case "number":
          case "string":
            if (typeof value === type) {
              return;
            }
        }
      }
      const error = new Error(`invalid value for type ${type}`);
      error.code = "INVALID_ARGUMENT";
      error.argument = `value.${name}`;
      error.value = value;
      throw error;
    }
    async function resolveProperties(value) {
      const keys = Object.keys(value);
      const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
      return results.reduce((accum, v, index) => {
        accum[keys[index]] = v;
        return accum;
      }, {});
    }
    exports.resolveProperties = resolveProperties;
    function defineProperties(target, values, types) {
      for (let key in values) {
        let value = values[key];
        const type = types ? types[key] : null;
        if (type) {
          checkType(value, type, key);
        }
        Object.defineProperty(target, key, { enumerable: true, value, writable: false });
      }
    }
    exports.defineProperties = defineProperties;
  }
});

// node_modules/ethers/lib.commonjs/utils/errors.js
var require_errors = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assertPrivate = exports.assertNormalize = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.makeError = exports.isCallException = exports.isError = void 0;
    var _version_js_1 = require_version();
    var properties_js_1 = require_properties();
    function stringify(value) {
      if (value == null) {
        return "null";
      }
      if (Array.isArray(value)) {
        return "[ " + value.map(stringify).join(", ") + " ]";
      }
      if (value instanceof Uint8Array) {
        const HEX = "0123456789abcdef";
        let result = "0x";
        for (let i = 0; i < value.length; i++) {
          result += HEX[value[i] >> 4];
          result += HEX[value[i] & 15];
        }
        return result;
      }
      if (typeof value === "object" && typeof value.toJSON === "function") {
        return stringify(value.toJSON());
      }
      switch (typeof value) {
        case "boolean":
        case "symbol":
          return value.toString();
        case "bigint":
          return BigInt(value).toString();
        case "number":
          return value.toString();
        case "string":
          return JSON.stringify(value);
        case "object": {
          const keys = Object.keys(value);
          keys.sort();
          return "{ " + keys.map((k) => `${stringify(k)}: ${stringify(value[k])}`).join(", ") + " }";
        }
      }
      return `[ COULD NOT SERIALIZE ]`;
    }
    function isError(error, code) {
      return error && error.code === code;
    }
    exports.isError = isError;
    function isCallException(error) {
      return isError(error, "CALL_EXCEPTION");
    }
    exports.isCallException = isCallException;
    function makeError(message, code, info) {
      let shortMessage = message;
      {
        const details = [];
        if (info) {
          if ("message" in info || "code" in info || "name" in info) {
            throw new Error(`value will overwrite populated values: ${stringify(info)}`);
          }
          for (const key in info) {
            if (key === "shortMessage") {
              continue;
            }
            const value = info[key];
            details.push(key + "=" + stringify(value));
          }
        }
        details.push(`code=${code}`);
        details.push(`version=${_version_js_1.version}`);
        if (details.length) {
          message += " (" + details.join(", ") + ")";
        }
      }
      let error;
      switch (code) {
        case "INVALID_ARGUMENT":
          error = new TypeError(message);
          break;
        case "NUMERIC_FAULT":
        case "BUFFER_OVERRUN":
          error = new RangeError(message);
          break;
        default:
          error = new Error(message);
      }
      (0, properties_js_1.defineProperties)(error, { code });
      if (info) {
        Object.assign(error, info);
      }
      if (error.shortMessage == null) {
        (0, properties_js_1.defineProperties)(error, { shortMessage });
      }
      return error;
    }
    exports.makeError = makeError;
    function assert(check, message, code, info) {
      if (!check) {
        throw makeError(message, code, info);
      }
    }
    exports.assert = assert;
    function assertArgument(check, message, name, value) {
      assert(check, message, "INVALID_ARGUMENT", { argument: name, value });
    }
    exports.assertArgument = assertArgument;
    function assertArgumentCount(count, expectedCount, message) {
      if (message == null) {
        message = "";
      }
      if (message) {
        message = ": " + message;
      }
      assert(count >= expectedCount, "missing arguemnt" + message, "MISSING_ARGUMENT", {
        count,
        expectedCount
      });
      assert(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
        count,
        expectedCount
      });
    }
    exports.assertArgumentCount = assertArgumentCount;
    var _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad");
        }
        ;
        if (form === "NFD") {
          const check = String.fromCharCode(233).normalize("NFD");
          const expected = String.fromCharCode(101, 769);
          if (check !== expected) {
            throw new Error("broken");
          }
        }
        accum.push(form);
      } catch (error) {
      }
      return accum;
    }, []);
    function assertNormalize(form) {
      assert(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
        operation: "String.prototype.normalize",
        info: { form }
      });
    }
    exports.assertNormalize = assertNormalize;
    function assertPrivate(givenGuard, guard, className) {
      if (className == null) {
        className = "";
      }
      if (givenGuard !== guard) {
        let method = className, operation = "new";
        if (className) {
          method += ".";
          operation += " " + className;
        }
        assert(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
          operation
        });
      }
    }
    exports.assertPrivate = assertPrivate;
  }
});

// node_modules/ethers/lib.commonjs/utils/data.js
var require_data = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/data.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zeroPadBytes = exports.zeroPadValue = exports.stripZerosLeft = exports.dataSlice = exports.dataLength = exports.concat = exports.hexlify = exports.isBytesLike = exports.isHexString = exports.getBytesCopy = exports.getBytes = void 0;
    var errors_js_1 = require_errors();
    function _getBytes(value, name, copy) {
      if (value instanceof Uint8Array) {
        if (copy) {
          return new Uint8Array(value);
        }
        return value;
      }
      if (typeof value === "string" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
        const result = new Uint8Array((value.length - 2) / 2);
        let offset = 2;
        for (let i = 0; i < result.length; i++) {
          result[i] = parseInt(value.substring(offset, offset + 2), 16);
          offset += 2;
        }
        return result;
      }
      (0, errors_js_1.assertArgument)(false, "invalid BytesLike value", name || "value", value);
    }
    function getBytes(value, name) {
      return _getBytes(value, name, false);
    }
    exports.getBytes = getBytes;
    function getBytesCopy(value, name) {
      return _getBytes(value, name, true);
    }
    exports.getBytesCopy = getBytesCopy;
    function isHexString(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
      }
      if (typeof length === "number" && value.length !== 2 + 2 * length) {
        return false;
      }
      if (length === true && value.length % 2 !== 0) {
        return false;
      }
      return true;
    }
    exports.isHexString = isHexString;
    function isBytesLike(value) {
      return isHexString(value, true) || value instanceof Uint8Array;
    }
    exports.isBytesLike = isBytesLike;
    var HexCharacters = "0123456789abcdef";
    function hexlify(data) {
      const bytes = getBytes(data);
      let result = "0x";
      for (let i = 0; i < bytes.length; i++) {
        const v = bytes[i];
        result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
      }
      return result;
    }
    exports.hexlify = hexlify;
    function concat(datas) {
      return "0x" + datas.map((d) => hexlify(d).substring(2)).join("");
    }
    exports.concat = concat;
    function dataLength(data) {
      if (isHexString(data, true)) {
        return (data.length - 2) / 2;
      }
      return getBytes(data).length;
    }
    exports.dataLength = dataLength;
    function dataSlice(data, start, end) {
      const bytes = getBytes(data);
      if (end != null && end > bytes.length) {
        (0, errors_js_1.assert)(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
          buffer: bytes,
          length: bytes.length,
          offset: end
        });
      }
      return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));
    }
    exports.dataSlice = dataSlice;
    function stripZerosLeft(data) {
      let bytes = hexlify(data).substring(2);
      while (bytes.startsWith("00")) {
        bytes = bytes.substring(2);
      }
      return "0x" + bytes;
    }
    exports.stripZerosLeft = stripZerosLeft;
    function zeroPad(data, length, left) {
      const bytes = getBytes(data);
      (0, errors_js_1.assert)(length >= bytes.length, "padding exceeds data length", "BUFFER_OVERRUN", {
        buffer: new Uint8Array(bytes),
        length,
        offset: length + 1
      });
      const result = new Uint8Array(length);
      result.fill(0);
      if (left) {
        result.set(bytes, length - bytes.length);
      } else {
        result.set(bytes, 0);
      }
      return hexlify(result);
    }
    function zeroPadValue(data, length) {
      return zeroPad(data, length, true);
    }
    exports.zeroPadValue = zeroPadValue;
    function zeroPadBytes(data, length) {
      return zeroPad(data, length, false);
    }
    exports.zeroPadBytes = zeroPadBytes;
  }
});

// node_modules/ethers/lib.commonjs/utils/maths.js
var require_maths = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/maths.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toQuantity = exports.toBeArray = exports.toBeHex = exports.toNumber = exports.getNumber = exports.toBigInt = exports.getUint = exports.getBigInt = exports.mask = exports.toTwos = exports.fromTwos = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var maxValue = 9007199254740991;
    function fromTwos(_value, _width) {
      const value = getUint(_value, "value");
      const width = BigInt(getNumber(_width, "width"));
      (0, errors_js_1.assert)(value >> width === BN_0, "overflow", "NUMERIC_FAULT", {
        operation: "fromTwos",
        fault: "overflow",
        value: _value
      });
      if (value >> width - BN_1) {
        const mask2 = (BN_1 << width) - BN_1;
        return -((~value & mask2) + BN_1);
      }
      return value;
    }
    exports.fromTwos = fromTwos;
    function toTwos(_value, _width) {
      let value = getBigInt(_value, "value");
      const width = BigInt(getNumber(_width, "width"));
      const limit = BN_1 << width - BN_1;
      if (value < BN_0) {
        value = -value;
        (0, errors_js_1.assert)(value <= limit, "too low", "NUMERIC_FAULT", {
          operation: "toTwos",
          fault: "overflow",
          value: _value
        });
        const mask2 = (BN_1 << width) - BN_1;
        return (~value & mask2) + BN_1;
      } else {
        (0, errors_js_1.assert)(value < limit, "too high", "NUMERIC_FAULT", {
          operation: "toTwos",
          fault: "overflow",
          value: _value
        });
      }
      return value;
    }
    exports.toTwos = toTwos;
    function mask(_value, _bits) {
      const value = getUint(_value, "value");
      const bits = BigInt(getNumber(_bits, "bits"));
      return value & (BN_1 << bits) - BN_1;
    }
    exports.mask = mask;
    function getBigInt(value, name) {
      switch (typeof value) {
        case "bigint":
          return value;
        case "number":
          (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
          (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
          return BigInt(value);
        case "string":
          try {
            if (value === "") {
              throw new Error("empty string");
            }
            if (value[0] === "-" && value[1] !== "-") {
              return -BigInt(value.substring(1));
            }
            return BigInt(value);
          } catch (e) {
            (0, errors_js_1.assertArgument)(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
          }
      }
      (0, errors_js_1.assertArgument)(false, "invalid BigNumberish value", name || "value", value);
    }
    exports.getBigInt = getBigInt;
    function getUint(value, name) {
      const result = getBigInt(value, name);
      (0, errors_js_1.assert)(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
        fault: "overflow",
        operation: "getUint",
        value
      });
      return result;
    }
    exports.getUint = getUint;
    var Nibbles = "0123456789abcdef";
    function toBigInt(value) {
      if (value instanceof Uint8Array) {
        let result = "0x0";
        for (const v of value) {
          result += Nibbles[v >> 4];
          result += Nibbles[v & 15];
        }
        return BigInt(result);
      }
      return getBigInt(value);
    }
    exports.toBigInt = toBigInt;
    function getNumber(value, name) {
      switch (typeof value) {
        case "bigint":
          (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
          return Number(value);
        case "number":
          (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
          (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
          return value;
        case "string":
          try {
            if (value === "") {
              throw new Error("empty string");
            }
            return getNumber(BigInt(value), name);
          } catch (e) {
            (0, errors_js_1.assertArgument)(false, `invalid numeric string: ${e.message}`, name || "value", value);
          }
      }
      (0, errors_js_1.assertArgument)(false, "invalid numeric value", name || "value", value);
    }
    exports.getNumber = getNumber;
    function toNumber(value) {
      return getNumber(toBigInt(value));
    }
    exports.toNumber = toNumber;
    function toBeHex(_value, _width) {
      const value = getUint(_value, "value");
      let result = value.toString(16);
      if (_width == null) {
        if (result.length % 2) {
          result = "0" + result;
        }
      } else {
        const width = getNumber(_width, "width");
        (0, errors_js_1.assert)(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
          operation: "toBeHex",
          fault: "overflow",
          value: _value
        });
        while (result.length < width * 2) {
          result = "0" + result;
        }
      }
      return "0x" + result;
    }
    exports.toBeHex = toBeHex;
    function toBeArray(_value) {
      const value = getUint(_value, "value");
      if (value === BN_0) {
        return new Uint8Array([]);
      }
      let hex = value.toString(16);
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      const result = new Uint8Array(hex.length / 2);
      for (let i = 0; i < result.length; i++) {
        const offset = i * 2;
        result[i] = parseInt(hex.substring(offset, offset + 2), 16);
      }
      return result;
    }
    exports.toBeArray = toBeArray;
    function toQuantity(value) {
      let result = (0, data_js_1.hexlify)((0, data_js_1.isBytesLike)(value) ? value : toBeArray(value)).substring(2);
      while (result.startsWith("0")) {
        result = result.substring(1);
      }
      if (result === "") {
        result = "0";
      }
      return "0x" + result;
    }
    exports.toQuantity = toQuantity;
  }
});

// node_modules/ethers/lib.commonjs/utils/base58.js
var require_base58 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/base58.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeBase58 = exports.encodeBase58 = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var maths_js_1 = require_maths();
    var Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    var Lookup = null;
    function getAlpha(letter) {
      if (Lookup == null) {
        Lookup = {};
        for (let i = 0; i < Alphabet.length; i++) {
          Lookup[Alphabet[i]] = BigInt(i);
        }
      }
      const result = Lookup[letter];
      (0, errors_js_1.assertArgument)(result != null, `invalid base58 value`, "letter", letter);
      return result;
    }
    var BN_0 = BigInt(0);
    var BN_58 = BigInt(58);
    function encodeBase58(_value) {
      const bytes = (0, data_js_1.getBytes)(_value);
      let value = (0, maths_js_1.toBigInt)(bytes);
      let result = "";
      while (value) {
        result = Alphabet[Number(value % BN_58)] + result;
        value /= BN_58;
      }
      for (let i = 0; i < bytes.length; i++) {
        if (bytes[i]) {
          break;
        }
        result = Alphabet[0] + result;
      }
      return result;
    }
    exports.encodeBase58 = encodeBase58;
    function decodeBase58(value) {
      let result = BN_0;
      for (let i = 0; i < value.length; i++) {
        result *= BN_58;
        result += getAlpha(value[i]);
      }
      return result;
    }
    exports.decodeBase58 = decodeBase58;
  }
});

// node_modules/ethers/lib.commonjs/utils/base64-browser.js
var require_base64_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/base64-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeBase64 = exports.decodeBase64 = void 0;
    var data_js_1 = require_data();
    function decodeBase64(textData) {
      textData = atob(textData);
      const data = new Uint8Array(textData.length);
      for (let i = 0; i < textData.length; i++) {
        data[i] = textData.charCodeAt(i);
      }
      return (0, data_js_1.getBytes)(data);
    }
    exports.decodeBase64 = decodeBase64;
    function encodeBase64(_data) {
      const data = (0, data_js_1.getBytes)(_data);
      let textData = "";
      for (let i = 0; i < data.length; i++) {
        textData += String.fromCharCode(data[i]);
      }
      return btoa(textData);
    }
    exports.encodeBase64 = encodeBase64;
  }
});

// node_modules/ethers/lib.commonjs/utils/events.js
var require_events = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/events.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventPayload = void 0;
    var properties_js_1 = require_properties();
    var _listener;
    var EventPayload = class {
      /**
       *  Create a new **EventPayload** for %%emitter%% with
       *  the %%listener%% and for %%filter%%.
       */
      constructor(emitter, listener, filter) {
        /**
         *  The event filter.
         */
        __publicField(this, "filter");
        /**
         *  The **EventEmitterable**.
         */
        __publicField(this, "emitter");
        __privateAdd(this, _listener, void 0);
        __privateSet(this, _listener, listener);
        (0, properties_js_1.defineProperties)(this, { emitter, filter });
      }
      /**
       *  Unregister the triggered listener for future events.
       */
      async removeListener() {
        if (__privateGet(this, _listener) == null) {
          return;
        }
        await this.emitter.off(this.filter, __privateGet(this, _listener));
      }
    };
    _listener = new WeakMap();
    exports.EventPayload = EventPayload;
  }
});

// node_modules/ethers/lib.commonjs/utils/utf8.js
var require_utf8 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/utf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8CodePoints = exports.toUtf8String = exports.toUtf8Bytes = exports.Utf8ErrorFuncs = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    function errorFunc(reason, offset, bytes, output, badCodepoint) {
      (0, errors_js_1.assertArgument)(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
    }
    function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
      if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
        let i = 0;
        for (let o = offset + 1; o < bytes.length; o++) {
          if (bytes[o] >> 6 !== 2) {
            break;
          }
          i++;
        }
        return i;
      }
      if (reason === "OVERRUN") {
        return bytes.length - offset - 1;
      }
      return 0;
    }
    function replaceFunc(reason, offset, bytes, output, badCodepoint) {
      if (reason === "OVERLONG") {
        (0, errors_js_1.assertArgument)(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
        output.push(badCodepoint);
        return 0;
      }
      output.push(65533);
      return ignoreFunc(reason, offset, bytes, output, badCodepoint);
    }
    exports.Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
    });
    function getUtf8CodePoints(_bytes, onError) {
      if (onError == null) {
        onError = exports.Utf8ErrorFuncs.error;
      }
      const bytes = (0, data_js_1.getBytes)(_bytes, "bytes");
      const result = [];
      let i = 0;
      while (i < bytes.length) {
        const c = bytes[i++];
        if (c >> 7 === 0) {
          result.push(c);
          continue;
        }
        let extraLength = null;
        let overlongMask = null;
        if ((c & 224) === 192) {
          extraLength = 1;
          overlongMask = 127;
        } else if ((c & 240) === 224) {
          extraLength = 2;
          overlongMask = 2047;
        } else if ((c & 248) === 240) {
          extraLength = 3;
          overlongMask = 65535;
        } else {
          if ((c & 192) === 128) {
            i += onError("UNEXPECTED_CONTINUE", i - 1, bytes, result);
          } else {
            i += onError("BAD_PREFIX", i - 1, bytes, result);
          }
          continue;
        }
        if (i - 1 + extraLength >= bytes.length) {
          i += onError("OVERRUN", i - 1, bytes, result);
          continue;
        }
        let res = c & (1 << 8 - extraLength - 1) - 1;
        for (let j2 = 0; j2 < extraLength; j2++) {
          let nextChar = bytes[i];
          if ((nextChar & 192) != 128) {
            i += onError("MISSING_CONTINUE", i, bytes, result);
            res = null;
            break;
          }
          ;
          res = res << 6 | nextChar & 63;
          i++;
        }
        if (res === null) {
          continue;
        }
        if (res > 1114111) {
          i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes, result, res);
          continue;
        }
        if (res >= 55296 && res <= 57343) {
          i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes, result, res);
          continue;
        }
        if (res <= overlongMask) {
          i += onError("OVERLONG", i - 1 - extraLength, bytes, result, res);
          continue;
        }
        result.push(res);
      }
      return result;
    }
    function toUtf8Bytes(str, form) {
      (0, errors_js_1.assertArgument)(typeof str === "string", "invalid string value", "str", str);
      if (form != null) {
        (0, errors_js_1.assertNormalize)(form);
        str = str.normalize(form);
      }
      let result = [];
      for (let i = 0; i < str.length; i++) {
        const c = str.charCodeAt(i);
        if (c < 128) {
          result.push(c);
        } else if (c < 2048) {
          result.push(c >> 6 | 192);
          result.push(c & 63 | 128);
        } else if ((c & 64512) == 55296) {
          i++;
          const c2 = str.charCodeAt(i);
          (0, errors_js_1.assertArgument)(i < str.length && (c2 & 64512) === 56320, "invalid surrogate pair", "str", str);
          const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
          result.push(pair >> 18 | 240);
          result.push(pair >> 12 & 63 | 128);
          result.push(pair >> 6 & 63 | 128);
          result.push(pair & 63 | 128);
        } else {
          result.push(c >> 12 | 224);
          result.push(c >> 6 & 63 | 128);
          result.push(c & 63 | 128);
        }
      }
      return new Uint8Array(result);
    }
    exports.toUtf8Bytes = toUtf8Bytes;
    function _toUtf8String(codePoints) {
      return codePoints.map((codePoint) => {
        if (codePoint <= 65535) {
          return String.fromCharCode(codePoint);
        }
        codePoint -= 65536;
        return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
      }).join("");
    }
    function toUtf8String(bytes, onError) {
      return _toUtf8String(getUtf8CodePoints(bytes, onError));
    }
    exports.toUtf8String = toUtf8String;
    function toUtf8CodePoints(str, form) {
      return getUtf8CodePoints(toUtf8Bytes(str, form));
    }
    exports.toUtf8CodePoints = toUtf8CodePoints;
  }
});

// node_modules/ethers/lib.commonjs/utils/geturl-browser.js
var require_geturl_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/geturl-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUrl = exports.createGetUrl = void 0;
    var errors_js_1 = require_errors();
    function createGetUrl(options) {
      async function getUrl2(req, _signal) {
        (0, errors_js_1.assert)(_signal == null || !_signal.cancelled, "request cancelled before sending", "CANCELLED");
        const protocol = req.url.split(":")[0].toLowerCase();
        (0, errors_js_1.assert)(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
          info: { protocol },
          operation: "request"
        });
        (0, errors_js_1.assert)(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
          operation: "request"
        });
        let error = null;
        const controller = new AbortController();
        const timer = setTimeout(() => {
          error = (0, errors_js_1.makeError)("request timeout", "TIMEOUT");
          controller.abort();
        }, req.timeout);
        if (_signal) {
          _signal.addListener(() => {
            error = (0, errors_js_1.makeError)("request cancelled", "CANCELLED");
            controller.abort();
          });
        }
        const init = {
          method: req.method,
          headers: new Headers(Array.from(req)),
          body: req.body || void 0,
          signal: controller.signal
        };
        let resp;
        try {
          resp = await fetch(req.url, init);
        } catch (_error) {
          clearTimeout(timer);
          if (error) {
            throw error;
          }
          throw _error;
        }
        clearTimeout(timer);
        const headers = {};
        resp.headers.forEach((value, key) => {
          headers[key.toLowerCase()] = value;
        });
        const respBody = await resp.arrayBuffer();
        const body = respBody == null ? null : new Uint8Array(respBody);
        return {
          statusCode: resp.status,
          statusMessage: resp.statusText,
          headers,
          body
        };
      }
      return getUrl2;
    }
    exports.createGetUrl = createGetUrl;
    var defaultGetUrl = createGetUrl({});
    async function getUrl(req, _signal) {
      return defaultGetUrl(req, _signal);
    }
    exports.getUrl = getUrl;
  }
});

// node_modules/ethers/lib.commonjs/utils/fetch.js
var require_fetch = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/fetch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchResponse = exports.FetchRequest = exports.FetchCancelSignal = void 0;
    var base64_js_1 = require_base64_browser();
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var properties_js_1 = require_properties();
    var utf8_js_1 = require_utf8();
    var geturl_js_1 = require_geturl_browser();
    var MAX_ATTEMPTS = 12;
    var SLOT_INTERVAL = 250;
    var defaultGetUrlFunc = (0, geturl_js_1.createGetUrl)();
    var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
    var reIpfs = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
    var locked = false;
    async function dataGatewayFunc(url, signal) {
      try {
        const match = url.match(reData);
        if (!match) {
          throw new Error("invalid data");
        }
        return new FetchResponse(200, "OK", {
          "content-type": match[1] || "text/plain"
        }, match[2] ? (0, base64_js_1.decodeBase64)(match[3]) : unpercent(match[3]));
      } catch (error) {
        return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
      }
    }
    function getIpfsGatewayFunc(baseUrl) {
      async function gatewayIpfs(url, signal) {
        try {
          const match = url.match(reIpfs);
          if (!match) {
            throw new Error("invalid link");
          }
          return new FetchRequest(`${baseUrl}${match[2]}`);
        } catch (error) {
          return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
        }
      }
      return gatewayIpfs;
    }
    var Gateways = {
      "data": dataGatewayFunc,
      "ipfs": getIpfsGatewayFunc("https://gateway.ipfs.io/ipfs/")
    };
    var fetchSignals = /* @__PURE__ */ new WeakMap();
    var _listeners, _cancelled;
    var FetchCancelSignal = class {
      constructor(request) {
        __privateAdd(this, _listeners, void 0);
        __privateAdd(this, _cancelled, void 0);
        __privateSet(this, _listeners, []);
        __privateSet(this, _cancelled, false);
        fetchSignals.set(request, () => {
          if (__privateGet(this, _cancelled)) {
            return;
          }
          __privateSet(this, _cancelled, true);
          for (const listener of __privateGet(this, _listeners)) {
            setTimeout(() => {
              listener();
            }, 0);
          }
          __privateSet(this, _listeners, []);
        });
      }
      addListener(listener) {
        (0, errors_js_1.assert)(!__privateGet(this, _cancelled), "singal already cancelled", "UNSUPPORTED_OPERATION", {
          operation: "fetchCancelSignal.addCancelListener"
        });
        __privateGet(this, _listeners).push(listener);
      }
      get cancelled() {
        return __privateGet(this, _cancelled);
      }
      checkSignal() {
        (0, errors_js_1.assert)(!this.cancelled, "cancelled", "CANCELLED", {});
      }
    };
    _listeners = new WeakMap();
    _cancelled = new WeakMap();
    exports.FetchCancelSignal = FetchCancelSignal;
    function checkSignal(signal) {
      if (signal == null) {
        throw new Error("missing signal; should not happen");
      }
      signal.checkSignal();
      return signal;
    }
    var _allowInsecure, _gzip, _headers, _method, _timeout, _url, _body, _bodyType, _creds, _preflight, _process, _retry, _signal, _throttle, _getUrlFunc, _send, send_fn;
    var _FetchRequest = class _FetchRequest {
      /**
       *  Create a new FetchRequest instance with default values.
       *
       *  Once created, each property may be set before issuing a
       *  ``.send()`` to make the request.
       */
      constructor(url) {
        __privateAdd(this, _send);
        __privateAdd(this, _allowInsecure, void 0);
        __privateAdd(this, _gzip, void 0);
        __privateAdd(this, _headers, void 0);
        __privateAdd(this, _method, void 0);
        __privateAdd(this, _timeout, void 0);
        __privateAdd(this, _url, void 0);
        __privateAdd(this, _body, void 0);
        __privateAdd(this, _bodyType, void 0);
        __privateAdd(this, _creds, void 0);
        // Hooks
        __privateAdd(this, _preflight, void 0);
        __privateAdd(this, _process, void 0);
        __privateAdd(this, _retry, void 0);
        __privateAdd(this, _signal, void 0);
        __privateAdd(this, _throttle, void 0);
        __privateAdd(this, _getUrlFunc, void 0);
        __privateSet(this, _url, String(url));
        __privateSet(this, _allowInsecure, false);
        __privateSet(this, _gzip, true);
        __privateSet(this, _headers, {});
        __privateSet(this, _method, "");
        __privateSet(this, _timeout, 3e5);
        __privateSet(this, _throttle, {
          slotInterval: SLOT_INTERVAL,
          maxAttempts: MAX_ATTEMPTS
        });
        __privateSet(this, _getUrlFunc, null);
      }
      /**
       *  The fetch URL to request.
       */
      get url() {
        return __privateGet(this, _url);
      }
      set url(url) {
        __privateSet(this, _url, String(url));
      }
      /**
       *  The fetch body, if any, to send as the request body. //(default: null)//
       *
       *  When setting a body, the intrinsic ``Content-Type`` is automatically
       *  set and will be used if **not overridden** by setting a custom
       *  header.
       *
       *  If %%body%% is null, the body is cleared (along with the
       *  intrinsic ``Content-Type``).
       *
       *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
       *  ``text/plain``.
       *
       *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
       *  ``application/octet-stream``.
       *
       *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
       *  set to ``application/json``.
       */
      get body() {
        if (__privateGet(this, _body) == null) {
          return null;
        }
        return new Uint8Array(__privateGet(this, _body));
      }
      set body(body) {
        if (body == null) {
          __privateSet(this, _body, void 0);
          __privateSet(this, _bodyType, void 0);
        } else if (typeof body === "string") {
          __privateSet(this, _body, (0, utf8_js_1.toUtf8Bytes)(body));
          __privateSet(this, _bodyType, "text/plain");
        } else if (body instanceof Uint8Array) {
          __privateSet(this, _body, body);
          __privateSet(this, _bodyType, "application/octet-stream");
        } else if (typeof body === "object") {
          __privateSet(this, _body, (0, utf8_js_1.toUtf8Bytes)(JSON.stringify(body)));
          __privateSet(this, _bodyType, "application/json");
        } else {
          throw new Error("invalid body");
        }
      }
      /**
       *  Returns true if the request has a body.
       */
      hasBody() {
        return __privateGet(this, _body) != null;
      }
      /**
       *  The HTTP method to use when requesting the URI. If no method
       *  has been explicitly set, then ``GET`` is used if the body is
       *  null and ``POST`` otherwise.
       */
      get method() {
        if (__privateGet(this, _method)) {
          return __privateGet(this, _method);
        }
        if (this.hasBody()) {
          return "POST";
        }
        return "GET";
      }
      set method(method) {
        if (method == null) {
          method = "";
        }
        __privateSet(this, _method, String(method).toUpperCase());
      }
      /**
       *  The headers that will be used when requesting the URI. All
       *  keys are lower-case.
       *
       *  This object is a copy, so any changes will **NOT** be reflected
       *  in the ``FetchRequest``.
       *
       *  To set a header entry, use the ``setHeader`` method.
       */
      get headers() {
        const headers = Object.assign({}, __privateGet(this, _headers));
        if (__privateGet(this, _creds)) {
          headers["authorization"] = `Basic ${(0, base64_js_1.encodeBase64)((0, utf8_js_1.toUtf8Bytes)(__privateGet(this, _creds)))}`;
        }
        ;
        if (this.allowGzip) {
          headers["accept-encoding"] = "gzip";
        }
        if (headers["content-type"] == null && __privateGet(this, _bodyType)) {
          headers["content-type"] = __privateGet(this, _bodyType);
        }
        if (this.body) {
          headers["content-length"] = String(this.body.length);
        }
        return headers;
      }
      /**
       *  Get the header for %%key%%, ignoring case.
       */
      getHeader(key) {
        return this.headers[key.toLowerCase()];
      }
      /**
       *  Set the header for %%key%% to %%value%%. All values are coerced
       *  to a string.
       */
      setHeader(key, value) {
        __privateGet(this, _headers)[String(key).toLowerCase()] = String(value);
      }
      /**
       *  Clear all headers, resetting all intrinsic headers.
       */
      clearHeaders() {
        __privateSet(this, _headers, {});
      }
      [Symbol.iterator]() {
        const headers = this.headers;
        const keys = Object.keys(headers);
        let index = 0;
        return {
          next: () => {
            if (index < keys.length) {
              const key = keys[index++];
              return {
                value: [key, headers[key]],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The value that will be sent for the ``Authorization`` header.
       *
       *  To set the credentials, use the ``setCredentials`` method.
       */
      get credentials() {
        return __privateGet(this, _creds) || null;
      }
      /**
       *  Sets an ``Authorization`` for %%username%% with %%password%%.
       */
      setCredentials(username, password) {
        (0, errors_js_1.assertArgument)(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
        __privateSet(this, _creds, `${username}:${password}`);
      }
      /**
       *  Enable and request gzip-encoded responses. The response will
       *  automatically be decompressed. //(default: true)//
       */
      get allowGzip() {
        return __privateGet(this, _gzip);
      }
      set allowGzip(value) {
        __privateSet(this, _gzip, !!value);
      }
      /**
       *  Allow ``Authentication`` credentials to be sent over insecure
       *  channels. //(default: false)//
       */
      get allowInsecureAuthentication() {
        return !!__privateGet(this, _allowInsecure);
      }
      set allowInsecureAuthentication(value) {
        __privateSet(this, _allowInsecure, !!value);
      }
      /**
       *  The timeout (in milliseconds) to wait for a complete response.
       *  //(default: 5 minutes)//
       */
      get timeout() {
        return __privateGet(this, _timeout);
      }
      set timeout(timeout) {
        (0, errors_js_1.assertArgument)(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
        __privateSet(this, _timeout, timeout);
      }
      /**
       *  This function is called prior to each request, for example
       *  during a redirection or retry in case of server throttling.
       *
       *  This offers an opportunity to populate headers or update
       *  content before sending a request.
       */
      get preflightFunc() {
        return __privateGet(this, _preflight) || null;
      }
      set preflightFunc(preflight) {
        __privateSet(this, _preflight, preflight);
      }
      /**
       *  This function is called after each response, offering an
       *  opportunity to provide client-level throttling or updating
       *  response data.
       *
       *  Any error thrown in this causes the ``send()`` to throw.
       *
       *  To schedule a retry attempt (assuming the maximum retry limit
       *  has not been reached), use [[response.throwThrottleError]].
       */
      get processFunc() {
        return __privateGet(this, _process) || null;
      }
      set processFunc(process) {
        __privateSet(this, _process, process);
      }
      /**
       *  This function is called on each retry attempt.
       */
      get retryFunc() {
        return __privateGet(this, _retry) || null;
      }
      set retryFunc(retry) {
        __privateSet(this, _retry, retry);
      }
      /**
       *  This function is called to fetch content from HTTP and
       *  HTTPS URLs and is platform specific (e.g. nodejs vs
       *  browsers).
       *
       *  This is by default the currently registered global getUrl
       *  function, which can be changed using [[registerGetUrl]].
       *  If this has been set, setting is to ``null`` will cause
       *  this FetchRequest (and any future clones) to revert back to
       *  using the currently registered global getUrl function.
       *
       *  Setting this is generally not necessary, but may be useful
       *  for developers that wish to intercept requests or to
       *  configurege a proxy or other agent.
       */
      get getUrlFunc() {
        return __privateGet(this, _getUrlFunc) || defaultGetUrlFunc;
      }
      set getUrlFunc(value) {
        __privateSet(this, _getUrlFunc, value);
      }
      toString() {
        return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${__privateGet(this, _body) ? (0, data_js_1.hexlify)(__privateGet(this, _body)) : "null"}>`;
      }
      /**
       *  Update the throttle parameters used to determine maximum
       *  attempts and exponential-backoff properties.
       */
      setThrottleParams(params) {
        if (params.slotInterval != null) {
          __privateGet(this, _throttle).slotInterval = params.slotInterval;
        }
        if (params.maxAttempts != null) {
          __privateGet(this, _throttle).maxAttempts = params.maxAttempts;
        }
      }
      /**
       *  Resolves to the response by sending the request.
       */
      send() {
        (0, errors_js_1.assert)(__privateGet(this, _signal) == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
        __privateSet(this, _signal, new FetchCancelSignal(this));
        return __privateMethod(this, _send, send_fn).call(this, 0, getTime() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
      }
      /**
       *  Cancels the inflight response, causing a ``CANCELLED``
       *  error to be rejected from the [[send]].
       */
      cancel() {
        (0, errors_js_1.assert)(__privateGet(this, _signal) != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
        const signal = fetchSignals.get(this);
        if (!signal) {
          throw new Error("missing signal; should not happen");
        }
        signal();
      }
      /**
       *  Returns a new [[FetchRequest]] that represents the redirection
       *  to %%location%%.
       */
      redirect(location) {
        const current = this.url.split(":")[0].toLowerCase();
        const target = location.split(":")[0].toLowerCase();
        (0, errors_js_1.assert)(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
          operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
        });
        const req = new _FetchRequest(location);
        req.method = "GET";
        req.allowGzip = this.allowGzip;
        req.timeout = this.timeout;
        __privateSet(req, _headers, Object.assign({}, __privateGet(this, _headers)));
        if (__privateGet(this, _body)) {
          __privateSet(req, _body, new Uint8Array(__privateGet(this, _body)));
        }
        __privateSet(req, _bodyType, __privateGet(this, _bodyType));
        return req;
      }
      /**
       *  Create a new copy of this request.
       */
      clone() {
        const clone = new _FetchRequest(this.url);
        __privateSet(clone, _method, __privateGet(this, _method));
        if (__privateGet(this, _body)) {
          __privateSet(clone, _body, __privateGet(this, _body));
        }
        __privateSet(clone, _bodyType, __privateGet(this, _bodyType));
        __privateSet(clone, _headers, Object.assign({}, __privateGet(this, _headers)));
        __privateSet(clone, _creds, __privateGet(this, _creds));
        if (this.allowGzip) {
          clone.allowGzip = true;
        }
        clone.timeout = this.timeout;
        if (this.allowInsecureAuthentication) {
          clone.allowInsecureAuthentication = true;
        }
        __privateSet(clone, _preflight, __privateGet(this, _preflight));
        __privateSet(clone, _process, __privateGet(this, _process));
        __privateSet(clone, _retry, __privateGet(this, _retry));
        __privateSet(clone, _throttle, Object.assign({}, __privateGet(this, _throttle)));
        __privateSet(clone, _getUrlFunc, __privateGet(this, _getUrlFunc));
        return clone;
      }
      /**
       *  Locks all static configuration for gateways and FetchGetUrlFunc
       *  registration.
       */
      static lockConfig() {
        locked = true;
      }
      /**
       *  Get the current Gateway function for %%scheme%%.
       */
      static getGateway(scheme) {
        return Gateways[scheme.toLowerCase()] || null;
      }
      /**
       *  Use the %%func%% when fetching URIs using %%scheme%%.
       *
       *  This method affects all requests globally.
       *
       *  If [[lockConfig]] has been called, no change is made and this
       *  throws.
       */
      static registerGateway(scheme, func) {
        scheme = scheme.toLowerCase();
        if (scheme === "http" || scheme === "https") {
          throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
        }
        if (locked) {
          throw new Error("gateways locked");
        }
        Gateways[scheme] = func;
      }
      /**
       *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
       *
       *  This method affects all requests globally.
       *
       *  If [[lockConfig]] has been called, no change is made and this
       *  throws.
       */
      static registerGetUrl(getUrl) {
        if (locked) {
          throw new Error("gateways locked");
        }
        defaultGetUrlFunc = getUrl;
      }
      /**
       *  Creates a getUrl function that fetches content from HTTP and
       *  HTTPS URLs.
       *
       *  The available %%options%% are dependent on the platform
       *  implementation of the default getUrl function.
       *
       *  This is not generally something that is needed, but is useful
       *  when trying to customize simple behaviour when fetching HTTP
       *  content.
       */
      static createGetUrlFunc(options) {
        return (0, geturl_js_1.createGetUrl)(options);
      }
      /**
       *  Creates a function that can "fetch" data URIs.
       *
       *  Note that this is automatically done internally to support
       *  data URIs, so it is not necessary to register it.
       *
       *  This is not generally something that is needed, but may
       *  be useful in a wrapper to perfom custom data URI functionality.
       */
      static createDataGateway() {
        return dataGatewayFunc;
      }
      /**
       *  Creates a function that will fetch IPFS (unvalidated) from
       *  a custom gateway baseUrl.
       *
       *  The default IPFS gateway used internally is
       *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
       */
      static createIpfsGatewayFunc(baseUrl) {
        return getIpfsGatewayFunc(baseUrl);
      }
    };
    _allowInsecure = new WeakMap();
    _gzip = new WeakMap();
    _headers = new WeakMap();
    _method = new WeakMap();
    _timeout = new WeakMap();
    _url = new WeakMap();
    _body = new WeakMap();
    _bodyType = new WeakMap();
    _creds = new WeakMap();
    _preflight = new WeakMap();
    _process = new WeakMap();
    _retry = new WeakMap();
    _signal = new WeakMap();
    _throttle = new WeakMap();
    _getUrlFunc = new WeakMap();
    _send = new WeakSet();
    send_fn = async function(attempt, expires, delay, _request2, _response) {
      var _a, _b, _c;
      if (attempt >= __privateGet(this, _throttle).maxAttempts) {
        return _response.makeServerError("exceeded maximum retry limit");
      }
      (0, errors_js_1.assert)(getTime() <= expires, "timeout", "TIMEOUT", {
        operation: "request.send",
        reason: "timeout",
        request: _request2
      });
      if (delay > 0) {
        await wait(delay);
      }
      let req = this.clone();
      const scheme = (req.url.split(":")[0] || "").toLowerCase();
      if (scheme in Gateways) {
        const result = await Gateways[scheme](req.url, checkSignal(__privateGet(_request2, _signal)));
        if (result instanceof FetchResponse) {
          let response2 = result;
          if (this.processFunc) {
            checkSignal(__privateGet(_request2, _signal));
            try {
              response2 = await this.processFunc(req, response2);
            } catch (error) {
              if (error.throttle == null || typeof error.stall !== "number") {
                response2.makeServerError("error in post-processing function", error).assertOk();
              }
            }
          }
          return response2;
        }
        req = result;
      }
      if (this.preflightFunc) {
        req = await this.preflightFunc(req);
      }
      const resp = await this.getUrlFunc(req, checkSignal(__privateGet(_request2, _signal)));
      let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request2);
      if (response.statusCode === 301 || response.statusCode === 302) {
        try {
          const location = response.headers.location || "";
          return __privateMethod(_a = req.redirect(location), _send, send_fn).call(_a, attempt + 1, expires, 0, _request2, response);
        } catch (error) {
        }
        return response;
      } else if (response.statusCode === 429) {
        if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
          const retryAfter = response.headers["retry-after"];
          let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
          if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
            delay2 = parseInt(retryAfter);
          }
          return __privateMethod(_b = req.clone(), _send, send_fn).call(_b, attempt + 1, expires, delay2, _request2, response);
        }
      }
      if (this.processFunc) {
        checkSignal(__privateGet(_request2, _signal));
        try {
          response = await this.processFunc(req, response);
        } catch (error) {
          if (error.throttle == null || typeof error.stall !== "number") {
            response.makeServerError("error in post-processing function", error).assertOk();
          }
          let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
          ;
          if (error.stall >= 0) {
            delay2 = error.stall;
          }
          return __privateMethod(_c = req.clone(), _send, send_fn).call(_c, attempt + 1, expires, delay2, _request2, response);
        }
      }
      return response;
    };
    var FetchRequest = _FetchRequest;
    exports.FetchRequest = FetchRequest;
    var _statusCode, _statusMessage, _headers2, _body2, _request, _error;
    var _FetchResponse = class _FetchResponse {
      constructor(statusCode, statusMessage, headers, body, request) {
        __privateAdd(this, _statusCode, void 0);
        __privateAdd(this, _statusMessage, void 0);
        __privateAdd(this, _headers2, void 0);
        __privateAdd(this, _body2, void 0);
        __privateAdd(this, _request, void 0);
        __privateAdd(this, _error, void 0);
        __privateSet(this, _statusCode, statusCode);
        __privateSet(this, _statusMessage, statusMessage);
        __privateSet(this, _headers2, Object.keys(headers).reduce((accum, k) => {
          accum[k.toLowerCase()] = String(headers[k]);
          return accum;
        }, {}));
        __privateSet(this, _body2, body == null ? null : new Uint8Array(body));
        __privateSet(this, _request, request || null);
        __privateSet(this, _error, { message: "" });
      }
      toString() {
        return `<FetchResponse status=${this.statusCode} body=${__privateGet(this, _body2) ? (0, data_js_1.hexlify)(__privateGet(this, _body2)) : "null"}>`;
      }
      /**
       *  The response status code.
       */
      get statusCode() {
        return __privateGet(this, _statusCode);
      }
      /**
       *  The response status message.
       */
      get statusMessage() {
        return __privateGet(this, _statusMessage);
      }
      /**
       *  The response headers. All keys are lower-case.
       */
      get headers() {
        return Object.assign({}, __privateGet(this, _headers2));
      }
      /**
       *  The response body, or ``null`` if there was no body.
       */
      get body() {
        return __privateGet(this, _body2) == null ? null : new Uint8Array(__privateGet(this, _body2));
      }
      /**
       *  The response body as a UTF-8 encoded string, or the empty
       *  string (i.e. ``""``) if there was no body.
       *
       *  An error is thrown if the body is invalid UTF-8 data.
       */
      get bodyText() {
        try {
          return __privateGet(this, _body2) == null ? "" : (0, utf8_js_1.toUtf8String)(__privateGet(this, _body2));
        } catch (error) {
          (0, errors_js_1.assert)(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
            operation: "bodyText",
            info: { response: this }
          });
        }
      }
      /**
       *  The response body, decoded as JSON.
       *
       *  An error is thrown if the body is invalid JSON-encoded data
       *  or if there was no body.
       */
      get bodyJson() {
        try {
          return JSON.parse(this.bodyText);
        } catch (error) {
          (0, errors_js_1.assert)(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
            operation: "bodyJson",
            info: { response: this }
          });
        }
      }
      [Symbol.iterator]() {
        const headers = this.headers;
        const keys = Object.keys(headers);
        let index = 0;
        return {
          next: () => {
            if (index < keys.length) {
              const key = keys[index++];
              return {
                value: [key, headers[key]],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  Return a Response with matching headers and body, but with
       *  an error status code (i.e. 599) and %%message%% with an
       *  optional %%error%%.
       */
      makeServerError(message, error) {
        let statusMessage;
        if (!message) {
          message = `${this.statusCode} ${this.statusMessage}`;
          statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
        } else {
          statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
        }
        const response = new _FetchResponse(599, statusMessage, this.headers, this.body, __privateGet(this, _request) || void 0);
        __privateSet(response, _error, { message, error });
        return response;
      }
      /**
       *  If called within a [request.processFunc](FetchRequest-processFunc)
       *  call, causes the request to retry as if throttled for %%stall%%
       *  milliseconds.
       */
      throwThrottleError(message, stall) {
        if (stall == null) {
          stall = -1;
        } else {
          (0, errors_js_1.assertArgument)(Number.isInteger(stall) && stall >= 0, "invalid stall timeout", "stall", stall);
        }
        const error = new Error(message || "throttling requests");
        (0, properties_js_1.defineProperties)(error, { stall, throttle: true });
        throw error;
      }
      /**
       *  Get the header value for %%key%%, ignoring case.
       */
      getHeader(key) {
        return this.headers[key.toLowerCase()];
      }
      /**
       *  Returns true if the response has a body.
       */
      hasBody() {
        return __privateGet(this, _body2) != null;
      }
      /**
       *  The request made for this response.
       */
      get request() {
        return __privateGet(this, _request);
      }
      /**
       *  Returns true if this response was a success statusCode.
       */
      ok() {
        return __privateGet(this, _error).message === "" && this.statusCode >= 200 && this.statusCode < 300;
      }
      /**
       *  Throws a ``SERVER_ERROR`` if this response is not ok.
       */
      assertOk() {
        if (this.ok()) {
          return;
        }
        let { message, error } = __privateGet(this, _error);
        if (message === "") {
          message = `server response ${this.statusCode} ${this.statusMessage}`;
        }
        let requestUrl = null;
        if (this.request) {
          requestUrl = this.request.url;
        }
        let responseBody = null;
        try {
          if (__privateGet(this, _body2)) {
            responseBody = (0, utf8_js_1.toUtf8String)(__privateGet(this, _body2));
          }
        } catch (e) {
        }
        (0, errors_js_1.assert)(false, message, "SERVER_ERROR", {
          request: this.request || "unknown request",
          response: this,
          error,
          info: {
            requestUrl,
            responseBody,
            responseStatus: `${this.statusCode} ${this.statusMessage}`
          }
        });
      }
    };
    _statusCode = new WeakMap();
    _statusMessage = new WeakMap();
    _headers2 = new WeakMap();
    _body2 = new WeakMap();
    _request = new WeakMap();
    _error = new WeakMap();
    var FetchResponse = _FetchResponse;
    exports.FetchResponse = FetchResponse;
    function getTime() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    function unpercent(value) {
      return (0, utf8_js_1.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
        return String.fromCharCode(parseInt(code, 16));
      }));
    }
    function wait(delay) {
      return new Promise((resolve) => setTimeout(resolve, delay));
    }
  }
});

// node_modules/ethers/lib.commonjs/utils/fixednumber.js
var require_fixednumber = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/fixednumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixedNumber = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var maths_js_1 = require_maths();
    var properties_js_1 = require_properties();
    var BN_N1 = BigInt(-1);
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_5 = BigInt(5);
    var _guard = {};
    var Zeros = "0000";
    while (Zeros.length < 80) {
      Zeros += Zeros;
    }
    function getTens(decimals) {
      let result = Zeros;
      while (result.length < decimals) {
        result += result;
      }
      return BigInt("1" + result.substring(0, decimals));
    }
    function checkValue(val, format, safeOp) {
      const width = BigInt(format.width);
      if (format.signed) {
        const limit = BN_1 << width - BN_1;
        (0, errors_js_1.assert)(safeOp == null || val >= -limit && val < limit, "overflow", "NUMERIC_FAULT", {
          operation: safeOp,
          fault: "overflow",
          value: val
        });
        if (val > BN_0) {
          val = (0, maths_js_1.fromTwos)((0, maths_js_1.mask)(val, width), width);
        } else {
          val = -(0, maths_js_1.fromTwos)((0, maths_js_1.mask)(-val, width), width);
        }
      } else {
        const limit = BN_1 << width;
        (0, errors_js_1.assert)(safeOp == null || val >= 0 && val < limit, "overflow", "NUMERIC_FAULT", {
          operation: safeOp,
          fault: "overflow",
          value: val
        });
        val = (val % limit + limit) % limit & limit - BN_1;
      }
      return val;
    }
    function getFormat(value) {
      if (typeof value === "number") {
        value = `fixed128x${value}`;
      }
      let signed = true;
      let width = 128;
      let decimals = 18;
      if (typeof value === "string") {
        if (value === "fixed") {
        } else if (value === "ufixed") {
          signed = false;
        } else {
          const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
          (0, errors_js_1.assertArgument)(match, "invalid fixed format", "format", value);
          signed = match[1] !== "u";
          width = parseInt(match[2]);
          decimals = parseInt(match[3]);
        }
      } else if (value) {
        const v = value;
        const check = (key, type, defaultValue) => {
          if (v[key] == null) {
            return defaultValue;
          }
          (0, errors_js_1.assertArgument)(typeof v[key] === type, "invalid fixed format (" + key + " not " + type + ")", "format." + key, v[key]);
          return v[key];
        };
        signed = check("signed", "boolean", signed);
        width = check("width", "number", width);
        decimals = check("decimals", "number", decimals);
      }
      (0, errors_js_1.assertArgument)(width % 8 === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
      (0, errors_js_1.assertArgument)(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
      const name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
      return { signed, width, decimals, name };
    }
    function toString(val, decimals) {
      let negative = "";
      if (val < BN_0) {
        negative = "-";
        val *= BN_N1;
      }
      let str = val.toString();
      if (decimals === 0) {
        return negative + str;
      }
      while (str.length <= decimals) {
        str = Zeros + str;
      }
      const index = str.length - decimals;
      str = str.substring(0, index) + "." + str.substring(index);
      while (str[0] === "0" && str[1] !== ".") {
        str = str.substring(1);
      }
      while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
        str = str.substring(0, str.length - 1);
      }
      return negative + str;
    }
    var _format, _val, _tens, _checkFormat, checkFormat_fn, _checkValue, checkValue_fn, _add, add_fn, _sub, sub_fn, _mul, mul_fn, _div, div_fn;
    var _FixedNumber = class _FixedNumber {
      // Use this when changing this file to get some typing info,
      // but then switch to any to mask the internal type
      //constructor(guard: any, value: bigint, format: _FixedFormat) {
      /**
       *  @private
       */
      constructor(guard, value, format) {
        __privateAdd(this, _checkFormat);
        __privateAdd(this, _checkValue);
        __privateAdd(this, _add);
        __privateAdd(this, _sub);
        __privateAdd(this, _mul);
        __privateAdd(this, _div);
        /**
         *  The specific fixed-point arithmetic field for this value.
         */
        __publicField(this, "format");
        __privateAdd(this, _format, void 0);
        // The actual value (accounting for decimals)
        __privateAdd(this, _val, void 0);
        // A base-10 value to multiple values by to maintain the magnitude
        __privateAdd(this, _tens, void 0);
        /**
         *  This is a property so console.log shows a human-meaningful value.
         *
         *  @private
         */
        __publicField(this, "_value");
        (0, errors_js_1.assertPrivate)(guard, _guard, "FixedNumber");
        __privateSet(this, _val, value);
        __privateSet(this, _format, format);
        const _value = toString(value, format.decimals);
        (0, properties_js_1.defineProperties)(this, { format: format.name, _value });
        __privateSet(this, _tens, getTens(format.decimals));
      }
      /**
       *  If true, negative values are permitted, otherwise only
       *  positive values and zero are allowed.
       */
      get signed() {
        return __privateGet(this, _format).signed;
      }
      /**
       *  The number of bits available to store the value.
       */
      get width() {
        return __privateGet(this, _format).width;
      }
      /**
       *  The number of decimal places in the fixed-point arithment field.
       */
      get decimals() {
        return __privateGet(this, _format).decimals;
      }
      /**
       *  The value as an integer, based on the smallest unit the
       *  [[decimals]] allow.
       */
      get value() {
        return __privateGet(this, _val);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% added
       *  to %%other%%, ignoring overflow.
       */
      addUnsafe(other) {
        return __privateMethod(this, _add, add_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% added
       *  to %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      add(other) {
        return __privateMethod(this, _add, add_fn).call(this, other, "add");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
       *  from %%this%%, ignoring overflow.
       */
      subUnsafe(other) {
        return __privateMethod(this, _sub, sub_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
       *  from %%this%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      sub(other) {
        return __privateMethod(this, _sub, sub_fn).call(this, other, "sub");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%, ignoring overflow and underflow (precision loss).
       */
      mulUnsafe(other) {
        return __privateMethod(this, _mul, mul_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      mul(other) {
        return __privateMethod(this, _mul, mul_fn).call(this, other, "mul");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs or if underflow (precision loss) occurs.
       */
      mulSignal(other) {
        __privateMethod(this, _checkFormat, checkFormat_fn).call(this, other);
        const value = __privateGet(this, _val) * __privateGet(other, _val);
        (0, errors_js_1.assert)(value % __privateGet(this, _tens) === BN_0, "precision lost during signalling mul", "NUMERIC_FAULT", {
          operation: "mulSignal",
          fault: "underflow",
          value: this
        });
        return __privateMethod(this, _checkValue, checkValue_fn).call(this, value / __privateGet(this, _tens), "mulSignal");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%, ignoring underflow (precision loss). A
       *  [[NumericFaultError]] is thrown if overflow occurs.
       */
      divUnsafe(other) {
        return __privateMethod(this, _div, div_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%, ignoring underflow (precision loss). A
       *  [[NumericFaultError]] is thrown if overflow occurs.
       */
      div(other) {
        return __privateMethod(this, _div, div_fn).call(this, other, "div");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%. A [[NumericFaultError]] is thrown if underflow
       *  (precision loss) occurs.
       */
      divSignal(other) {
        (0, errors_js_1.assert)(__privateGet(other, _val) !== BN_0, "division by zero", "NUMERIC_FAULT", {
          operation: "div",
          fault: "divide-by-zero",
          value: this
        });
        __privateMethod(this, _checkFormat, checkFormat_fn).call(this, other);
        const value = __privateGet(this, _val) * __privateGet(this, _tens);
        (0, errors_js_1.assert)(value % __privateGet(other, _val) === BN_0, "precision lost during signalling div", "NUMERIC_FAULT", {
          operation: "divSignal",
          fault: "underflow",
          value: this
        });
        return __privateMethod(this, _checkValue, checkValue_fn).call(this, value / __privateGet(other, _val), "divSignal");
      }
      /**
       *  Returns a comparison result between %%this%% and %%other%%.
       *
       *  This is suitable for use in sorting, where ``-1`` implies %%this%%
       *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies
       *  both are equal.
       */
      cmp(other) {
        let a = this.value, b = other.value;
        const delta = this.decimals - other.decimals;
        if (delta > 0) {
          b *= getTens(delta);
        } else if (delta < 0) {
          a *= getTens(-delta);
        }
        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
        return 0;
      }
      /**
       *  Returns true if %%other%% is equal to %%this%%.
       */
      eq(other) {
        return this.cmp(other) === 0;
      }
      /**
       *  Returns true if %%other%% is less than to %%this%%.
       */
      lt(other) {
        return this.cmp(other) < 0;
      }
      /**
       *  Returns true if %%other%% is less than or equal to %%this%%.
       */
      lte(other) {
        return this.cmp(other) <= 0;
      }
      /**
       *  Returns true if %%other%% is greater than to %%this%%.
       */
      gt(other) {
        return this.cmp(other) > 0;
      }
      /**
       *  Returns true if %%other%% is greater than or equal to %%this%%.
       */
      gte(other) {
        return this.cmp(other) >= 0;
      }
      /**
       *  Returns a new [[FixedNumber]] which is the largest **integer**
       *  that is less than or equal to %%this%%.
       *
       *  The decimal component of the result will always be ``0``.
       */
      floor() {
        let val = __privateGet(this, _val);
        if (__privateGet(this, _val) < BN_0) {
          val -= __privateGet(this, _tens) - BN_1;
        }
        val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
        return __privateMethod(this, _checkValue, checkValue_fn).call(this, val, "floor");
      }
      /**
       *  Returns a new [[FixedNumber]] which is the smallest **integer**
       *  that is greater than or equal to %%this%%.
       *
       *  The decimal component of the result will always be ``0``.
       */
      ceiling() {
        let val = __privateGet(this, _val);
        if (__privateGet(this, _val) > BN_0) {
          val += __privateGet(this, _tens) - BN_1;
        }
        val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
        return __privateMethod(this, _checkValue, checkValue_fn).call(this, val, "ceiling");
      }
      /**
       *  Returns a new [[FixedNumber]] with the decimal component
       *  rounded up on ties at %%decimals%% places.
       */
      round(decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        if (decimals >= this.decimals) {
          return this;
        }
        const delta = this.decimals - decimals;
        const bump = BN_5 * getTens(delta - 1);
        let value = this.value + bump;
        const tens = getTens(delta);
        value = value / tens * tens;
        checkValue(value, __privateGet(this, _format), "round");
        return new _FixedNumber(_guard, value, __privateGet(this, _format));
      }
      /**
       *  Returns true if %%this%% is equal to ``0``.
       */
      isZero() {
        return __privateGet(this, _val) === BN_0;
      }
      /**
       *  Returns true if %%this%% is less than ``0``.
       */
      isNegative() {
        return __privateGet(this, _val) < BN_0;
      }
      /**
       *  Returns the string representation of %%this%%.
       */
      toString() {
        return this._value;
      }
      /**
       *  Returns a float approximation.
       *
       *  Due to IEEE 754 precission (or lack thereof), this function
       *  can only return an approximation and most values will contain
       *  rounding errors.
       */
      toUnsafeFloat() {
        return parseFloat(this.toString());
      }
      /**
       *  Return a new [[FixedNumber]] with the same value but has had
       *  its field set to %%format%%.
       *
       *  This will throw if the value cannot fit into %%format%%.
       */
      toFormat(format) {
        return _FixedNumber.fromString(this.toString(), format);
      }
      /**
       *  Creates a new [[FixedNumber]] for %%value%% divided by
       *  %%decimal%% places with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted
       *  for %%decimals%%) cannot fit in %%format%%, either due to overflow
       *  or underflow (precision loss).
       */
      static fromValue(_value, _decimals, _format2) {
        const decimals = _decimals == null ? 0 : (0, maths_js_1.getNumber)(_decimals);
        const format = getFormat(_format2);
        let value = (0, maths_js_1.getBigInt)(_value, "value");
        const delta = decimals - format.decimals;
        if (delta > 0) {
          const tens = getTens(delta);
          (0, errors_js_1.assert)(value % tens === BN_0, "value loses precision for format", "NUMERIC_FAULT", {
            operation: "fromValue",
            fault: "underflow",
            value: _value
          });
          value /= tens;
        } else if (delta < 0) {
          value *= getTens(-delta);
        }
        checkValue(value, format, "fromValue");
        return new _FixedNumber(_guard, value, format);
      }
      /**
       *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
       *  in %%format%%, either due to overflow or underflow (precision loss).
       */
      static fromString(_value, _format2) {
        const match = _value.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
        (0, errors_js_1.assertArgument)(match && match[2].length + match[3].length > 0, "invalid FixedNumber string value", "value", _value);
        const format = getFormat(_format2);
        let whole = match[2] || "0", decimal = match[3] || "";
        while (decimal.length < format.decimals) {
          decimal += Zeros;
        }
        (0, errors_js_1.assert)(decimal.substring(format.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
          operation: "fromString",
          fault: "underflow",
          value: _value
        });
        decimal = decimal.substring(0, format.decimals);
        const value = BigInt(match[1] + whole + decimal);
        checkValue(value, format, "fromString");
        return new _FixedNumber(_guard, value, format);
      }
      /**
       *  Creates a new [[FixedNumber]] with the big-endian representation
       *  %%value%% with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
       *  in %%format%% due to overflow.
       */
      static fromBytes(_value, _format2) {
        let value = (0, maths_js_1.toBigInt)((0, data_js_1.getBytes)(_value, "value"));
        const format = getFormat(_format2);
        if (format.signed) {
          value = (0, maths_js_1.fromTwos)(value, format.width);
        }
        checkValue(value, format, "fromBytes");
        return new _FixedNumber(_guard, value, format);
      }
    };
    _format = new WeakMap();
    _val = new WeakMap();
    _tens = new WeakMap();
    _checkFormat = new WeakSet();
    checkFormat_fn = function(other) {
      (0, errors_js_1.assertArgument)(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
    };
    _checkValue = new WeakSet();
    checkValue_fn = function(val, safeOp) {
      val = checkValue(val, __privateGet(this, _format), safeOp);
      return new _FixedNumber(_guard, val, __privateGet(this, _format));
    };
    _add = new WeakSet();
    add_fn = function(o, safeOp) {
      __privateMethod(this, _checkFormat, checkFormat_fn).call(this, o);
      return __privateMethod(this, _checkValue, checkValue_fn).call(this, __privateGet(this, _val) + __privateGet(o, _val), safeOp);
    };
    _sub = new WeakSet();
    sub_fn = function(o, safeOp) {
      __privateMethod(this, _checkFormat, checkFormat_fn).call(this, o);
      return __privateMethod(this, _checkValue, checkValue_fn).call(this, __privateGet(this, _val) - __privateGet(o, _val), safeOp);
    };
    _mul = new WeakSet();
    mul_fn = function(o, safeOp) {
      __privateMethod(this, _checkFormat, checkFormat_fn).call(this, o);
      return __privateMethod(this, _checkValue, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(o, _val) / __privateGet(this, _tens), safeOp);
    };
    _div = new WeakSet();
    div_fn = function(o, safeOp) {
      (0, errors_js_1.assert)(__privateGet(o, _val) !== BN_0, "division by zero", "NUMERIC_FAULT", {
        operation: "div",
        fault: "divide-by-zero",
        value: this
      });
      __privateMethod(this, _checkFormat, checkFormat_fn).call(this, o);
      return __privateMethod(this, _checkValue, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(this, _tens) / __privateGet(o, _val), safeOp);
    };
    var FixedNumber = _FixedNumber;
    exports.FixedNumber = FixedNumber;
  }
});

// node_modules/ethers/lib.commonjs/utils/rlp-decode.js
var require_rlp_decode = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/rlp-decode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeRlp = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var data_js_2 = require_data();
    function hexlifyByte(value) {
      let result = value.toString(16);
      while (result.length < 2) {
        result = "0" + result;
      }
      return "0x" + result;
    }
    function unarrayifyInteger(data, offset, length) {
      let result = 0;
      for (let i = 0; i < length; i++) {
        result = result * 256 + data[offset + i];
      }
      return result;
    }
    function _decodeChildren(data, offset, childOffset, length) {
      const result = [];
      while (childOffset < offset + 1 + length) {
        const decoded = _decode(data, childOffset);
        result.push(decoded.result);
        childOffset += decoded.consumed;
        (0, errors_js_1.assert)(childOffset <= offset + 1 + length, "child data too short", "BUFFER_OVERRUN", {
          buffer: data,
          length,
          offset
        });
      }
      return { consumed: 1 + length, result };
    }
    function _decode(data, offset) {
      (0, errors_js_1.assert)(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
        buffer: data,
        length: 0,
        offset: 1
      });
      const checkOffset = (offset2) => {
        (0, errors_js_1.assert)(offset2 <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
          buffer: data,
          length: data.length,
          offset: offset2
        });
      };
      if (data[offset] >= 248) {
        const lengthLength = data[offset] - 247;
        checkOffset(offset + 1 + lengthLength);
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        checkOffset(offset + 1 + lengthLength + length);
        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
      } else if (data[offset] >= 192) {
        const length = data[offset] - 192;
        checkOffset(offset + 1 + length);
        return _decodeChildren(data, offset, offset + 1, length);
      } else if (data[offset] >= 184) {
        const lengthLength = data[offset] - 183;
        checkOffset(offset + 1 + lengthLength);
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        checkOffset(offset + 1 + lengthLength + length);
        const result = (0, data_js_1.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
        return { consumed: 1 + lengthLength + length, result };
      } else if (data[offset] >= 128) {
        const length = data[offset] - 128;
        checkOffset(offset + 1 + length);
        const result = (0, data_js_1.hexlify)(data.slice(offset + 1, offset + 1 + length));
        return { consumed: 1 + length, result };
      }
      return { consumed: 1, result: hexlifyByte(data[offset]) };
    }
    function decodeRlp(_data) {
      const data = (0, data_js_2.getBytes)(_data, "data");
      const decoded = _decode(data, 0);
      (0, errors_js_1.assertArgument)(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data);
      return decoded.result;
    }
    exports.decodeRlp = decodeRlp;
  }
});

// node_modules/ethers/lib.commonjs/utils/rlp-encode.js
var require_rlp_encode = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/rlp-encode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeRlp = void 0;
    var data_js_1 = require_data();
    function arrayifyInteger(value) {
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value >>= 8;
      }
      return result;
    }
    function _encode(object) {
      if (Array.isArray(object)) {
        let payload = [];
        object.forEach(function(child) {
          payload = payload.concat(_encode(child));
        });
        if (payload.length <= 55) {
          payload.unshift(192 + payload.length);
          return payload;
        }
        const length2 = arrayifyInteger(payload.length);
        length2.unshift(247 + length2.length);
        return length2.concat(payload);
      }
      const data = Array.prototype.slice.call((0, data_js_1.getBytes)(object, "object"));
      if (data.length === 1 && data[0] <= 127) {
        return data;
      } else if (data.length <= 55) {
        data.unshift(128 + data.length);
        return data;
      }
      const length = arrayifyInteger(data.length);
      length.unshift(183 + length.length);
      return length.concat(data);
    }
    var nibbles = "0123456789abcdef";
    function encodeRlp(object) {
      let result = "0x";
      for (const v of _encode(object)) {
        result += nibbles[v >> 4];
        result += nibbles[v & 15];
      }
      return result;
    }
    exports.encodeRlp = encodeRlp;
  }
});

// node_modules/ethers/lib.commonjs/utils/units.js
var require_units = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/units.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEther = exports.formatEther = exports.parseUnits = exports.formatUnits = void 0;
    var errors_js_1 = require_errors();
    var fixednumber_js_1 = require_fixednumber();
    var maths_js_1 = require_maths();
    var names = [
      "wei",
      "kwei",
      "mwei",
      "gwei",
      "szabo",
      "finney",
      "ether"
    ];
    function formatUnits(value, unit) {
      let decimals = 18;
      if (typeof unit === "string") {
        const index = names.indexOf(unit);
        (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
        decimals = 3 * index;
      } else if (unit != null) {
        decimals = (0, maths_js_1.getNumber)(unit, "unit");
      }
      return fixednumber_js_1.FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();
    }
    exports.formatUnits = formatUnits;
    function parseUnits(value, unit) {
      (0, errors_js_1.assertArgument)(typeof value === "string", "value must be a string", "value", value);
      let decimals = 18;
      if (typeof unit === "string") {
        const index = names.indexOf(unit);
        (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
        decimals = 3 * index;
      } else if (unit != null) {
        decimals = (0, maths_js_1.getNumber)(unit, "unit");
      }
      return fixednumber_js_1.FixedNumber.fromString(value, { decimals, width: 512 }).value;
    }
    exports.parseUnits = parseUnits;
    function formatEther(wei) {
      return formatUnits(wei, 18);
    }
    exports.formatEther = formatEther;
    function parseEther(ether) {
      return parseUnits(ether, 18);
    }
    exports.parseEther = parseEther;
  }
});

// node_modules/ethers/lib.commonjs/utils/uuid.js
var require_uuid = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/uuid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uuidV4 = void 0;
    var data_js_1 = require_data();
    function uuidV4(randomBytes) {
      const bytes = (0, data_js_1.getBytes)(randomBytes, "randomBytes");
      bytes[6] = bytes[6] & 15 | 64;
      bytes[8] = bytes[8] & 63 | 128;
      const value = (0, data_js_1.hexlify)(bytes);
      return [
        value.substring(2, 10),
        value.substring(10, 14),
        value.substring(14, 18),
        value.substring(18, 22),
        value.substring(22, 34)
      ].join("-");
    }
    exports.uuidV4 = uuidV4;
  }
});

// node_modules/ethers/lib.commonjs/utils/index.js
var require_utils3 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.encodeRlp = exports.decodeRlp = exports.defineProperties = exports.resolveProperties = exports.toQuantity = exports.toBeArray = exports.toBeHex = exports.toNumber = exports.toBigInt = exports.getUint = exports.getNumber = exports.getBigInt = exports.mask = exports.toTwos = exports.fromTwos = exports.FixedNumber = exports.FetchCancelSignal = exports.FetchResponse = exports.FetchRequest = exports.EventPayload = exports.makeError = exports.assertNormalize = exports.assertPrivate = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.isError = exports.isCallException = exports.zeroPadBytes = exports.zeroPadValue = exports.stripZerosLeft = exports.dataSlice = exports.dataLength = exports.concat = exports.hexlify = exports.isBytesLike = exports.isHexString = exports.getBytesCopy = exports.getBytes = exports.encodeBase64 = exports.decodeBase64 = exports.encodeBase58 = exports.decodeBase58 = void 0;
    exports.uuidV4 = exports.Utf8ErrorFuncs = void 0;
    var base58_js_1 = require_base58();
    Object.defineProperty(exports, "decodeBase58", { enumerable: true, get: function() {
      return base58_js_1.decodeBase58;
    } });
    Object.defineProperty(exports, "encodeBase58", { enumerable: true, get: function() {
      return base58_js_1.encodeBase58;
    } });
    var base64_js_1 = require_base64_browser();
    Object.defineProperty(exports, "decodeBase64", { enumerable: true, get: function() {
      return base64_js_1.decodeBase64;
    } });
    Object.defineProperty(exports, "encodeBase64", { enumerable: true, get: function() {
      return base64_js_1.encodeBase64;
    } });
    var data_js_1 = require_data();
    Object.defineProperty(exports, "getBytes", { enumerable: true, get: function() {
      return data_js_1.getBytes;
    } });
    Object.defineProperty(exports, "getBytesCopy", { enumerable: true, get: function() {
      return data_js_1.getBytesCopy;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return data_js_1.isHexString;
    } });
    Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function() {
      return data_js_1.isBytesLike;
    } });
    Object.defineProperty(exports, "hexlify", { enumerable: true, get: function() {
      return data_js_1.hexlify;
    } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return data_js_1.concat;
    } });
    Object.defineProperty(exports, "dataLength", { enumerable: true, get: function() {
      return data_js_1.dataLength;
    } });
    Object.defineProperty(exports, "dataSlice", { enumerable: true, get: function() {
      return data_js_1.dataSlice;
    } });
    Object.defineProperty(exports, "stripZerosLeft", { enumerable: true, get: function() {
      return data_js_1.stripZerosLeft;
    } });
    Object.defineProperty(exports, "zeroPadValue", { enumerable: true, get: function() {
      return data_js_1.zeroPadValue;
    } });
    Object.defineProperty(exports, "zeroPadBytes", { enumerable: true, get: function() {
      return data_js_1.zeroPadBytes;
    } });
    var errors_js_1 = require_errors();
    Object.defineProperty(exports, "isCallException", { enumerable: true, get: function() {
      return errors_js_1.isCallException;
    } });
    Object.defineProperty(exports, "isError", { enumerable: true, get: function() {
      return errors_js_1.isError;
    } });
    Object.defineProperty(exports, "assert", { enumerable: true, get: function() {
      return errors_js_1.assert;
    } });
    Object.defineProperty(exports, "assertArgument", { enumerable: true, get: function() {
      return errors_js_1.assertArgument;
    } });
    Object.defineProperty(exports, "assertArgumentCount", { enumerable: true, get: function() {
      return errors_js_1.assertArgumentCount;
    } });
    Object.defineProperty(exports, "assertPrivate", { enumerable: true, get: function() {
      return errors_js_1.assertPrivate;
    } });
    Object.defineProperty(exports, "assertNormalize", { enumerable: true, get: function() {
      return errors_js_1.assertNormalize;
    } });
    Object.defineProperty(exports, "makeError", { enumerable: true, get: function() {
      return errors_js_1.makeError;
    } });
    var events_js_1 = require_events();
    Object.defineProperty(exports, "EventPayload", { enumerable: true, get: function() {
      return events_js_1.EventPayload;
    } });
    var fetch_js_1 = require_fetch();
    Object.defineProperty(exports, "FetchRequest", { enumerable: true, get: function() {
      return fetch_js_1.FetchRequest;
    } });
    Object.defineProperty(exports, "FetchResponse", { enumerable: true, get: function() {
      return fetch_js_1.FetchResponse;
    } });
    Object.defineProperty(exports, "FetchCancelSignal", { enumerable: true, get: function() {
      return fetch_js_1.FetchCancelSignal;
    } });
    var fixednumber_js_1 = require_fixednumber();
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function() {
      return fixednumber_js_1.FixedNumber;
    } });
    var maths_js_1 = require_maths();
    Object.defineProperty(exports, "fromTwos", { enumerable: true, get: function() {
      return maths_js_1.fromTwos;
    } });
    Object.defineProperty(exports, "toTwos", { enumerable: true, get: function() {
      return maths_js_1.toTwos;
    } });
    Object.defineProperty(exports, "mask", { enumerable: true, get: function() {
      return maths_js_1.mask;
    } });
    Object.defineProperty(exports, "getBigInt", { enumerable: true, get: function() {
      return maths_js_1.getBigInt;
    } });
    Object.defineProperty(exports, "getNumber", { enumerable: true, get: function() {
      return maths_js_1.getNumber;
    } });
    Object.defineProperty(exports, "getUint", { enumerable: true, get: function() {
      return maths_js_1.getUint;
    } });
    Object.defineProperty(exports, "toBigInt", { enumerable: true, get: function() {
      return maths_js_1.toBigInt;
    } });
    Object.defineProperty(exports, "toNumber", { enumerable: true, get: function() {
      return maths_js_1.toNumber;
    } });
    Object.defineProperty(exports, "toBeHex", { enumerable: true, get: function() {
      return maths_js_1.toBeHex;
    } });
    Object.defineProperty(exports, "toBeArray", { enumerable: true, get: function() {
      return maths_js_1.toBeArray;
    } });
    Object.defineProperty(exports, "toQuantity", { enumerable: true, get: function() {
      return maths_js_1.toQuantity;
    } });
    var properties_js_1 = require_properties();
    Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function() {
      return properties_js_1.resolveProperties;
    } });
    Object.defineProperty(exports, "defineProperties", { enumerable: true, get: function() {
      return properties_js_1.defineProperties;
    } });
    var rlp_decode_js_1 = require_rlp_decode();
    Object.defineProperty(exports, "decodeRlp", { enumerable: true, get: function() {
      return rlp_decode_js_1.decodeRlp;
    } });
    var rlp_encode_js_1 = require_rlp_encode();
    Object.defineProperty(exports, "encodeRlp", { enumerable: true, get: function() {
      return rlp_encode_js_1.encodeRlp;
    } });
    var units_js_1 = require_units();
    Object.defineProperty(exports, "formatEther", { enumerable: true, get: function() {
      return units_js_1.formatEther;
    } });
    Object.defineProperty(exports, "parseEther", { enumerable: true, get: function() {
      return units_js_1.parseEther;
    } });
    Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function() {
      return units_js_1.formatUnits;
    } });
    Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function() {
      return units_js_1.parseUnits;
    } });
    var utf8_js_1 = require_utf8();
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8Bytes;
    } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8CodePoints;
    } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8String;
    } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return utf8_js_1.Utf8ErrorFuncs;
    } });
    var uuid_js_1 = require_uuid();
    Object.defineProperty(exports, "uuidV4", { enumerable: true, get: function() {
      return uuid_js_1.uuidV4;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js
var require_abstract_coder = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Reader = exports.Writer = exports.Coder = exports.checkResultErrors = exports.Result = exports.WordSize = void 0;
    var index_js_1 = require_utils3();
    exports.WordSize = 32;
    var Padding = new Uint8Array(exports.WordSize);
    var passProperties = ["then"];
    var _guard = {};
    var resultNames = /* @__PURE__ */ new WeakMap();
    function getNames(result) {
      return resultNames.get(result);
    }
    function setNames(result, names) {
      resultNames.set(result, names);
    }
    function throwError(name, error) {
      const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
      wrapped.error = error;
      throw wrapped;
    }
    function toObject(names, items, deep) {
      if (names.indexOf(null) >= 0) {
        return items.map((item, index) => {
          if (item instanceof Result2) {
            return toObject(getNames(item), item, deep);
          }
          return item;
        });
      }
      return names.reduce((accum, name, index) => {
        let item = items.getValue(name);
        if (!(name in accum)) {
          if (deep && item instanceof Result2) {
            item = toObject(getNames(item), item, deep);
          }
          accum[name] = item;
        }
        return accum;
      }, {});
    }
    var _names;
    var _Result = class _Result extends Array {
      /**
       *  @private
       */
      constructor(...args) {
        const guard = args[0];
        let items = args[1];
        let names = (args[2] || []).slice();
        let wrap = true;
        if (guard !== _guard) {
          items = args;
          names = [];
          wrap = false;
        }
        super(items.length);
        // No longer used; but cannot be removed as it will remove the
        // #private field from the .d.ts which may break backwards
        // compatibility
        __privateAdd(this, _names, void 0);
        items.forEach((item, index) => {
          this[index] = item;
        });
        const nameCounts = names.reduce((accum, name) => {
          if (typeof name === "string") {
            accum.set(name, (accum.get(name) || 0) + 1);
          }
          return accum;
        }, /* @__PURE__ */ new Map());
        setNames(this, Object.freeze(items.map((item, index) => {
          const name = names[index];
          if (name != null && nameCounts.get(name) === 1) {
            return name;
          }
          return null;
        })));
        __privateSet(this, _names, []);
        if (__privateGet(this, _names) == null) {
          void __privateGet(this, _names);
        }
        if (!wrap) {
          return;
        }
        Object.freeze(this);
        const proxy = new Proxy(this, {
          get: (target, prop, receiver) => {
            if (typeof prop === "string") {
              if (prop.match(/^[0-9]+$/)) {
                const index = (0, index_js_1.getNumber)(prop, "%index");
                if (index < 0 || index >= this.length) {
                  throw new RangeError("out of result range");
                }
                const item = target[index];
                if (item instanceof Error) {
                  throwError(`index ${index}`, item);
                }
                return item;
              }
              if (passProperties.indexOf(prop) >= 0) {
                return Reflect.get(target, prop, receiver);
              }
              const value = target[prop];
              if (value instanceof Function) {
                return function(...args2) {
                  return value.apply(this === receiver ? target : this, args2);
                };
              } else if (!(prop in target)) {
                return target.getValue.apply(this === receiver ? target : this, [prop]);
              }
            }
            return Reflect.get(target, prop, receiver);
          }
        });
        setNames(proxy, getNames(this));
        return proxy;
      }
      /**
       *  Returns the Result as a normal Array. If %%deep%%, any children
       *  which are Result objects are also converted to a normal Array.
       *
       *  This will throw if there are any outstanding deferred
       *  errors.
       */
      toArray(deep) {
        const result = [];
        this.forEach((item, index) => {
          if (item instanceof Error) {
            throwError(`index ${index}`, item);
          }
          if (deep && item instanceof _Result) {
            item = item.toArray(deep);
          }
          result.push(item);
        });
        return result;
      }
      /**
       *  Returns the Result as an Object with each name-value pair. If
       *  %%deep%%, any children which are Result objects are also
       *  converted to an Object.
       *
       *  This will throw if any value is unnamed, or if there are
       *  any outstanding deferred errors.
       */
      toObject(deep) {
        const names = getNames(this);
        return names.reduce((accum, name, index) => {
          (0, index_js_1.assert)(name != null, `value at index ${index} unnamed`, "UNSUPPORTED_OPERATION", {
            operation: "toObject()"
          });
          return toObject(names, this, deep);
        }, {});
      }
      /**
       *  @_ignore
       */
      slice(start, end) {
        if (start == null) {
          start = 0;
        }
        if (start < 0) {
          start += this.length;
          if (start < 0) {
            start = 0;
          }
        }
        if (end == null) {
          end = this.length;
        }
        if (end < 0) {
          end += this.length;
          if (end < 0) {
            end = 0;
          }
        }
        if (end > this.length) {
          end = this.length;
        }
        const _names2 = getNames(this);
        const result = [], names = [];
        for (let i = start; i < end; i++) {
          result.push(this[i]);
          names.push(_names2[i]);
        }
        return new _Result(_guard, result, names);
      }
      /**
       *  @_ignore
       */
      filter(callback, thisArg) {
        const _names2 = getNames(this);
        const result = [], names = [];
        for (let i = 0; i < this.length; i++) {
          const item = this[i];
          if (item instanceof Error) {
            throwError(`index ${i}`, item);
          }
          if (callback.call(thisArg, item, i, this)) {
            result.push(item);
            names.push(_names2[i]);
          }
        }
        return new _Result(_guard, result, names);
      }
      /**
       *  @_ignore
       */
      map(callback, thisArg) {
        const result = [];
        for (let i = 0; i < this.length; i++) {
          const item = this[i];
          if (item instanceof Error) {
            throwError(`index ${i}`, item);
          }
          result.push(callback.call(thisArg, item, i, this));
        }
        return result;
      }
      /**
       *  Returns the value for %%name%%.
       *
       *  Since it is possible to have a key whose name conflicts with
       *  a method on a [[Result]] or its superclass Array, or any
       *  JavaScript keyword, this ensures all named values are still
       *  accessible by name.
       */
      getValue(name) {
        const index = getNames(this).indexOf(name);
        if (index === -1) {
          return void 0;
        }
        const value = this[index];
        if (value instanceof Error) {
          throwError(`property ${JSON.stringify(name)}`, value.error);
        }
        return value;
      }
      /**
       *  Creates a new [[Result]] for %%items%% with each entry
       *  also accessible by its corresponding name in %%keys%%.
       */
      static fromItems(items, keys) {
        return new _Result(_guard, items, keys);
      }
    };
    _names = new WeakMap();
    var Result2 = _Result;
    exports.Result = Result2;
    function checkResultErrors(result) {
      const errors = [];
      const checkErrors = function(path5, object) {
        if (!Array.isArray(object)) {
          return;
        }
        for (let key in object) {
          const childPath = path5.slice();
          childPath.push(key);
          try {
            checkErrors(childPath, object[key]);
          } catch (error) {
            errors.push({ path: childPath, error });
          }
        }
      };
      checkErrors([], result);
      return errors;
    }
    exports.checkResultErrors = checkResultErrors;
    function getValue(value) {
      let bytes = (0, index_js_1.toBeArray)(value);
      (0, index_js_1.assert)(bytes.length <= exports.WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes, length: exports.WordSize, offset: bytes.length });
      if (bytes.length !== exports.WordSize) {
        bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([Padding.slice(bytes.length % exports.WordSize), bytes]));
      }
      return bytes;
    }
    var Coder = class {
      constructor(name, type, localName, dynamic) {
        // The coder name:
        //   - address, uint256, tuple, array, etc.
        __publicField(this, "name");
        // The fully expanded type, including composite types:
        //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
        __publicField(this, "type");
        // The localName bound in the signature, in this example it is "baz":
        //   - tuple(address foo, uint bar) baz
        __publicField(this, "localName");
        // Whether this type is dynamic:
        //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
        //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
        __publicField(this, "dynamic");
        (0, index_js_1.defineProperties)(this, { name, type, localName, dynamic }, {
          name: "string",
          type: "string",
          localName: "string",
          dynamic: "boolean"
        });
      }
      _throwError(message, value) {
        (0, index_js_1.assertArgument)(false, message, this.localName, value);
      }
    };
    exports.Coder = Coder;
    var _data, _dataLength, _writeData, writeData_fn;
    var Writer = class {
      constructor() {
        __privateAdd(this, _writeData);
        // An array of WordSize lengthed objects to concatenation
        __privateAdd(this, _data, void 0);
        __privateAdd(this, _dataLength, void 0);
        __privateSet(this, _data, []);
        __privateSet(this, _dataLength, 0);
      }
      get data() {
        return (0, index_js_1.concat)(__privateGet(this, _data));
      }
      get length() {
        return __privateGet(this, _dataLength);
      }
      appendWriter(writer) {
        return __privateMethod(this, _writeData, writeData_fn).call(this, (0, index_js_1.getBytesCopy)(writer.data));
      }
      // Arrayish item; pad on the right to *nearest* WordSize
      writeBytes(value) {
        let bytes = (0, index_js_1.getBytesCopy)(value);
        const paddingOffset = bytes.length % exports.WordSize;
        if (paddingOffset) {
          bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([bytes, Padding.slice(paddingOffset)]));
        }
        return __privateMethod(this, _writeData, writeData_fn).call(this, bytes);
      }
      // Numeric item; pad on the left *to* WordSize
      writeValue(value) {
        return __privateMethod(this, _writeData, writeData_fn).call(this, getValue(value));
      }
      // Inserts a numeric place-holder, returning a callback that can
      // be used to asjust the value later
      writeUpdatableValue() {
        const offset = __privateGet(this, _data).length;
        __privateGet(this, _data).push(Padding);
        __privateSet(this, _dataLength, __privateGet(this, _dataLength) + exports.WordSize);
        return (value) => {
          __privateGet(this, _data)[offset] = getValue(value);
        };
      }
    };
    _data = new WeakMap();
    _dataLength = new WeakMap();
    _writeData = new WeakSet();
    writeData_fn = function(data) {
      __privateGet(this, _data).push(data);
      __privateSet(this, _dataLength, __privateGet(this, _dataLength) + data.length);
      return data.length;
    };
    exports.Writer = Writer;
    var _data2, _offset, _bytesRead, _parent, _maxInflation, _incrementBytesRead, incrementBytesRead_fn, _peekBytes, peekBytes_fn;
    var _Reader = class _Reader {
      constructor(data, allowLoose, maxInflation) {
        __privateAdd(this, _incrementBytesRead);
        __privateAdd(this, _peekBytes);
        // Allows incomplete unpadded data to be read; otherwise an error
        // is raised if attempting to overrun the buffer. This is required
        // to deal with an old Solidity bug, in which event data for
        // external (not public thoguh) was tightly packed.
        __publicField(this, "allowLoose");
        __privateAdd(this, _data2, void 0);
        __privateAdd(this, _offset, void 0);
        __privateAdd(this, _bytesRead, void 0);
        __privateAdd(this, _parent, void 0);
        __privateAdd(this, _maxInflation, void 0);
        (0, index_js_1.defineProperties)(this, { allowLoose: !!allowLoose });
        __privateSet(this, _data2, (0, index_js_1.getBytesCopy)(data));
        __privateSet(this, _bytesRead, 0);
        __privateSet(this, _parent, null);
        __privateSet(this, _maxInflation, maxInflation != null ? maxInflation : 1024);
        __privateSet(this, _offset, 0);
      }
      get data() {
        return (0, index_js_1.hexlify)(__privateGet(this, _data2));
      }
      get dataLength() {
        return __privateGet(this, _data2).length;
      }
      get consumed() {
        return __privateGet(this, _offset);
      }
      get bytes() {
        return new Uint8Array(__privateGet(this, _data2));
      }
      // Create a sub-reader with the same underlying data, but offset
      subReader(offset) {
        const reader = new _Reader(__privateGet(this, _data2).slice(__privateGet(this, _offset) + offset), this.allowLoose, __privateGet(this, _maxInflation));
        __privateSet(reader, _parent, this);
        return reader;
      }
      // Read bytes
      readBytes(length, loose) {
        let bytes = __privateMethod(this, _peekBytes, peekBytes_fn).call(this, 0, length, !!loose);
        __privateMethod(this, _incrementBytesRead, incrementBytesRead_fn).call(this, length);
        __privateSet(this, _offset, __privateGet(this, _offset) + bytes.length);
        return bytes.slice(0, length);
      }
      // Read a numeric values
      readValue() {
        return (0, index_js_1.toBigInt)(this.readBytes(exports.WordSize));
      }
      readIndex() {
        return (0, index_js_1.toNumber)(this.readBytes(exports.WordSize));
      }
    };
    _data2 = new WeakMap();
    _offset = new WeakMap();
    _bytesRead = new WeakMap();
    _parent = new WeakMap();
    _maxInflation = new WeakMap();
    _incrementBytesRead = new WeakSet();
    incrementBytesRead_fn = function(count) {
      var _a;
      if (__privateGet(this, _parent)) {
        return __privateMethod(_a = __privateGet(this, _parent), _incrementBytesRead, incrementBytesRead_fn).call(_a, count);
      }
      __privateSet(this, _bytesRead, __privateGet(this, _bytesRead) + count);
      (0, index_js_1.assert)(__privateGet(this, _maxInflation) < 1 || __privateGet(this, _bytesRead) <= __privateGet(this, _maxInflation) * this.dataLength, `compressed ABI data exceeds inflation ratio of ${__privateGet(this, _maxInflation)} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
        buffer: (0, index_js_1.getBytesCopy)(__privateGet(this, _data2)),
        offset: __privateGet(this, _offset),
        length: count,
        info: {
          bytesRead: __privateGet(this, _bytesRead),
          dataLength: this.dataLength
        }
      });
    };
    _peekBytes = new WeakSet();
    peekBytes_fn = function(offset, length, loose) {
      let alignedLength = Math.ceil(length / exports.WordSize) * exports.WordSize;
      if (__privateGet(this, _offset) + alignedLength > __privateGet(this, _data2).length) {
        if (this.allowLoose && loose && __privateGet(this, _offset) + length <= __privateGet(this, _data2).length) {
          alignedLength = length;
        } else {
          (0, index_js_1.assert)(false, "data out-of-bounds", "BUFFER_OVERRUN", {
            buffer: (0, index_js_1.getBytesCopy)(__privateGet(this, _data2)),
            length: __privateGet(this, _data2).length,
            offset: __privateGet(this, _offset) + alignedLength
          });
        }
      }
      return __privateGet(this, _data2).slice(__privateGet(this, _offset), __privateGet(this, _offset) + alignedLength);
    };
    var Reader = _Reader;
    exports.Reader = Reader;
  }
});

// node_modules/@noble/hashes/hmac.js
var require_hmac = __commonJS({
  "node_modules/@noble/hashes/hmac.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hmac = exports.HMAC = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils();
    var HMAC = class extends utils_js_1.Hash {
      constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.hash)(hash);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        (0, _assert_js_1.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    exports.HMAC = HMAC;
    var hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
    exports.hmac = hmac;
    exports.hmac.create = (hash, key) => new HMAC(hash, key);
  }
});

// node_modules/@noble/hashes/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/@noble/hashes/pbkdf2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pbkdf2Async = exports.pbkdf2 = void 0;
    var _assert_js_1 = require_assert();
    var hmac_js_1 = require_hmac();
    var utils_js_1 = require_utils();
    function pbkdf2Init(hash, _password, _salt, _opts) {
      (0, _assert_js_1.hash)(hash);
      const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
      const { c, dkLen, asyncTick } = opts;
      (0, _assert_js_1.number)(c);
      (0, _assert_js_1.number)(dkLen);
      (0, _assert_js_1.number)(asyncTick);
      if (c < 1)
        throw new Error("PBKDF2: iterations (c) should be >= 1");
      const password = (0, utils_js_1.toBytes)(_password);
      const salt = (0, utils_js_1.toBytes)(_salt);
      const DK = new Uint8Array(dkLen);
      const PRF = hmac_js_1.hmac.create(hash, password);
      const PRFSalt = PRF._cloneInto().update(salt);
      return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
    }
    function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
      PRF.destroy();
      PRFSalt.destroy();
      if (prfW)
        prfW.destroy();
      u.fill(0);
      return DK;
    }
    function pbkdf2(hash, password, salt, opts) {
      const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for (let ui = 1; ui < c; ui++) {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        }
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
    }
    exports.pbkdf2 = pbkdf2;
    async function pbkdf2Async(hash, password, salt, opts) {
      const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        });
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
    }
    exports.pbkdf2Async = pbkdf2Async;
  }
});

// node_modules/@noble/hashes/_sha2.js
var require_sha2 = __commonJS({
  "node_modules/@noble/hashes/_sha2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SHA2 = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils();
    function setBigUint64(view, byteOffset, value, isLE) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE);
      const _32n = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE ? 4 : 0;
      const l = isLE ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE);
      view.setUint32(byteOffset + l, wl, isLE);
    }
    var SHA2 = class extends utils_js_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = (0, utils_js_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true;
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE);
      }
      digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
          to.buffer.set(buffer);
        return to;
      }
    };
    exports.SHA2 = SHA2;
  }
});

// node_modules/@noble/hashes/sha256.js
var require_sha256 = __commonJS({
  "node_modules/@noble/hashes/sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha224 = exports.sha256 = void 0;
    var _sha2_js_1 = require_sha2();
    var utils_js_1 = require_utils();
    var Chi = (a, b, c) => a & b ^ ~a & c;
    var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
    var SHA256_K = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    var IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SHA256_W = new Uint32Array(64);
    var SHA256 = class extends _sha2_js_1.SHA2 {
      constructor() {
        super(64, 32, 8, false);
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
      }
      get() {
        const { A, B, C, D: D2, E: E2, F: F2, G: G2, H: H2 } = this;
        return [A, B, C, D2, E2, F2, G2, H2];
      }
      // prettier-ignore
      set(A, B, C, D2, E2, F2, G2, H2) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D2 | 0;
        this.E = E2 | 0;
        this.F = F2 | 0;
        this.G = G2 | 0;
        this.H = H2 | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W[i - 15];
          const W2 = SHA256_W[i - 2];
          const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
          const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
          SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        let { A, B, C, D: D2, E: E2, F: F2, G: G2, H: H2 } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = (0, utils_js_1.rotr)(E2, 6) ^ (0, utils_js_1.rotr)(E2, 11) ^ (0, utils_js_1.rotr)(E2, 25);
          const T1 = H2 + sigma1 + Chi(E2, F2, G2) + SHA256_K[i] + SHA256_W[i] | 0;
          const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
          const T2 = sigma0 + Maj(A, B, C) | 0;
          H2 = G2;
          G2 = F2;
          F2 = E2;
          E2 = D2 + T1 | 0;
          D2 = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        }
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D2 = D2 + this.D | 0;
        E2 = E2 + this.E | 0;
        F2 = F2 + this.F | 0;
        G2 = G2 + this.G | 0;
        H2 = H2 + this.H | 0;
        this.set(A, B, C, D2, E2, F2, G2, H2);
      }
      roundClean() {
        SHA256_W.fill(0);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    };
    var SHA224 = class extends SHA256 {
      constructor() {
        super();
        this.A = 3238371032 | 0;
        this.B = 914150663 | 0;
        this.C = 812702999 | 0;
        this.D = 4144912697 | 0;
        this.E = 4290775857 | 0;
        this.F = 1750603025 | 0;
        this.G = 1694076839 | 0;
        this.H = 3204075428 | 0;
        this.outputLen = 28;
      }
    };
    exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
    exports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
  }
});

// node_modules/@noble/hashes/sha512.js
var require_sha512 = __commonJS({
  "node_modules/@noble/hashes/sha512.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;
    var _sha2_js_1 = require_sha2();
    var _u64_js_1 = require_u64();
    var utils_js_1 = require_utils();
    var [SHA512_Kh, SHA512_Kl] = (() => _u64_js_1.default.split([
      "0x428a2f98d728ae22",
      "0x7137449123ef65cd",
      "0xb5c0fbcfec4d3b2f",
      "0xe9b5dba58189dbbc",
      "0x3956c25bf348b538",
      "0x59f111f1b605d019",
      "0x923f82a4af194f9b",
      "0xab1c5ed5da6d8118",
      "0xd807aa98a3030242",
      "0x12835b0145706fbe",
      "0x243185be4ee4b28c",
      "0x550c7dc3d5ffb4e2",
      "0x72be5d74f27b896f",
      "0x80deb1fe3b1696b1",
      "0x9bdc06a725c71235",
      "0xc19bf174cf692694",
      "0xe49b69c19ef14ad2",
      "0xefbe4786384f25e3",
      "0x0fc19dc68b8cd5b5",
      "0x240ca1cc77ac9c65",
      "0x2de92c6f592b0275",
      "0x4a7484aa6ea6e483",
      "0x5cb0a9dcbd41fbd4",
      "0x76f988da831153b5",
      "0x983e5152ee66dfab",
      "0xa831c66d2db43210",
      "0xb00327c898fb213f",
      "0xbf597fc7beef0ee4",
      "0xc6e00bf33da88fc2",
      "0xd5a79147930aa725",
      "0x06ca6351e003826f",
      "0x142929670a0e6e70",
      "0x27b70a8546d22ffc",
      "0x2e1b21385c26c926",
      "0x4d2c6dfc5ac42aed",
      "0x53380d139d95b3df",
      "0x650a73548baf63de",
      "0x766a0abb3c77b2a8",
      "0x81c2c92e47edaee6",
      "0x92722c851482353b",
      "0xa2bfe8a14cf10364",
      "0xa81a664bbc423001",
      "0xc24b8b70d0f89791",
      "0xc76c51a30654be30",
      "0xd192e819d6ef5218",
      "0xd69906245565a910",
      "0xf40e35855771202a",
      "0x106aa07032bbd1b8",
      "0x19a4c116b8d2d0c8",
      "0x1e376c085141ab53",
      "0x2748774cdf8eeb99",
      "0x34b0bcb5e19b48a8",
      "0x391c0cb3c5c95a63",
      "0x4ed8aa4ae3418acb",
      "0x5b9cca4f7763e373",
      "0x682e6ff3d6b2b8a3",
      "0x748f82ee5defb2fc",
      "0x78a5636f43172f60",
      "0x84c87814a1f0ab72",
      "0x8cc702081a6439ec",
      "0x90befffa23631e28",
      "0xa4506cebde82bde9",
      "0xbef9a3f7b2c67915",
      "0xc67178f2e372532b",
      "0xca273eceea26619c",
      "0xd186b8c721c0c207",
      "0xeada7dd6cde0eb1e",
      "0xf57d4f7fee6ed178",
      "0x06f067aa72176fba",
      "0x0a637dc5a2c898a6",
      "0x113f9804bef90dae",
      "0x1b710b35131c471b",
      "0x28db77f523047d84",
      "0x32caab7b40c72493",
      "0x3c9ebe0a15c9bebc",
      "0x431d67c49c100d4c",
      "0x4cc5d4becb3e42b6",
      "0x597f299cfc657e2a",
      "0x5fcb6fab3ad6faec",
      "0x6c44198c4a475817"
    ].map((n) => BigInt(n))))();
    var SHA512_W_H = new Uint32Array(80);
    var SHA512_W_L = new Uint32Array(80);
    var SHA512 = class extends _sha2_js_1.SHA2 {
      constructor() {
        super(128, 64, 16, false);
        this.Ah = 1779033703 | 0;
        this.Al = 4089235720 | 0;
        this.Bh = 3144134277 | 0;
        this.Bl = 2227873595 | 0;
        this.Ch = 1013904242 | 0;
        this.Cl = 4271175723 | 0;
        this.Dh = 2773480762 | 0;
        this.Dl = 1595750129 | 0;
        this.Eh = 1359893119 | 0;
        this.El = 2917565137 | 0;
        this.Fh = 2600822924 | 0;
        this.Fl = 725511199 | 0;
        this.Gh = 528734635 | 0;
        this.Gl = 4215389547 | 0;
        this.Hh = 1541459225 | 0;
        this.Hl = 327033209 | 0;
      }
      // prettier-ignore
      get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
      }
      // prettier-ignore
      set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4) {
          SHA512_W_H[i] = view.getUint32(offset);
          SHA512_W_L[i] = view.getUint32(offset += 4);
        }
        for (let i = 16; i < 80; i++) {
          const W15h = SHA512_W_H[i - 15] | 0;
          const W15l = SHA512_W_L[i - 15] | 0;
          const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
          const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
          const W2h = SHA512_W_H[i - 2] | 0;
          const W2l = SHA512_W_L[i - 2] | 0;
          const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
          const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
          const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
          const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
          SHA512_W_H[i] = SUMh | 0;
          SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        for (let i = 0; i < 80; i++) {
          const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
          const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
          const CHIh = Eh & Fh ^ ~Eh & Gh;
          const CHIl = El & Fl ^ ~El & Gl;
          const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
          const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
          const T1l = T1ll | 0;
          const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
          const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
          const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
          const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
          Hh = Gh | 0;
          Hl = Gl | 0;
          Gh = Fh | 0;
          Gl = Fl | 0;
          Fh = Eh | 0;
          Fl = El | 0;
          ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
          Dh = Ch | 0;
          Dl = Cl | 0;
          Ch = Bh | 0;
          Cl = Bl | 0;
          Bh = Ah | 0;
          Bl = Al | 0;
          const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
          Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
          Al = All | 0;
        }
        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
      roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
      }
      destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    };
    exports.SHA512 = SHA512;
    var SHA512_224 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 2352822216 | 0;
        this.Al = 424955298 | 0;
        this.Bh = 1944164710 | 0;
        this.Bl = 2312950998 | 0;
        this.Ch = 502970286 | 0;
        this.Cl = 855612546 | 0;
        this.Dh = 1738396948 | 0;
        this.Dl = 1479516111 | 0;
        this.Eh = 258812777 | 0;
        this.El = 2077511080 | 0;
        this.Fh = 2011393907 | 0;
        this.Fl = 79989058 | 0;
        this.Gh = 1067287976 | 0;
        this.Gl = 1780299464 | 0;
        this.Hh = 286451373 | 0;
        this.Hl = 2446758561 | 0;
        this.outputLen = 28;
      }
    };
    var SHA512_256 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 573645204 | 0;
        this.Al = 4230739756 | 0;
        this.Bh = 2673172387 | 0;
        this.Bl = 3360449730 | 0;
        this.Ch = 596883563 | 0;
        this.Cl = 1867755857 | 0;
        this.Dh = 2520282905 | 0;
        this.Dl = 1497426621 | 0;
        this.Eh = 2519219938 | 0;
        this.El = 2827943907 | 0;
        this.Fh = 3193839141 | 0;
        this.Fl = 1401305490 | 0;
        this.Gh = 721525244 | 0;
        this.Gl = 746961066 | 0;
        this.Hh = 246885852 | 0;
        this.Hl = 2177182882 | 0;
        this.outputLen = 32;
      }
    };
    var SHA384 = class extends SHA512 {
      constructor() {
        super();
        this.Ah = 3418070365 | 0;
        this.Al = 3238371032 | 0;
        this.Bh = 1654270250 | 0;
        this.Bl = 914150663 | 0;
        this.Ch = 2438529370 | 0;
        this.Cl = 812702999 | 0;
        this.Dh = 355462360 | 0;
        this.Dl = 4144912697 | 0;
        this.Eh = 1731405415 | 0;
        this.El = 4290775857 | 0;
        this.Fh = 2394180231 | 0;
        this.Fl = 1750603025 | 0;
        this.Gh = 3675008525 | 0;
        this.Gl = 1694076839 | 0;
        this.Hh = 1203062813 | 0;
        this.Hl = 3204075428 | 0;
        this.outputLen = 48;
      }
    };
    exports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());
    exports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());
    exports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());
    exports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());
  }
});

// node_modules/ethers/lib.commonjs/crypto/crypto-browser.js
var require_crypto_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/crypto-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.pbkdf2Sync = exports.createHmac = exports.createHash = void 0;
    var hmac_1 = require_hmac();
    var pbkdf2_1 = require_pbkdf2();
    var sha256_1 = require_sha256();
    var sha512_1 = require_sha512();
    var index_js_1 = require_utils3();
    function getGlobal() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    }
    var anyGlobal = getGlobal();
    var crypto = anyGlobal.crypto || anyGlobal.msCrypto;
    function createHash(algo) {
      switch (algo) {
        case "sha256":
          return sha256_1.sha256.create();
        case "sha512":
          return sha512_1.sha512.create();
      }
      (0, index_js_1.assertArgument)(false, "invalid hashing algorithm name", "algorithm", algo);
    }
    exports.createHash = createHash;
    function createHmac(_algo, key) {
      const algo = { sha256: sha256_1.sha256, sha512: sha512_1.sha512 }[_algo];
      (0, index_js_1.assertArgument)(algo != null, "invalid hmac algorithm", "algorithm", _algo);
      return hmac_1.hmac.create(algo, key);
    }
    exports.createHmac = createHmac;
    function pbkdf2Sync(password, salt, iterations, keylen, _algo) {
      const algo = { sha256: sha256_1.sha256, sha512: sha512_1.sha512 }[_algo];
      (0, index_js_1.assertArgument)(algo != null, "invalid pbkdf2 algorithm", "algorithm", _algo);
      return (0, pbkdf2_1.pbkdf2)(algo, password, salt, { c: iterations, dkLen: keylen });
    }
    exports.pbkdf2Sync = pbkdf2Sync;
    function randomBytes(length) {
      (0, index_js_1.assert)(crypto != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
        operation: "randomBytes"
      });
      (0, index_js_1.assertArgument)(Number.isInteger(length) && length > 0 && length <= 1024, "invalid length", "length", length);
      const result = new Uint8Array(length);
      crypto.getRandomValues(result);
      return result;
    }
    exports.randomBytes = randomBytes;
  }
});

// node_modules/ethers/lib.commonjs/crypto/hmac.js
var require_hmac2 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/hmac.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.computeHmac = void 0;
    var crypto_js_1 = require_crypto_browser();
    var index_js_1 = require_utils3();
    var locked = false;
    var _computeHmac = function(algorithm, key, data) {
      return (0, crypto_js_1.createHmac)(algorithm, key).update(data).digest();
    };
    var __computeHmac = _computeHmac;
    function computeHmac(algorithm, _key, _data) {
      const key = (0, index_js_1.getBytes)(_key, "key");
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__computeHmac(algorithm, key, data));
    }
    exports.computeHmac = computeHmac;
    computeHmac._ = _computeHmac;
    computeHmac.lock = function() {
      locked = true;
    };
    computeHmac.register = function(func) {
      if (locked) {
        throw new Error("computeHmac is locked");
      }
      __computeHmac = func;
    };
    Object.freeze(computeHmac);
  }
});

// node_modules/ethers/lib.commonjs/crypto/keccak.js
var require_keccak = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/keccak.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keccak256 = void 0;
    var sha3_1 = require_sha3();
    var index_js_1 = require_utils3();
    var locked = false;
    var _keccak256 = function(data) {
      return (0, sha3_1.keccak_256)(data);
    };
    var __keccak256 = _keccak256;
    function keccak256(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__keccak256(data));
    }
    exports.keccak256 = keccak256;
    keccak256._ = _keccak256;
    keccak256.lock = function() {
      locked = true;
    };
    keccak256.register = function(func) {
      if (locked) {
        throw new TypeError("keccak256 is locked");
      }
      __keccak256 = func;
    };
    Object.freeze(keccak256);
  }
});

// node_modules/@noble/hashes/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/@noble/hashes/ripemd160.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ripemd160 = exports.RIPEMD160 = void 0;
    var _sha2_js_1 = require_sha2();
    var utils_js_1 = require_utils();
    var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
    var Id = Uint8Array.from({ length: 16 }, (_, i) => i);
    var Pi = Id.map((i) => (9 * i + 5) % 16);
    var idxL = [Id];
    var idxR = [Pi];
    for (let i = 0; i < 4; i++)
      for (let j2 of [idxL, idxR])
        j2.push(j2[i].map((k) => Rho[k]));
    var shifts = [
      [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
      [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
      [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
      [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
      [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
    ].map((i) => new Uint8Array(i));
    var shiftsL = idxL.map((idx, i) => idx.map((j2) => shifts[i][j2]));
    var shiftsR = idxR.map((idx, i) => idx.map((j2) => shifts[i][j2]));
    var Kl = new Uint32Array([
      0,
      1518500249,
      1859775393,
      2400959708,
      2840853838
    ]);
    var Kr = new Uint32Array([
      1352829926,
      1548603684,
      1836072691,
      2053994217,
      0
    ]);
    var rotl = (word, shift) => word << shift | word >>> 32 - shift;
    function f(group, x2, y, z2) {
      if (group === 0)
        return x2 ^ y ^ z2;
      else if (group === 1)
        return x2 & y | ~x2 & z2;
      else if (group === 2)
        return (x2 | ~y) ^ z2;
      else if (group === 3)
        return x2 & z2 | y & ~z2;
      else
        return x2 ^ (y | ~z2);
    }
    var BUF = new Uint32Array(16);
    var RIPEMD160 = class extends _sha2_js_1.SHA2 {
      constructor() {
        super(64, 20, 8, true);
        this.h0 = 1732584193 | 0;
        this.h1 = 4023233417 | 0;
        this.h2 = 2562383102 | 0;
        this.h3 = 271733878 | 0;
        this.h4 = 3285377520 | 0;
      }
      get() {
        const { h0, h1, h2, h3, h4 } = this;
        return [h0, h1, h2, h3, h4];
      }
      set(h0, h1, h2, h3, h4) {
        this.h0 = h0 | 0;
        this.h1 = h1 | 0;
        this.h2 = h2 | 0;
        this.h3 = h3 | 0;
        this.h4 = h4 | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          BUF[i] = view.getUint32(offset, true);
        let al = this.h0 | 0, ar2 = al, bl = this.h1 | 0, br2 = bl, cl = this.h2 | 0, cr2 = cl, dl = this.h3 | 0, dr2 = dl, el = this.h4 | 0, er2 = el;
        for (let group = 0; group < 5; group++) {
          const rGroup = 4 - group;
          const hbl = Kl[group], hbr = Kr[group];
          const rl = idxL[group], rr2 = idxR[group];
          const sl = shiftsL[group], sr2 = shiftsR[group];
          for (let i = 0; i < 16; i++) {
            const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
            al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
          }
          for (let i = 0; i < 16; i++) {
            const tr2 = rotl(ar2 + f(rGroup, br2, cr2, dr2) + BUF[rr2[i]] + hbr, sr2[i]) + er2 | 0;
            ar2 = er2, er2 = dr2, dr2 = rotl(cr2, 10) | 0, cr2 = br2, br2 = tr2;
          }
        }
        this.set(this.h1 + cl + dr2 | 0, this.h2 + dl + er2 | 0, this.h3 + el + ar2 | 0, this.h4 + al + br2 | 0, this.h0 + bl + cr2 | 0);
      }
      roundClean() {
        BUF.fill(0);
      }
      destroy() {
        this.destroyed = true;
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0);
      }
    };
    exports.RIPEMD160 = RIPEMD160;
    exports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
  }
});

// node_modules/ethers/lib.commonjs/crypto/ripemd160.js
var require_ripemd1602 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/ripemd160.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ripemd160 = void 0;
    var ripemd160_1 = require_ripemd160();
    var index_js_1 = require_utils3();
    var locked = false;
    var _ripemd160 = function(data) {
      return (0, ripemd160_1.ripemd160)(data);
    };
    var __ripemd160 = _ripemd160;
    function ripemd160(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__ripemd160(data));
    }
    exports.ripemd160 = ripemd160;
    ripemd160._ = _ripemd160;
    ripemd160.lock = function() {
      locked = true;
    };
    ripemd160.register = function(func) {
      if (locked) {
        throw new TypeError("ripemd160 is locked");
      }
      __ripemd160 = func;
    };
    Object.freeze(ripemd160);
  }
});

// node_modules/ethers/lib.commonjs/crypto/pbkdf2.js
var require_pbkdf22 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/pbkdf2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pbkdf2 = void 0;
    var crypto_js_1 = require_crypto_browser();
    var index_js_1 = require_utils3();
    var locked = false;
    var _pbkdf2 = function(password, salt, iterations, keylen, algo) {
      return (0, crypto_js_1.pbkdf2Sync)(password, salt, iterations, keylen, algo);
    };
    var __pbkdf2 = _pbkdf2;
    function pbkdf2(_password, _salt, iterations, keylen, algo) {
      const password = (0, index_js_1.getBytes)(_password, "password");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(__pbkdf2(password, salt, iterations, keylen, algo));
    }
    exports.pbkdf2 = pbkdf2;
    pbkdf2._ = _pbkdf2;
    pbkdf2.lock = function() {
      locked = true;
    };
    pbkdf2.register = function(func) {
      if (locked) {
        throw new Error("pbkdf2 is locked");
      }
      __pbkdf2 = func;
    };
    Object.freeze(pbkdf2);
  }
});

// node_modules/ethers/lib.commonjs/crypto/random.js
var require_random = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/random.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = void 0;
    var crypto_js_1 = require_crypto_browser();
    var locked = false;
    var _randomBytes = function(length) {
      return new Uint8Array((0, crypto_js_1.randomBytes)(length));
    };
    var __randomBytes = _randomBytes;
    function randomBytes(length) {
      return __randomBytes(length);
    }
    exports.randomBytes = randomBytes;
    randomBytes._ = _randomBytes;
    randomBytes.lock = function() {
      locked = true;
    };
    randomBytes.register = function(func) {
      if (locked) {
        throw new Error("randomBytes is locked");
      }
      __randomBytes = func;
    };
    Object.freeze(randomBytes);
  }
});

// node_modules/@noble/hashes/scrypt.js
var require_scrypt = __commonJS({
  "node_modules/@noble/hashes/scrypt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scryptAsync = exports.scrypt = void 0;
    var _assert_js_1 = require_assert();
    var sha256_js_1 = require_sha256();
    var pbkdf2_js_1 = require_pbkdf2();
    var utils_js_1 = require_utils();
    var rotl = (a, b) => a << b | a >>> 32 - b;
    function XorAndSalsa(prev, pi, input, ii, out, oi) {
      let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
      let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
      let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
      let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
      let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
      let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
      let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
      let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
      let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
      for (let i = 0; i < 8; i += 2) {
        x04 ^= rotl(x00 + x12 | 0, 7);
        x08 ^= rotl(x04 + x00 | 0, 9);
        x12 ^= rotl(x08 + x04 | 0, 13);
        x00 ^= rotl(x12 + x08 | 0, 18);
        x09 ^= rotl(x05 + x01 | 0, 7);
        x13 ^= rotl(x09 + x05 | 0, 9);
        x01 ^= rotl(x13 + x09 | 0, 13);
        x05 ^= rotl(x01 + x13 | 0, 18);
        x14 ^= rotl(x10 + x06 | 0, 7);
        x02 ^= rotl(x14 + x10 | 0, 9);
        x06 ^= rotl(x02 + x14 | 0, 13);
        x10 ^= rotl(x06 + x02 | 0, 18);
        x03 ^= rotl(x15 + x11 | 0, 7);
        x07 ^= rotl(x03 + x15 | 0, 9);
        x11 ^= rotl(x07 + x03 | 0, 13);
        x15 ^= rotl(x11 + x07 | 0, 18);
        x01 ^= rotl(x00 + x03 | 0, 7);
        x02 ^= rotl(x01 + x00 | 0, 9);
        x03 ^= rotl(x02 + x01 | 0, 13);
        x00 ^= rotl(x03 + x02 | 0, 18);
        x06 ^= rotl(x05 + x04 | 0, 7);
        x07 ^= rotl(x06 + x05 | 0, 9);
        x04 ^= rotl(x07 + x06 | 0, 13);
        x05 ^= rotl(x04 + x07 | 0, 18);
        x11 ^= rotl(x10 + x09 | 0, 7);
        x08 ^= rotl(x11 + x10 | 0, 9);
        x09 ^= rotl(x08 + x11 | 0, 13);
        x10 ^= rotl(x09 + x08 | 0, 18);
        x12 ^= rotl(x15 + x14 | 0, 7);
        x13 ^= rotl(x12 + x15 | 0, 9);
        x14 ^= rotl(x13 + x12 | 0, 13);
        x15 ^= rotl(x14 + x13 | 0, 18);
      }
      out[oi++] = y00 + x00 | 0;
      out[oi++] = y01 + x01 | 0;
      out[oi++] = y02 + x02 | 0;
      out[oi++] = y03 + x03 | 0;
      out[oi++] = y04 + x04 | 0;
      out[oi++] = y05 + x05 | 0;
      out[oi++] = y06 + x06 | 0;
      out[oi++] = y07 + x07 | 0;
      out[oi++] = y08 + x08 | 0;
      out[oi++] = y09 + x09 | 0;
      out[oi++] = y10 + x10 | 0;
      out[oi++] = y11 + x11 | 0;
      out[oi++] = y12 + x12 | 0;
      out[oi++] = y13 + x13 | 0;
      out[oi++] = y14 + x14 | 0;
      out[oi++] = y15 + x15 | 0;
    }
    function BlockMix(input, ii, out, oi, r) {
      let head = oi + 0;
      let tail = oi + 16 * r;
      for (let i = 0; i < 16; i++)
        out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
      for (let i = 0; i < r; i++, head += 16, ii += 16) {
        XorAndSalsa(out, tail, input, ii, out, head);
        if (i > 0)
          tail += 16;
        XorAndSalsa(out, head, input, ii += 16, out, tail);
      }
    }
    function scryptInit(password, salt, _opts) {
      const opts = (0, utils_js_1.checkOpts)({
        dkLen: 32,
        asyncTick: 10,
        maxmem: 1024 ** 3 + 1024
      }, _opts);
      const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
      (0, _assert_js_1.number)(N);
      (0, _assert_js_1.number)(r);
      (0, _assert_js_1.number)(p);
      (0, _assert_js_1.number)(dkLen);
      (0, _assert_js_1.number)(asyncTick);
      (0, _assert_js_1.number)(maxmem);
      if (onProgress !== void 0 && typeof onProgress !== "function")
        throw new Error("progressCb should be function");
      const blockSize = 128 * r;
      const blockSize32 = blockSize / 4;
      if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
        throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
      }
      if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
        throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
      }
      if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
        throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
      }
      const memUsed = blockSize * (N + p);
      if (memUsed > maxmem) {
        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
      }
      const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });
      const B32 = (0, utils_js_1.u32)(B);
      const V2 = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));
      const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));
      let blockMixCb = () => {
      };
      if (onProgress) {
        const totalBlockMix = 2 * N * p;
        const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
        let blockMixCnt = 0;
        blockMixCb = () => {
          blockMixCnt++;
          if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
            onProgress(blockMixCnt / totalBlockMix);
        };
      }
      return { N, r, p, dkLen, blockSize32, V: V2, B32, B, tmp, blockMixCb, asyncTick };
    }
    function scryptOutput(password, dkLen, B, V2, tmp) {
      const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });
      B.fill(0);
      V2.fill(0);
      tmp.fill(0);
      return res;
    }
    function scrypt(password, salt, opts) {
      const { N, r, p, dkLen, blockSize32, V: V2, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
      for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
          V2[i] = B32[Pi + i];
        for (let i = 0, pos = 0; i < N - 1; i++) {
          BlockMix(V2, pos, V2, pos += blockSize32, r);
          blockMixCb();
        }
        BlockMix(V2, (N - 1) * blockSize32, B32, Pi, r);
        blockMixCb();
        for (let i = 0; i < N; i++) {
          const j2 = B32[Pi + blockSize32 - 16] % N;
          for (let k = 0; k < blockSize32; k++)
            tmp[k] = B32[Pi + k] ^ V2[j2 * blockSize32 + k];
          BlockMix(tmp, 0, B32, Pi, r);
          blockMixCb();
        }
      }
      return scryptOutput(password, dkLen, B, V2, tmp);
    }
    exports.scrypt = scrypt;
    async function scryptAsync(password, salt, opts) {
      const { N, r, p, dkLen, blockSize32, V: V2, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
      for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
          V2[i] = B32[Pi + i];
        let pos = 0;
        await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, () => {
          BlockMix(V2, pos, V2, pos += blockSize32, r);
          blockMixCb();
        });
        BlockMix(V2, (N - 1) * blockSize32, B32, Pi, r);
        blockMixCb();
        await (0, utils_js_1.asyncLoop)(N, asyncTick, () => {
          const j2 = B32[Pi + blockSize32 - 16] % N;
          for (let k = 0; k < blockSize32; k++)
            tmp[k] = B32[Pi + k] ^ V2[j2 * blockSize32 + k];
          BlockMix(tmp, 0, B32, Pi, r);
          blockMixCb();
        });
      }
      return scryptOutput(password, dkLen, B, V2, tmp);
    }
    exports.scryptAsync = scryptAsync;
  }
});

// node_modules/ethers/lib.commonjs/crypto/scrypt.js
var require_scrypt2 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/scrypt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scryptSync = exports.scrypt = void 0;
    var scrypt_1 = require_scrypt();
    var index_js_1 = require_utils3();
    var lockedSync = false;
    var lockedAsync = false;
    var _scryptAsync = async function(passwd, salt, N, r, p, dkLen, onProgress) {
      return await (0, scrypt_1.scryptAsync)(passwd, salt, { N, r, p, dkLen, onProgress });
    };
    var _scryptSync = function(passwd, salt, N, r, p, dkLen) {
      return (0, scrypt_1.scrypt)(passwd, salt, { N, r, p, dkLen });
    };
    var __scryptAsync = _scryptAsync;
    var __scryptSync = _scryptSync;
    async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {
      const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));
    }
    exports.scrypt = scrypt;
    scrypt._ = _scryptAsync;
    scrypt.lock = function() {
      lockedAsync = true;
    };
    scrypt.register = function(func) {
      if (lockedAsync) {
        throw new Error("scrypt is locked");
      }
      __scryptAsync = func;
    };
    Object.freeze(scrypt);
    function scryptSync(_passwd, _salt, N, r, p, dkLen) {
      const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(__scryptSync(passwd, salt, N, r, p, dkLen));
    }
    exports.scryptSync = scryptSync;
    scryptSync._ = _scryptSync;
    scryptSync.lock = function() {
      lockedSync = true;
    };
    scryptSync.register = function(func) {
      if (lockedSync) {
        throw new Error("scryptSync is locked");
      }
      __scryptSync = func;
    };
    Object.freeze(scryptSync);
  }
});

// node_modules/ethers/lib.commonjs/crypto/sha2.js
var require_sha22 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/sha2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha512 = exports.sha256 = void 0;
    var crypto_js_1 = require_crypto_browser();
    var index_js_1 = require_utils3();
    var _sha256 = function(data) {
      return (0, crypto_js_1.createHash)("sha256").update(data).digest();
    };
    var _sha512 = function(data) {
      return (0, crypto_js_1.createHash)("sha512").update(data).digest();
    };
    var __sha256 = _sha256;
    var __sha512 = _sha512;
    var locked256 = false;
    var locked512 = false;
    function sha256(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__sha256(data));
    }
    exports.sha256 = sha256;
    sha256._ = _sha256;
    sha256.lock = function() {
      locked256 = true;
    };
    sha256.register = function(func) {
      if (locked256) {
        throw new Error("sha256 is locked");
      }
      __sha256 = func;
    };
    Object.freeze(sha256);
    function sha512(_data) {
      const data = (0, index_js_1.getBytes)(_data, "data");
      return (0, index_js_1.hexlify)(__sha512(data));
    }
    exports.sha512 = sha512;
    sha512._ = _sha512;
    sha512.lock = function() {
      locked512 = true;
    };
    sha512.register = function(func) {
      if (locked512) {
        throw new Error("sha512 is locked");
      }
      __sha512 = func;
    };
    Object.freeze(sha256);
  }
});

// node_modules/@noble/curves/abstract/utils.js
var require_utils4 = __commonJS({
  "node_modules/@noble/curves/abstract/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateObject = exports.createHmacDrbg = exports.bitMask = exports.bitSet = exports.bitGet = exports.bitLen = exports.utf8ToBytes = exports.equalBytes = exports.concatBytes = exports.ensureBytes = exports.numberToVarBytesBE = exports.numberToBytesLE = exports.numberToBytesBE = exports.bytesToNumberLE = exports.bytesToNumberBE = exports.hexToBytes = exports.hexToNumber = exports.numberToHexUnpadded = exports.bytesToHex = void 0;
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var u8a = (a) => a instanceof Uint8Array;
    var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      if (!u8a(bytes))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    exports.bytesToHex = bytesToHex;
    function numberToHexUnpadded(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    }
    exports.numberToHexUnpadded = numberToHexUnpadded;
    function hexToNumber(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      return BigInt(hex === "" ? "0" : `0x${hex}`);
    }
    exports.hexToNumber = hexToNumber;
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array = new Uint8Array(len / 2);
      for (let i = 0; i < array.length; i++) {
        const j2 = i * 2;
        const hexByte = hex.slice(j2, j2 + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array[i] = byte;
      }
      return array;
    }
    exports.hexToBytes = hexToBytes;
    function bytesToNumberBE(bytes) {
      return hexToNumber(bytesToHex(bytes));
    }
    exports.bytesToNumberBE = bytesToNumberBE;
    function bytesToNumberLE(bytes) {
      if (!u8a(bytes))
        throw new Error("Uint8Array expected");
      return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
    }
    exports.bytesToNumberLE = bytesToNumberLE;
    function numberToBytesBE(n, len) {
      return hexToBytes(n.toString(16).padStart(len * 2, "0"));
    }
    exports.numberToBytesBE = numberToBytesBE;
    function numberToBytesLE(n, len) {
      return numberToBytesBE(n, len).reverse();
    }
    exports.numberToBytesLE = numberToBytesLE;
    function numberToVarBytesBE(n) {
      return hexToBytes(numberToHexUnpadded(n));
    }
    exports.numberToVarBytesBE = numberToVarBytesBE;
    function ensureBytes(title, hex, expectedLength) {
      let res;
      if (typeof hex === "string") {
        try {
          res = hexToBytes(hex);
        } catch (e) {
          throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
        }
      } else if (u8a(hex)) {
        res = Uint8Array.from(hex);
      } else {
        throw new Error(`${title} must be hex string or Uint8Array`);
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
      return res;
    }
    exports.ensureBytes = ensureBytes;
    function concatBytes(...arrays) {
      const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad = 0;
      arrays.forEach((a) => {
        if (!u8a(a))
          throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
      });
      return r;
    }
    exports.concatBytes = concatBytes;
    function equalBytes(b1, b2) {
      if (b1.length !== b2.length)
        return false;
      for (let i = 0; i < b1.length; i++)
        if (b1[i] !== b2[i])
          return false;
      return true;
    }
    exports.equalBytes = equalBytes;
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports.utf8ToBytes = utf8ToBytes;
    function bitLen(n) {
      let len;
      for (len = 0; n > _0n; n >>= _1n, len += 1)
        ;
      return len;
    }
    exports.bitLen = bitLen;
    function bitGet(n, pos) {
      return n >> BigInt(pos) & _1n;
    }
    exports.bitGet = bitGet;
    var bitSet = (n, pos, value) => {
      return n | (value ? _1n : _0n) << BigInt(pos);
    };
    exports.bitSet = bitSet;
    var bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;
    exports.bitMask = bitMask;
    var u8n = (data) => new Uint8Array(data);
    var u8fr = (arr) => Uint8Array.from(arr);
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v = u8n(hashLen);
      let k = u8n(hashLen);
      let i = 0;
      const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
      };
      const h = (...b) => hmacFn(k, v, ...b);
      const reseed = (seed = u8n()) => {
        k = h(u8fr([0]), seed);
        v = h();
        if (seed.length === 0)
          return;
        k = h(u8fr([1]), seed);
        v = h();
      };
      const gen = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v = h();
          const sl = v.slice();
          out.push(sl);
          len += v.length;
        }
        return concatBytes(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    exports.createHmacDrbg = createHmacDrbg;
    var validatorFns = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject(object, validators, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== "function")
          throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object)) {
          throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
        }
      };
      for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
      return object;
    }
    exports.validateObject = validateObject;
  }
});

// node_modules/@noble/curves/abstract/modular.js
var require_modular = __commonJS({
  "node_modules/@noble/curves/abstract/modular.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapHashToField = exports.getMinHashLength = exports.getFieldBytesLength = exports.hashToPrivateScalar = exports.FpSqrtEven = exports.FpSqrtOdd = exports.Field = exports.nLength = exports.FpIsSquare = exports.FpDiv = exports.FpInvertBatch = exports.FpPow = exports.validateField = exports.isNegativeLE = exports.FpSqrt = exports.tonelliShanks = exports.invert = exports.pow2 = exports.pow = exports.mod = void 0;
    var utils_js_1 = require_utils4();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    var _5n = BigInt(5);
    var _8n = BigInt(8);
    var _9n = BigInt(9);
    var _16n = BigInt(16);
    function mod(a, b) {
      const result = a % b;
      return result >= _0n ? result : b + result;
    }
    exports.mod = mod;
    function pow(num, power, modulo) {
      if (modulo <= _0n || power < _0n)
        throw new Error("Expected power/modulo > 0");
      if (modulo === _1n)
        return _0n;
      let res = _1n;
      while (power > _0n) {
        if (power & _1n)
          res = res * num % modulo;
        num = num * num % modulo;
        power >>= _1n;
      }
      return res;
    }
    exports.pow = pow;
    function pow2(x2, power, modulo) {
      let res = x2;
      while (power-- > _0n) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    exports.pow2 = pow2;
    function invert(number, modulo) {
      if (number === _0n || modulo <= _0n) {
        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
      }
      let a = mod(number, modulo);
      let b = modulo;
      let x2 = _0n, y = _1n, u = _1n, v = _0n;
      while (a !== _0n) {
        const q2 = b / a;
        const r = b % a;
        const m = x2 - u * q2;
        const n = y - v * q2;
        b = a, a = r, x2 = u, y = v, u = m, v = n;
      }
      const gcd = b;
      if (gcd !== _1n)
        throw new Error("invert: does not exist");
      return mod(x2, modulo);
    }
    exports.invert = invert;
    function tonelliShanks(P2) {
      const legendreC = (P2 - _1n) / _2n;
      let Q2, S, Z2;
      for (Q2 = P2 - _1n, S = 0; Q2 % _2n === _0n; Q2 /= _2n, S++)
        ;
      for (Z2 = _2n; Z2 < P2 && pow(Z2, legendreC, P2) !== P2 - _1n; Z2++)
        ;
      if (S === 1) {
        const p1div4 = (P2 + _1n) / _4n;
        return function tonelliFast(Fp, n) {
          const root = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      const Q1div2 = (Q2 + _1n) / _2n;
      return function tonelliSlow(Fp, n) {
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
          throw new Error("Cannot find square root");
        let r = S;
        let g = Fp.pow(Fp.mul(Fp.ONE, Z2), Q2);
        let x2 = Fp.pow(n, Q1div2);
        let b = Fp.pow(n, Q2);
        while (!Fp.eql(b, Fp.ONE)) {
          if (Fp.eql(b, Fp.ZERO))
            return Fp.ZERO;
          let m = 1;
          for (let t2 = Fp.sqr(b); m < r; m++) {
            if (Fp.eql(t2, Fp.ONE))
              break;
            t2 = Fp.sqr(t2);
          }
          const ge2 = Fp.pow(g, _1n << BigInt(r - m - 1));
          g = Fp.sqr(ge2);
          x2 = Fp.mul(x2, ge2);
          b = Fp.mul(b, g);
          r = m;
        }
        return x2;
      };
    }
    exports.tonelliShanks = tonelliShanks;
    function FpSqrt(P2) {
      if (P2 % _4n === _3n) {
        const p1div4 = (P2 + _1n) / _4n;
        return function sqrt3mod4(Fp, n) {
          const root = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P2 % _8n === _5n) {
        const c1 = (P2 - _5n) / _8n;
        return function sqrt5mod8(Fp, n) {
          const n2 = Fp.mul(n, _2n);
          const v = Fp.pow(n2, c1);
          const nv = Fp.mul(n, v);
          const i = Fp.mul(Fp.mul(nv, _2n), v);
          const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P2 % _16n === _9n) {
      }
      return tonelliShanks(P2);
    }
    exports.FpSqrt = FpSqrt;
    var isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;
    exports.isNegativeLE = isNegativeLE;
    var FIELD_FIELDS = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = "function";
        return map;
      }, initial);
      return (0, utils_js_1.validateObject)(field, opts);
    }
    exports.validateField = validateField;
    function FpPow(f, num, power) {
      if (power < _0n)
        throw new Error("Expected power > 0");
      if (power === _0n)
        return f.ONE;
      if (power === _1n)
        return num;
      let p = f.ONE;
      let d = num;
      while (power > _0n) {
        if (power & _1n)
          p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n;
      }
      return p;
    }
    exports.FpPow = FpPow;
    function FpInvertBatch(f, nums) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
      }, f.ONE);
      const inverted = f.inv(lastMultiplied);
      nums.reduceRight((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
      }, inverted);
      return tmp;
    }
    exports.FpInvertBatch = FpInvertBatch;
    function FpDiv(f, lhs, rhs) {
      return f.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f.ORDER) : f.inv(rhs));
    }
    exports.FpDiv = FpDiv;
    function FpIsSquare(f) {
      const legendreConst = (f.ORDER - _1n) / _2n;
      return (x2) => {
        const p = f.pow(x2, legendreConst);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
      };
    }
    exports.FpIsSquare = FpIsSquare;
    function nLength(n, nBitLength) {
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    exports.nLength = nLength;
    function Field(ORDER, bitLen, isLE = false, redef = {}) {
      if (ORDER <= _0n)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
      if (BYTES > 2048)
        throw new Error("Field lengths over 2048 bytes are not supported");
      const sqrtP = FpSqrt(ORDER);
      const f = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0, utils_js_1.bitMask)(BITS),
        ZERO: _0n,
        ONE: _1n,
        create: (num) => mod(num, ORDER),
        isValid: (num) => {
          if (typeof num !== "bigint")
            throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
          return _0n <= num && num < ORDER;
        },
        is0: (num) => num === _0n,
        isOdd: (num) => (num & _1n) === _1n,
        neg: (num) => mod(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod(num * num, ORDER),
        add: (lhs, rhs) => mod(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f, num, power),
        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
        invertBatch: (lst) => FpInvertBatch(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c) => c ? b : a,
        toBytes: (num) => isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes) => {
          if (bytes.length !== BYTES)
            throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
          return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);
        }
      });
      return Object.freeze(f);
    }
    exports.Field = Field;
    function FpSqrtOdd(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp.sqrt(elm);
      return Fp.isOdd(root) ? root : Fp.neg(root);
    }
    exports.FpSqrtOdd = FpSqrtOdd;
    function FpSqrtEven(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp.sqrt(elm);
      return Fp.isOdd(root) ? Fp.neg(root) : root;
    }
    exports.FpSqrtEven = FpSqrtEven;
    function hashToPrivateScalar(hash, groupOrder, isLE = false) {
      hash = (0, utils_js_1.ensureBytes)("privateHash", hash);
      const hashLen = hash.length;
      const minLen = nLength(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
      const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);
      return mod(num, groupOrder - _1n) + _1n;
    }
    exports.hashToPrivateScalar = hashToPrivateScalar;
    function getFieldBytesLength(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    exports.getFieldBytesLength = getFieldBytesLength;
    function getMinHashLength(fieldOrder) {
      const length = getFieldBytesLength(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    exports.getMinHashLength = getMinHashLength;
    function mapHashToField(key, fieldOrder, isLE = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength(fieldOrder);
      const minLen = getMinHashLength(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
      const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
      const reduced = mod(num, fieldOrder - _1n) + _1n;
      return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
    }
    exports.mapHashToField = mapHashToField;
  }
});

// node_modules/@noble/curves/abstract/curve.js
var require_curve = __commonJS({
  "node_modules/@noble/curves/abstract/curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateBasic = exports.wNAF = void 0;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils4();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    function wNAF(c, bits) {
      const constTimeNegate = (condition, item) => {
        const neg = item.negate();
        return condition ? neg : item;
      };
      const opts = (W2) => {
        const windows = Math.ceil(bits / W2) + 1;
        const windowSize = 2 ** (W2 - 1);
        return { windows, windowSize };
      };
      return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder(elm, n) {
          let p = c.ZERO;
          let d = elm;
          while (n > _0n) {
            if (n & _1n)
              p = p.add(d);
            d = d.double();
            n >>= _1n;
          }
          return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W2) {
          const { windows, windowSize } = opts(W2);
          const points = [];
          let p = elm;
          let base = p;
          for (let window2 = 0; window2 < windows; window2++) {
            base = p;
            points.push(base);
            for (let i = 1; i < windowSize; i++) {
              base = base.add(p);
              points.push(base);
            }
            p = base.double();
          }
          return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W2, precomputes, n) {
          const { windows, windowSize } = opts(W2);
          let p = c.ZERO;
          let f = c.BASE;
          const mask = BigInt(2 ** W2 - 1);
          const maxNumber = 2 ** W2;
          const shiftBy = BigInt(W2);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n += _1n;
            }
            const offset1 = offset;
            const offset2 = offset + Math.abs(wbits) - 1;
            const cond1 = window2 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f = f.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
          }
          return { p, f };
        },
        wNAFCached(P2, precomputesMap, n, transform) {
          const W2 = P2._WINDOW_SIZE || 1;
          let comp = precomputesMap.get(P2);
          if (!comp) {
            comp = this.precomputeWindow(P2, W2);
            if (W2 !== 1) {
              precomputesMap.set(P2, transform(comp));
            }
          }
          return this.wNAF(W2, comp, n);
        }
      };
    }
    exports.wNAF = wNAF;
    function validateBasic(curve) {
      (0, modular_js_1.validateField)(curve.Fp);
      (0, utils_js_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
    exports.validateBasic = validateBasic;
  }
});

// node_modules/@noble/curves/abstract/weierstrass.js
var require_weierstrass = __commonJS({
  "node_modules/@noble/curves/abstract/weierstrass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;
    var mod = require_modular();
    var ut2 = require_utils4();
    var utils_js_1 = require_utils4();
    var curve_js_1 = require_curve();
    function validatePointOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut2.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp, a } = opts;
      if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    var { bytesToNumberBE: b2n, hexToBytes: h2b } = ut2;
    exports.DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      _parseInt(data) {
        const { Err: E2 } = exports.DER;
        if (data.length < 2 || data[0] !== 2)
          throw new E2("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len)
          throw new E2("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E2("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E2("Invalid signature integer: unnecessary leading zero");
        return { d: b2n(res), l: data.subarray(len + 2) };
      },
      toSig(hex) {
        const { Err: E2 } = exports.DER;
        const data = typeof hex === "string" ? h2b(hex) : hex;
        if (!(data instanceof Uint8Array))
          throw new Error("ui8a expected");
        let l = data.length;
        if (l < 2 || data[0] != 48)
          throw new E2("Invalid signature tag");
        if (data[1] !== l - 2)
          throw new E2("Invalid signature: incorrect length");
        const { d: r, l: sBytes } = exports.DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E2("Invalid signature: left bytes after parsing");
        return { r, s };
      },
      hexFromSig(sig) {
        const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
        const h = (num) => {
          const hex = num.toString(16);
          return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
      }
    };
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp } = CURVE;
      const toBytes = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut2.concatBytes(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes) => {
        const tail = bytes.subarray(1);
        const x2 = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x: x2, y };
      });
      function weierstrassEquation(x2) {
        const { a, b } = CURVE;
        const x22 = Fp.sqr(x2);
        const x3 = Fp.mul(x22, x2);
        return Fp.add(Fp.add(x3, Fp.mul(x2, a)), b);
      }
      if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n < num && num < CURVE.n;
      }
      function assertGE(num) {
        if (!isWithinCurveOrder(num))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if (key instanceof Uint8Array)
            key = ut2.bytesToHex(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("Invalid key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key === "bigint" ? key : ut2.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey)
          num = mod.mod(num, n);
        assertGE(num);
        return num;
      }
      const pointPrecomputes = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point))
          throw new Error("ProjectivePoint expected");
      }
      class Point {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp.isValid(pz))
            throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x: x2, y } = p || {};
          if (!p || !Fp.isValid(x2) || !Fp.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp.eql(i, Fp.ZERO);
          if (is0(x2) && is0(y))
            return Point.ZERO;
          return new Point(x2, y, Fp.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp.invertBatch(points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
          const P2 = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex)));
          P2.assertValidity();
          return P2;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x: x2, y } = this.toAffine();
          if (!Fp.isValid(x2) || !Fp.isValid(y))
            throw new Error("bad point: x or y not FE");
          const left = Fp.sqr(y);
          const right = weierstrassEquation(x2);
          if (!Fp.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp.isOdd)
            return !Fp.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
          const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b } = CURVE;
          const b3 = Fp.mul(b, _3n);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          let t0 = Fp.mul(X1, X1);
          let t1 = Fp.mul(Y1, Y1);
          let t2 = Fp.mul(Z1, Z1);
          let t3 = Fp.mul(X1, Y1);
          t3 = Fp.add(t3, t3);
          Z3 = Fp.mul(X1, Z1);
          Z3 = Fp.add(Z3, Z3);
          X3 = Fp.mul(a, Z3);
          Y3 = Fp.mul(b3, t2);
          Y3 = Fp.add(X3, Y3);
          X3 = Fp.sub(t1, Y3);
          Y3 = Fp.add(t1, Y3);
          Y3 = Fp.mul(X3, Y3);
          X3 = Fp.mul(t3, X3);
          Z3 = Fp.mul(b3, Z3);
          t2 = Fp.mul(a, t2);
          t3 = Fp.sub(t0, t2);
          t3 = Fp.mul(a, t3);
          t3 = Fp.add(t3, Z3);
          Z3 = Fp.add(t0, t0);
          t0 = Fp.add(Z3, t0);
          t0 = Fp.add(t0, t2);
          t0 = Fp.mul(t0, t3);
          Y3 = Fp.add(Y3, t0);
          t2 = Fp.mul(Y1, Z1);
          t2 = Fp.add(t2, t2);
          t0 = Fp.mul(t2, t3);
          X3 = Fp.sub(X3, t0);
          Z3 = Fp.mul(t2, t1);
          Z3 = Fp.add(Z3, Z3);
          Z3 = Fp.add(Z3, Z3);
          return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          const a = CURVE.a;
          const b3 = Fp.mul(CURVE.b, _3n);
          let t0 = Fp.mul(X1, X2);
          let t1 = Fp.mul(Y1, Y2);
          let t2 = Fp.mul(Z1, Z2);
          let t3 = Fp.add(X1, Y1);
          let t4 = Fp.add(X2, Y2);
          t3 = Fp.mul(t3, t4);
          t4 = Fp.add(t0, t1);
          t3 = Fp.sub(t3, t4);
          t4 = Fp.add(X1, Z1);
          let t5 = Fp.add(X2, Z2);
          t4 = Fp.mul(t4, t5);
          t5 = Fp.add(t0, t2);
          t4 = Fp.sub(t4, t5);
          t5 = Fp.add(Y1, Z1);
          X3 = Fp.add(Y2, Z2);
          t5 = Fp.mul(t5, X3);
          X3 = Fp.add(t1, t2);
          t5 = Fp.sub(t5, X3);
          Z3 = Fp.mul(a, t4);
          X3 = Fp.mul(b3, t2);
          Z3 = Fp.add(X3, Z3);
          X3 = Fp.sub(t1, Z3);
          Z3 = Fp.add(t1, Z3);
          Y3 = Fp.mul(X3, Z3);
          t1 = Fp.add(t0, t0);
          t1 = Fp.add(t1, t0);
          t2 = Fp.mul(a, t2);
          t4 = Fp.mul(b3, t4);
          t1 = Fp.add(t1, t2);
          t2 = Fp.sub(t0, t2);
          t2 = Fp.mul(a, t2);
          t4 = Fp.add(t4, t2);
          t0 = Fp.mul(t1, t4);
          Y3 = Fp.add(Y3, t0);
          t0 = Fp.mul(t5, t4);
          X3 = Fp.mul(t3, X3);
          X3 = Fp.sub(X3, t0);
          t0 = Fp.mul(t3, t1);
          Z3 = Fp.mul(t5, Z3);
          Z3 = Fp.add(Z3, t0);
          return new Point(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
            const toInv = Fp.invertBatch(comp.map((p) => p.pz));
            return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
          });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n) {
          const I2 = Point.ZERO;
          if (n === _0n)
            return I2;
          assertGE(n);
          if (n === _1n)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = I2;
          let k2p = I2;
          let d = this;
          while (k1 > _0n || k2 > _0n) {
            if (k1 & _1n)
              k1p = k1p.add(d);
            if (k2 & _1n)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n;
            k2 >>= _1n;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          assertGE(scalar);
          let n = scalar;
          let point, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f } = this.wNAF(n);
            point = p;
            fake = f;
          }
          return Point.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q2, a, b) {
          const G2 = Point.BASE;
          const mul = (P2, a2) => a2 === _0n || a2 === _1n || !P2.equals(G2) ? P2.multiplyUnsafe(a2) : P2.multiply(a2);
          const sum = mul(this, a).add(mul(Q2, b));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          const { px: x2, py: y, pz: z2 } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp.ONE : Fp.inv(z2);
          const ax = Fp.mul(x2, iz);
          const ay = Fp.mul(y, iz);
          const zz = Fp.mul(z2, iz);
          if (is0)
            return { x: Fp.ZERO, y: Fp.ZERO };
          if (!Fp.eql(zz, Fp.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n)
            return this;
          if (clearCofactor)
            return clearCofactor(Point, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return ut2.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
      Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    exports.weierstrassPoints = weierstrassPoints;
    function validateOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut2.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp.BYTES + 1;
      const uncompressedLen = 2 * Fp.BYTES + 1;
      function isValidFieldElement(num) {
        return _0n < num && num < Fp.ORDER;
      }
      function modN(a) {
        return mod.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x2 = Fp.toBytes(a.x);
          const cat = ut2.concatBytes;
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x2);
          } else {
            return cat(Uint8Array.from([4]), x2, Fp.toBytes(a.y));
          }
        },
        fromBytes(bytes) {
          const len = bytes.length;
          const head = bytes[0];
          const tail = bytes.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x2 = ut2.bytesToNumberBE(tail);
            if (!isValidFieldElement(x2))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x2);
            let y = Fp.sqrt(y2);
            const isYOdd = (y & _1n) === _1n;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp.neg(y);
            return { x: x2, y };
          } else if (len === uncompressedLen && head === 4) {
            const x2 = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x: x2, y };
          } else {
            throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num) => ut2.bytesToHex(ut2.numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number) {
        const HALF = CURVE_ORDER >> _1n;
        return number > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
      }
      const slcNum = (b, from, to) => ut2.bytesToNumberBE(b.slice(from, to));
      class Signature {
        constructor(r, s, recovery) {
          this.r = r;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
          const l = CURVE.nByteLength;
          hex = (0, utils_js_1.ensureBytes)("compactSignature", hex, l * 2);
          return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
          const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex));
          return new Signature(r, s);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r, s, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
          if (radj >= Fp.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R2 = Point.fromHex(prefix + numToNByteStr(radj));
          const ir2 = invN(radj);
          const u1 = modN(-h * ir2);
          const u2 = modN(s * ir2);
          const Q2 = Point.BASE.multiplyAndAddUnsafe(R2, u1, u2);
          if (!Q2)
            throw new Error("point at infinify");
          Q2.assertValidity();
          return Q2;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut2.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut2.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = mod.getMinHashLength(CURVE.n);
          return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = item instanceof Uint8Array;
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes) {
        const num = ut2.bytesToNumberBE(bytes);
        const delta = bytes.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
        return modN(bits2int(bytes));
      };
      const ORDER_MASK = ut2.bitMask(CURVE.nBitLength);
      function int2octets(num) {
        if (typeof num !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n <= num && num < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return ut2.numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash, randomBytes } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        if (prehash)
          msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null) {
          const e = ent === true ? randomBytes(Fp.BYTES) : ent;
          seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e));
        }
        const seed = ut2.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q2 = Point.BASE.multiply(k).toAffine();
          const r = modN(q2.x);
          if (r === _0n)
            return;
          const s = modN(ik * modN(m + r * d));
          if (s === _0n)
            return;
          let recovery = (q2.x === r ? 0 : 2) | Number(q2.y & _1n);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature(r, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut2.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point.BASE._setWindowSize(8);
      function verify2(signature, msgHash, publicKey, opts = defaultVerOpts) {
        var _a;
        const sg = signature;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_1.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P2;
        try {
          if (typeof sg === "string" || sg instanceof Uint8Array) {
            try {
              _sig = Signature.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports.DER.Err))
                throw derError;
              _sig = Signature.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r2, s: s2 } = sg;
            _sig = new Signature(r2, s2);
          } else {
            throw new Error("PARSE");
          }
          P2 = Point.fromHex(publicKey);
        } catch (error) {
          if (error.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig;
        const h = bits2int_modN(msgHash);
        const is = invN(s);
        const u1 = modN(h * is);
        const u2 = modN(r * is);
        const R2 = (_a = Point.BASE.multiplyAndAddUnsafe(P2, u1, u2)) == null ? void 0 : _a.toAffine();
        if (!R2)
          return false;
        const v = modN(R2.x);
        return v === r;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify: verify2,
        ProjectivePoint: Point,
        Signature,
        utils
      };
    }
    exports.weierstrass = weierstrass;
    function SWUFpSqrtRatio(Fp, Z2) {
      const q2 = Fp.ORDER;
      let l = _0n;
      for (let o = q2 - _1n; o % _2n === _0n; o /= _2n)
        l += _1n;
      const c1 = l;
      const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
      const c2 = (q2 - _1n) / _2n_pow_c1;
      const c3 = (c2 - _1n) / _2n;
      const c4 = _2n_pow_c1 - _1n;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp.pow(Z2, c2);
      const c7 = Fp.pow(Z2, (c2 + _1n) / _2n);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp.pow(v, c4);
        let tv3 = Fp.sqr(tv2);
        tv3 = Fp.mul(tv3, v);
        let tv5 = Fp.mul(u, tv3);
        tv5 = Fp.pow(tv5, c3);
        tv5 = Fp.mul(tv5, tv2);
        tv2 = Fp.mul(tv5, v);
        tv3 = Fp.mul(tv5, u);
        let tv4 = Fp.mul(tv3, tv2);
        tv5 = Fp.pow(tv4, c5);
        let isQR = Fp.eql(tv5, Fp.ONE);
        tv2 = Fp.mul(tv3, c7);
        tv5 = Fp.mul(tv4, tv1);
        tv3 = Fp.cmov(tv2, tv3, isQR);
        tv4 = Fp.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n; i--) {
          let tv52 = i - _2n;
          tv52 = _2n << tv52 - _1n;
          let tvv5 = Fp.pow(tv4, tv52);
          const e1 = Fp.eql(tvv5, Fp.ONE);
          tv2 = Fp.mul(tv3, tv1);
          tv1 = Fp.mul(tv1, tv1);
          tvv5 = Fp.mul(tv4, tv1);
          tv3 = Fp.cmov(tv2, tv3, e1);
          tv4 = Fp.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp.ORDER % _4n === _3n) {
        const c12 = (Fp.ORDER - _3n) / _4n;
        const c22 = Fp.sqrt(Fp.neg(Z2));
        sqrtRatio = (u, v) => {
          let tv1 = Fp.sqr(v);
          const tv2 = Fp.mul(u, v);
          tv1 = Fp.mul(tv1, tv2);
          let y1 = Fp.pow(tv1, c12);
          y1 = Fp.mul(y1, tv2);
          const y2 = Fp.mul(y1, c22);
          const tv3 = Fp.mul(Fp.sqr(y1), v);
          const isQR = Fp.eql(tv3, u);
          let y = Fp.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
    function mapToCurveSimpleSWU(Fp, opts) {
      mod.validateField(Fp);
      if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
      if (!Fp.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x2, y;
        tv1 = Fp.sqr(u);
        tv1 = Fp.mul(tv1, opts.Z);
        tv2 = Fp.sqr(tv1);
        tv2 = Fp.add(tv2, tv1);
        tv3 = Fp.add(tv2, Fp.ONE);
        tv3 = Fp.mul(tv3, opts.B);
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
        tv4 = Fp.mul(tv4, opts.A);
        tv2 = Fp.sqr(tv3);
        tv6 = Fp.sqr(tv4);
        tv5 = Fp.mul(tv6, opts.A);
        tv2 = Fp.add(tv2, tv5);
        tv2 = Fp.mul(tv2, tv3);
        tv6 = Fp.mul(tv6, tv4);
        tv5 = Fp.mul(tv6, opts.B);
        tv2 = Fp.add(tv2, tv5);
        x2 = Fp.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp.mul(tv1, u);
        y = Fp.mul(y, value);
        x2 = Fp.cmov(x2, tv3, isValid);
        y = Fp.cmov(y, value, isValid);
        const e1 = Fp.isOdd(u) === Fp.isOdd(y);
        y = Fp.cmov(Fp.neg(y), y, e1);
        x2 = Fp.div(x2, tv4);
        return { x: x2, y };
      };
    }
    exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
  }
});

// node_modules/@noble/curves/abstract/hash-to-curve.js
var require_hash_to_curve = __commonJS({
  "node_modules/@noble/curves/abstract/hash-to-curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createHasher = exports.isogenyMap = exports.hash_to_field = exports.expand_message_xof = exports.expand_message_xmd = void 0;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils4();
    function validateDST(dst) {
      if (dst instanceof Uint8Array)
        return dst;
      if (typeof dst === "string")
        return (0, utils_js_1.utf8ToBytes)(dst);
      throw new Error("DST must be Uint8Array or string");
    }
    var os2ip = utils_js_1.bytesToNumberBE;
    function i2osp(value, length) {
      if (value < 0 || value >= 1 << 8 * length) {
        throw new Error(`bad I2OSP call: value=${value} length=${length}`);
      }
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor(a, b) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b[i];
      }
      return arr;
    }
    function isBytes(item) {
      if (!(item instanceof Uint8Array))
        throw new Error("Uint8Array expected");
    }
    function isNum(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function expand_message_xmd(msg, DST, lenInBytes, H2) {
      isBytes(msg);
      isBytes(DST);
      isNum(lenInBytes);
      if (DST.length > 255)
        DST = H2((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H2;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (ell > 255)
        throw new Error("Invalid xmd length");
      const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
      const Z_pad = i2osp(0, r_in_bytes);
      const l_i_b_str = i2osp(lenInBytes, 2);
      const b = new Array(ell);
      const b_0 = H2((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
      b[0] = H2((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
        b[i] = H2((0, utils_js_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    exports.expand_message_xmd = expand_message_xmd;
    function expand_message_xof(msg, DST, lenInBytes, k, H2) {
      isBytes(msg);
      isBytes(DST);
      isNum(lenInBytes);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H2.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H2.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
    }
    exports.expand_message_xof = expand_message_xof;
    function hash_to_field(msg, count, options) {
      (0, utils_js_1.validateObject)(options, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
      });
      const { p, k, m, hash, expand, DST: _DST } = options;
      isBytes(msg);
      isNum(count);
      const DST = validateDST(_DST);
      const log2p = p.toString(2).length;
      const L = Math.ceil((log2p + k) / 8);
      const len_in_bytes = count * m * L;
      let prb;
      if (expand === "xmd") {
        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
      } else if (expand === "xof") {
        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
      } else if (expand === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count);
      for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j2 = 0; j2 < m; j2++) {
          const elm_offset = L * (j2 + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L);
          e[j2] = (0, modular_js_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    exports.hash_to_field = hash_to_field;
    function isogenyMap(field, map) {
      const COEFF = map.map((i) => Array.from(i).reverse());
      return (x2, y) => {
        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x2), i)));
        x2 = field.div(xNum, xDen);
        y = field.mul(y, field.div(yNum, yDen));
        return { x: x2, y };
      };
    }
    exports.isogenyMap = isogenyMap;
    function createHasher(Point, mapToCurve, def) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options) {
          const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
          const u0 = Point.fromAffine(mapToCurve(u[0]));
          const u1 = Point.fromAffine(mapToCurve(u[1]));
          const P2 = u0.add(u1).clearCofactor();
          P2.assertValidity();
          return P2;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options) {
          const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
          const P2 = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
          P2.assertValidity();
          return P2;
        }
      };
    }
    exports.createHasher = createHasher;
  }
});

// node_modules/@noble/curves/_shortw_utils.js
var require_shortw_utils = __commonJS({
  "node_modules/@noble/curves/_shortw_utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCurve = exports.getHash = void 0;
    var hmac_1 = require_hmac();
    var utils_1 = require_utils();
    var weierstrass_js_1 = require_weierstrass();
    function getHash(hash) {
      return {
        hash,
        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),
        randomBytes: utils_1.randomBytes
      };
    }
    exports.getHash = getHash;
    function createCurve(curveDef, defHash) {
      const create = (hash) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash) });
      return Object.freeze({ ...create(defHash), create });
    }
    exports.createCurve = createCurve;
  }
});

// node_modules/@noble/curves/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/@noble/curves/secp256k1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;
    var sha256_1 = require_sha256();
    var utils_1 = require_utils();
    var modular_js_1 = require_modular();
    var weierstrass_js_1 = require_weierstrass();
    var utils_js_1 = require_utils4();
    var hash_to_curve_js_1 = require_hash_to_curve();
    var _shortw_utils_js_1 = require_shortw_utils();
    var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var divNearest = (a, b) => (a + b / _2n) / b;
    function sqrtMod(y) {
      const P2 = secp256k1P;
      const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P2;
      const b3 = b2 * b2 * y % P2;
      const b6 = (0, modular_js_1.pow2)(b3, _3n, P2) * b3 % P2;
      const b9 = (0, modular_js_1.pow2)(b6, _3n, P2) * b3 % P2;
      const b11 = (0, modular_js_1.pow2)(b9, _2n, P2) * b2 % P2;
      const b22 = (0, modular_js_1.pow2)(b11, _11n, P2) * b11 % P2;
      const b44 = (0, modular_js_1.pow2)(b22, _22n, P2) * b22 % P2;
      const b88 = (0, modular_js_1.pow2)(b44, _44n, P2) * b44 % P2;
      const b176 = (0, modular_js_1.pow2)(b88, _88n, P2) * b88 % P2;
      const b220 = (0, modular_js_1.pow2)(b176, _44n, P2) * b44 % P2;
      const b223 = (0, modular_js_1.pow2)(b220, _3n, P2) * b3 % P2;
      const t1 = (0, modular_js_1.pow2)(b223, _23n, P2) * b22 % P2;
      const t2 = (0, modular_js_1.pow2)(t1, _6n, P2) * b2 % P2;
      const root = (0, modular_js_1.pow2)(t2, _2n, P2);
      if (!Fp.eql(Fp.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    var Fp = (0, modular_js_1.Field)(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
    exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      b: BigInt(7),
      Fp,
      n: secp256k1N,
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      lowS: true,
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n = secp256k1N;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
          let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256_1.sha256);
    var _0n = BigInt(0);
    var fe2 = (x2) => typeof x2 === "bigint" && _0n < x2 && x2 < secp256k1P;
    var ge2 = (x2) => typeof x2 === "bigint" && _0n < x2 && x2 < secp256k1N;
    var TAGGED_HASH_PREFIXES = {};
    function taggedHash(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
    }
    var pointToBytes = (point) => point.toRawBytes(true).slice(1);
    var numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);
    var modP = (x2) => (0, modular_js_1.mod)(x2, secp256k1P);
    var modN = (x2) => (0, modular_js_1.mod)(x2, secp256k1N);
    var Point = exports.secp256k1.ProjectivePoint;
    var GmulAdd = (Q2, a, b) => Point.BASE.multiplyAndAddUnsafe(Q2, a, b);
    function schnorrGetExtPubKey(priv) {
      let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN(-d_);
      return { scalar, bytes: pointToBytes(p) };
    }
    function lift_x(x2) {
      if (!fe2(x2))
        throw new Error("bad x: need 0 < x < p");
      const xx = modP(x2 * x2);
      const c = modP(xx * x2 + BigInt(7));
      let y = sqrtMod(c);
      if (y % _2n !== _0n)
        y = modP(-y);
      const p = new Point(x2, y, _1n);
      p.assertValidity();
      return p;
    }
    function challenge(...args) {
      return modN((0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey(privateKey) {
      return schnorrGetExtPubKey(privateKey).bytes;
    }
    function schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
      const a = (0, utils_js_1.ensureBytes)("auxRand", auxRand, 32);
      const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/aux", a)));
      const rand = taggedHash("BIP0340/nonce", t, px, m);
      const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand));
      if (k_ === _0n)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
      const e = challenge(rx, px, m);
      const sig = new Uint8Array(64);
      sig.set(rx, 0);
      sig.set(numTo32b(modN(k + e * d)), 32);
      if (!schnorrVerify(sig, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig;
    }
    function schnorrVerify(signature, message, publicKey) {
      const sig = (0, utils_js_1.ensureBytes)("signature", signature, 64);
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const pub = (0, utils_js_1.ensureBytes)("publicKey", publicKey, 32);
      try {
        const P2 = lift_x((0, utils_js_1.bytesToNumberBE)(pub));
        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32));
        if (!fe2(r))
          return false;
        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64));
        if (!ge2(s))
          return false;
        const e = challenge(numTo32b(r), pointToBytes(P2), m);
        const R2 = GmulAdd(P2, s, modN(-e));
        if (!R2 || !R2.hasEvenY() || R2.toAffine().x !== r)
          return false;
        return true;
      } catch (error) {
        return false;
      }
    }
    exports.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey,
      sign: schnorrSign,
      verify: schnorrVerify,
      utils: {
        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,
        lift_x,
        pointToBytes,
        numberToBytesBE: utils_js_1.numberToBytesBE,
        bytesToNumberBE: utils_js_1.bytesToNumberBE,
        taggedHash,
        mod: modular_js_1.mod
      }
    }))();
    var isoMap = (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i) => i.map((j2) => BigInt(j2)))))();
    var mapSWU = (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp.create(BigInt("-11"))
    }))();
    var htf = (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {
      const { x: x2, y } = mapSWU(Fp.create(scalars[0]));
      return isoMap(x2, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports.hashToCurve = (() => htf.hashToCurve)();
    exports.encodeToCurve = (() => htf.encodeToCurve)();
  }
});

// node_modules/ethers/lib.commonjs/constants/addresses.js
var require_addresses = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/addresses.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ZeroAddress = void 0;
    exports.ZeroAddress = "0x0000000000000000000000000000000000000000";
  }
});

// node_modules/ethers/lib.commonjs/constants/hashes.js
var require_hashes = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/hashes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ZeroHash = void 0;
    exports.ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
  }
});

// node_modules/ethers/lib.commonjs/constants/numbers.js
var require_numbers = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/numbers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.N = void 0;
    exports.N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    exports.WeiPerEther = BigInt("1000000000000000000");
    exports.MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    exports.MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
    exports.MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  }
});

// node_modules/ethers/lib.commonjs/constants/strings.js
var require_strings = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/strings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MessagePrefix = exports.EtherSymbol = void 0;
    exports.EtherSymbol = "Ξ";
    exports.MessagePrefix = "Ethereum Signed Message:\n";
  }
});

// node_modules/ethers/lib.commonjs/constants/index.js
var require_constants = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MessagePrefix = exports.EtherSymbol = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.N = exports.ZeroHash = exports.ZeroAddress = void 0;
    var addresses_js_1 = require_addresses();
    Object.defineProperty(exports, "ZeroAddress", { enumerable: true, get: function() {
      return addresses_js_1.ZeroAddress;
    } });
    var hashes_js_1 = require_hashes();
    Object.defineProperty(exports, "ZeroHash", { enumerable: true, get: function() {
      return hashes_js_1.ZeroHash;
    } });
    var numbers_js_1 = require_numbers();
    Object.defineProperty(exports, "N", { enumerable: true, get: function() {
      return numbers_js_1.N;
    } });
    Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function() {
      return numbers_js_1.WeiPerEther;
    } });
    Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function() {
      return numbers_js_1.MaxUint256;
    } });
    Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function() {
      return numbers_js_1.MinInt256;
    } });
    Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function() {
      return numbers_js_1.MaxInt256;
    } });
    var strings_js_1 = require_strings();
    Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function() {
      return strings_js_1.EtherSymbol;
    } });
    Object.defineProperty(exports, "MessagePrefix", { enumerable: true, get: function() {
      return strings_js_1.MessagePrefix;
    } });
  }
});

// node_modules/ethers/lib.commonjs/crypto/signature.js
var require_signature = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Signature = void 0;
    var index_js_1 = require_constants();
    var index_js_2 = require_utils3();
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_2 = BigInt(2);
    var BN_27 = BigInt(27);
    var BN_28 = BigInt(28);
    var BN_35 = BigInt(35);
    var _guard = {};
    function toUint256(value) {
      return (0, index_js_2.zeroPadValue)((0, index_js_2.toBeArray)(value), 32);
    }
    var _r2, _s, _v, _networkV;
    var _Signature = class _Signature {
      /**
       *  @private
       */
      constructor(guard, r, s, v) {
        __privateAdd(this, _r2, void 0);
        __privateAdd(this, _s, void 0);
        __privateAdd(this, _v, void 0);
        __privateAdd(this, _networkV, void 0);
        (0, index_js_2.assertPrivate)(guard, _guard, "Signature");
        __privateSet(this, _r2, r);
        __privateSet(this, _s, s);
        __privateSet(this, _v, v);
        __privateSet(this, _networkV, null);
      }
      /**
       *  The ``r`` value for a signautre.
       *
       *  This represents the ``x`` coordinate of a "reference" or
       *  challenge point, from which the ``y`` can be computed.
       */
      get r() {
        return __privateGet(this, _r2);
      }
      set r(value) {
        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(value) === 32, "invalid r", "value", value);
        __privateSet(this, _r2, (0, index_js_2.hexlify)(value));
      }
      /**
       *  The ``s`` value for a signature.
       */
      get s() {
        return __privateGet(this, _s);
      }
      set s(_value) {
        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(_value) === 32, "invalid s", "value", _value);
        const value = (0, index_js_2.hexlify)(_value);
        (0, index_js_2.assertArgument)(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
        __privateSet(this, _s, value);
      }
      /**
       *  The ``v`` value for a signature.
       *
       *  Since a given ``x`` value for ``r`` has two possible values for
       *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
       *  values to use.
       *
       *  It is normalized to the values ``27`` or ``28`` for legacy
       *  purposes.
       */
      get v() {
        return __privateGet(this, _v);
      }
      set v(value) {
        const v = (0, index_js_2.getNumber)(value, "value");
        (0, index_js_2.assertArgument)(v === 27 || v === 28, "invalid v", "v", value);
        __privateSet(this, _v, v);
      }
      /**
       *  The EIP-155 ``v`` for legacy transactions. For non-legacy
       *  transactions, this value is ``null``.
       */
      get networkV() {
        return __privateGet(this, _networkV);
      }
      /**
       *  The chain ID for EIP-155 legacy transactions. For non-legacy
       *  transactions, this value is ``null``.
       */
      get legacyChainId() {
        const v = this.networkV;
        if (v == null) {
          return null;
        }
        return _Signature.getChainId(v);
      }
      /**
       *  The ``yParity`` for the signature.
       *
       *  See ``v`` for more details on how this value is used.
       */
      get yParity() {
        return this.v === 27 ? 0 : 1;
      }
      /**
       *  The [[link-eip-2098]] compact representation of the ``yParity``
       *  and ``s`` compacted into a single ``bytes32``.
       */
      get yParityAndS() {
        const yParityAndS = (0, index_js_2.getBytes)(this.s);
        if (this.yParity) {
          yParityAndS[0] |= 128;
        }
        return (0, index_js_2.hexlify)(yParityAndS);
      }
      /**
       *  The [[link-eip-2098]] compact representation.
       */
      get compactSerialized() {
        return (0, index_js_2.concat)([this.r, this.yParityAndS]);
      }
      /**
       *  The serialized representation.
       */
      get serialized() {
        return (0, index_js_2.concat)([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
      }
      /**
       *  Returns a new identical [[Signature]].
       */
      clone() {
        const clone = new _Signature(_guard, this.r, this.s, this.v);
        if (this.networkV) {
          __privateSet(clone, _networkV, this.networkV);
        }
        return clone;
      }
      /**
       *  Returns a representation that is compatible with ``JSON.stringify``.
       */
      toJSON() {
        const networkV = this.networkV;
        return {
          _type: "signature",
          networkV: networkV != null ? networkV.toString() : null,
          r: this.r,
          s: this.s,
          v: this.v
        };
      }
      /**
       *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
       *
       *  @example:
       *    Signature.getChainId(45)
       *    //_result:
       *
       *    Signature.getChainId(46)
       *    //_result:
       */
      static getChainId(v) {
        const bv = (0, index_js_2.getBigInt)(v, "v");
        if (bv == BN_27 || bv == BN_28) {
          return BN_0;
        }
        (0, index_js_2.assertArgument)(bv >= BN_35, "invalid EIP-155 v", "v", v);
        return (bv - BN_35) / BN_2;
      }
      /**
       *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
       *
       *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
       *  property to include the chain ID.
       *
       *  @example:
       *    Signature.getChainIdV(5, 27)
       *    //_result:
       *
       *    Signature.getChainIdV(5, 28)
       *    //_result:
       *
       */
      static getChainIdV(chainId, v) {
        return (0, index_js_2.getBigInt)(chainId) * BN_2 + BigInt(35 + v - 27);
      }
      /**
       *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
       *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
       *
       *  @example:
       *    // The values 0 and 1 imply v is actually yParity
       *    Signature.getNormalizedV(0)
       *    //_result:
       *
       *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
       *    Signature.getNormalizedV(27)
       *    //_result:
       *
       *    // Legacy EIP-155 transaction (i.e. >= 35)
       *    Signature.getNormalizedV(46)
       *    //_result:
       *
       *    // Invalid values throw
       *    Signature.getNormalizedV(5)
       *    //_error:
       */
      static getNormalizedV(v) {
        const bv = (0, index_js_2.getBigInt)(v);
        if (bv === BN_0 || bv === BN_27) {
          return 27;
        }
        if (bv === BN_1 || bv === BN_28) {
          return 28;
        }
        (0, index_js_2.assertArgument)(bv >= BN_35, "invalid v", "v", v);
        return bv & BN_1 ? 27 : 28;
      }
      /**
       *  Creates a new [[Signature]].
       *
       *  If no %%sig%% is provided, a new [[Signature]] is created
       *  with default values.
       *
       *  If %%sig%% is a string, it is parsed.
       */
      static from(sig) {
        function assertError(check, message) {
          (0, index_js_2.assertArgument)(check, message, "signature", sig);
        }
        ;
        if (sig == null) {
          return new _Signature(_guard, index_js_1.ZeroHash, index_js_1.ZeroHash, 27);
        }
        if (typeof sig === "string") {
          const bytes = (0, index_js_2.getBytes)(sig, "signature");
          if (bytes.length === 64) {
            const r2 = (0, index_js_2.hexlify)(bytes.slice(0, 32));
            const s2 = bytes.slice(32, 64);
            const v2 = s2[0] & 128 ? 28 : 27;
            s2[0] &= 127;
            return new _Signature(_guard, r2, (0, index_js_2.hexlify)(s2), v2);
          }
          if (bytes.length === 65) {
            const r2 = (0, index_js_2.hexlify)(bytes.slice(0, 32));
            const s2 = bytes.slice(32, 64);
            assertError((s2[0] & 128) === 0, "non-canonical s");
            const v2 = _Signature.getNormalizedV(bytes[64]);
            return new _Signature(_guard, r2, (0, index_js_2.hexlify)(s2), v2);
          }
          assertError(false, "invalid raw signature length");
        }
        if (sig instanceof _Signature) {
          return sig.clone();
        }
        const _r3 = sig.r;
        assertError(_r3 != null, "missing r");
        const r = toUint256(_r3);
        const s = function(s2, yParityAndS) {
          if (s2 != null) {
            return toUint256(s2);
          }
          if (yParityAndS != null) {
            assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
            const bytes = (0, index_js_2.getBytes)(yParityAndS);
            bytes[0] &= 127;
            return (0, index_js_2.hexlify)(bytes);
          }
          assertError(false, "missing s");
        }(sig.s, sig.yParityAndS);
        assertError(((0, index_js_2.getBytes)(s)[0] & 128) == 0, "non-canonical s");
        const { networkV, v } = function(_v2, yParityAndS, yParity) {
          if (_v2 != null) {
            const v2 = (0, index_js_2.getBigInt)(_v2);
            return {
              networkV: v2 >= BN_35 ? v2 : void 0,
              v: _Signature.getNormalizedV(v2)
            };
          }
          if (yParityAndS != null) {
            assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
            return { v: (0, index_js_2.getBytes)(yParityAndS)[0] & 128 ? 28 : 27 };
          }
          if (yParity != null) {
            switch ((0, index_js_2.getNumber)(yParity, "sig.yParity")) {
              case 0:
                return { v: 27 };
              case 1:
                return { v: 28 };
            }
            assertError(false, "invalid yParity");
          }
          assertError(false, "missing v");
        }(sig.v, sig.yParityAndS, sig.yParity);
        const result = new _Signature(_guard, r, s, v);
        if (networkV) {
          __privateSet(result, _networkV, networkV);
        }
        assertError(sig.yParity == null || (0, index_js_2.getNumber)(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
        return result;
      }
    };
    _r2 = new WeakMap();
    _s = new WeakMap();
    _v = new WeakMap();
    _networkV = new WeakMap();
    var Signature = _Signature;
    exports.Signature = Signature;
  }
});

// node_modules/ethers/lib.commonjs/crypto/signing-key.js
var require_signing_key = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/signing-key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SigningKey = void 0;
    var secp256k1_1 = require_secp256k1();
    var index_js_1 = require_utils3();
    var signature_js_1 = require_signature();
    var _privateKey;
    var _SigningKey = class _SigningKey {
      /**
       *  Creates a new **SigningKey** for %%privateKey%%.
       */
      constructor(privateKey) {
        __privateAdd(this, _privateKey, void 0);
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
        __privateSet(this, _privateKey, (0, index_js_1.hexlify)(privateKey));
      }
      /**
       *  The private key.
       */
      get privateKey() {
        return __privateGet(this, _privateKey);
      }
      /**
       *  The uncompressed public key.
       *
       * This will always begin with the prefix ``0x04`` and be 132
       * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
       */
      get publicKey() {
        return _SigningKey.computePublicKey(__privateGet(this, _privateKey));
      }
      /**
       *  The compressed public key.
       *
       *  This will always begin with either the prefix ``0x02`` or ``0x03``
       *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
       *  nibbles)
       */
      get compressedPublicKey() {
        return _SigningKey.computePublicKey(__privateGet(this, _privateKey), true);
      }
      /**
       *  Return the signature of the signed %%digest%%.
       */
      sign(digest) {
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
        const sig = secp256k1_1.secp256k1.sign((0, index_js_1.getBytesCopy)(digest), (0, index_js_1.getBytesCopy)(__privateGet(this, _privateKey)), {
          lowS: true
        });
        return signature_js_1.Signature.from({
          r: (0, index_js_1.toBeHex)(sig.r, 32),
          s: (0, index_js_1.toBeHex)(sig.s, 32),
          v: sig.recovery ? 28 : 27
        });
      }
      /**
       *  Returns the [[link-wiki-ecdh]] shared secret between this
       *  private key and the %%other%% key.
       *
       *  The %%other%% key may be any type of key, a raw public key,
       *  a compressed/uncompressed pubic key or aprivate key.
       *
       *  Best practice is usually to use a cryptographic hash on the
       *  returned value before using it as a symetric secret.
       *
       *  @example:
       *    sign1 = new SigningKey(id("some-secret-1"))
       *    sign2 = new SigningKey(id("some-secret-2"))
       *
       *    // Notice that privA.computeSharedSecret(pubB)...
       *    sign1.computeSharedSecret(sign2.publicKey)
       *    //_result:
       *
       *    // ...is equal to privB.computeSharedSecret(pubA).
       *    sign2.computeSharedSecret(sign1.publicKey)
       *    //_result:
       */
      computeSharedSecret(other) {
        const pubKey = _SigningKey.computePublicKey(other);
        return (0, index_js_1.hexlify)(secp256k1_1.secp256k1.getSharedSecret((0, index_js_1.getBytesCopy)(__privateGet(this, _privateKey)), (0, index_js_1.getBytes)(pubKey), false));
      }
      /**
       *  Compute the public key for %%key%%, optionally %%compressed%%.
       *
       *  The %%key%% may be any type of key, a raw public key, a
       *  compressed/uncompressed public key or private key.
       *
       *  @example:
       *    sign = new SigningKey(id("some-secret"));
       *
       *    // Compute the uncompressed public key for a private key
       *    SigningKey.computePublicKey(sign.privateKey)
       *    //_result:
       *
       *    // Compute the compressed public key for a private key
       *    SigningKey.computePublicKey(sign.privateKey, true)
       *    //_result:
       *
       *    // Compute the uncompressed public key
       *    SigningKey.computePublicKey(sign.publicKey, false);
       *    //_result:
       *
       *    // Compute the Compressed a public key
       *    SigningKey.computePublicKey(sign.publicKey, true);
       *    //_result:
       */
      static computePublicKey(key, compressed) {
        let bytes = (0, index_js_1.getBytes)(key, "key");
        if (bytes.length === 32) {
          const pubKey = secp256k1_1.secp256k1.getPublicKey(bytes, !!compressed);
          return (0, index_js_1.hexlify)(pubKey);
        }
        if (bytes.length === 64) {
          const pub = new Uint8Array(65);
          pub[0] = 4;
          pub.set(bytes, 1);
          bytes = pub;
        }
        const point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(bytes);
        return (0, index_js_1.hexlify)(point.toRawBytes(compressed));
      }
      /**
       *  Returns the public key for the private key which produced the
       *  %%signature%% for the given %%digest%%.
       *
       *  @example:
       *    key = new SigningKey(id("some-secret"))
       *    digest = id("hello world")
       *    sig = key.sign(digest)
       *
       *    // Notice the signer public key...
       *    key.publicKey
       *    //_result:
       *
       *    // ...is equal to the recovered public key
       *    SigningKey.recoverPublicKey(digest, sig)
       *    //_result:
       *
       */
      static recoverPublicKey(digest, signature) {
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
        const sig = signature_js_1.Signature.from(signature);
        let secpSig = secp256k1_1.secp256k1.Signature.fromCompact((0, index_js_1.getBytesCopy)((0, index_js_1.concat)([sig.r, sig.s])));
        secpSig = secpSig.addRecoveryBit(sig.yParity);
        const pubKey = secpSig.recoverPublicKey((0, index_js_1.getBytesCopy)(digest));
        (0, index_js_1.assertArgument)(pubKey != null, "invalid signautre for digest", "signature", signature);
        return "0x" + pubKey.toHex(false);
      }
      /**
       *  Returns the point resulting from adding the ellipic curve points
       *  %%p0%% and %%p1%%.
       *
       *  This is not a common function most developers should require, but
       *  can be useful for certain privacy-specific techniques.
       *
       *  For example, it is used by [[HDNodeWallet]] to compute child
       *  addresses from parent public keys and chain codes.
       */
      static addPoints(p0, p1, compressed) {
        const pub0 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p0).substring(2));
        const pub1 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p1).substring(2));
        return "0x" + pub0.add(pub1).toHex(!!compressed);
      }
    };
    _privateKey = new WeakMap();
    var SigningKey = _SigningKey;
    exports.SigningKey = SigningKey;
  }
});

// node_modules/ethers/lib.commonjs/crypto/index.js
var require_crypto2 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lock = exports.Signature = exports.SigningKey = exports.scryptSync = exports.scrypt = exports.pbkdf2 = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.randomBytes = exports.computeHmac = void 0;
    var hmac_js_1 = require_hmac2();
    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function() {
      return hmac_js_1.computeHmac;
    } });
    var keccak_js_1 = require_keccak();
    Object.defineProperty(exports, "keccak256", { enumerable: true, get: function() {
      return keccak_js_1.keccak256;
    } });
    var ripemd160_js_1 = require_ripemd1602();
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function() {
      return ripemd160_js_1.ripemd160;
    } });
    var pbkdf2_js_1 = require_pbkdf22();
    Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function() {
      return pbkdf2_js_1.pbkdf2;
    } });
    var random_js_1 = require_random();
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function() {
      return random_js_1.randomBytes;
    } });
    var scrypt_js_1 = require_scrypt2();
    Object.defineProperty(exports, "scrypt", { enumerable: true, get: function() {
      return scrypt_js_1.scrypt;
    } });
    Object.defineProperty(exports, "scryptSync", { enumerable: true, get: function() {
      return scrypt_js_1.scryptSync;
    } });
    var sha2_js_1 = require_sha22();
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function() {
      return sha2_js_1.sha256;
    } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function() {
      return sha2_js_1.sha512;
    } });
    var signing_key_js_1 = require_signing_key();
    Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function() {
      return signing_key_js_1.SigningKey;
    } });
    var signature_js_1 = require_signature();
    Object.defineProperty(exports, "Signature", { enumerable: true, get: function() {
      return signature_js_1.Signature;
    } });
    function lock() {
      hmac_js_1.computeHmac.lock();
      keccak_js_1.keccak256.lock();
      pbkdf2_js_1.pbkdf2.lock();
      random_js_1.randomBytes.lock();
      ripemd160_js_1.ripemd160.lock();
      scrypt_js_1.scrypt.lock();
      scrypt_js_1.scryptSync.lock();
      sha2_js_1.sha256.lock();
      sha2_js_1.sha512.lock();
      random_js_1.randomBytes.lock();
    }
    exports.lock = lock;
  }
});

// node_modules/ethers/lib.commonjs/address/address.js
var require_address = __commonJS({
  "node_modules/ethers/lib.commonjs/address/address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIcapAddress = exports.getAddress = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils3();
    var BN_0 = BigInt(0);
    var BN_36 = BigInt(36);
    function getChecksumAddress(address) {
      address = address.toLowerCase();
      const chars = address.substring(2).split("");
      const expanded = new Uint8Array(40);
      for (let i = 0; i < 40; i++) {
        expanded[i] = chars[i].charCodeAt(0);
      }
      const hashed = (0, index_js_2.getBytes)((0, index_js_1.keccak256)(expanded));
      for (let i = 0; i < 40; i += 2) {
        if (hashed[i >> 1] >> 4 >= 8) {
          chars[i] = chars[i].toUpperCase();
        }
        if ((hashed[i >> 1] & 15) >= 8) {
          chars[i + 1] = chars[i + 1].toUpperCase();
        }
      }
      return "0x" + chars.join("");
    }
    var ibanLookup = {};
    for (let i = 0; i < 10; i++) {
      ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
      ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    var safeDigits = 15;
    function ibanChecksum(address) {
      address = address.toUpperCase();
      address = address.substring(4) + address.substring(0, 2) + "00";
      let expanded = address.split("").map((c) => {
        return ibanLookup[c];
      }).join("");
      while (expanded.length >= safeDigits) {
        let block = expanded.substring(0, safeDigits);
        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
      }
      let checksum = String(98 - parseInt(expanded, 10) % 97);
      while (checksum.length < 2) {
        checksum = "0" + checksum;
      }
      return checksum;
    }
    var Base36 = function() {
      ;
      const result = {};
      for (let i = 0; i < 36; i++) {
        const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
        result[key] = BigInt(i);
      }
      return result;
    }();
    function fromBase36(value) {
      value = value.toLowerCase();
      let result = BN_0;
      for (let i = 0; i < value.length; i++) {
        result = result * BN_36 + Base36[value[i]];
      }
      return result;
    }
    function getAddress(address) {
      (0, index_js_2.assertArgument)(typeof address === "string", "invalid address", "address", address);
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        if (!address.startsWith("0x")) {
          address = "0x" + address;
        }
        const result = getChecksumAddress(address);
        (0, index_js_2.assertArgument)(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
        return result;
      }
      if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        (0, index_js_2.assertArgument)(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
        let result = fromBase36(address.substring(4)).toString(16);
        while (result.length < 40) {
          result = "0" + result;
        }
        return getChecksumAddress("0x" + result);
      }
      (0, index_js_2.assertArgument)(false, "invalid address", "address", address);
    }
    exports.getAddress = getAddress;
    function getIcapAddress(address) {
      let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();
      while (base36.length < 30) {
        base36 = "0" + base36;
      }
      return "XE" + ibanChecksum("XE00" + base36) + base36;
    }
    exports.getIcapAddress = getIcapAddress;
  }
});

// node_modules/ethers/lib.commonjs/address/contract-address.js
var require_contract_address = __commonJS({
  "node_modules/ethers/lib.commonjs/address/contract-address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCreate2Address = exports.getCreateAddress = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils3();
    var address_js_1 = require_address();
    function getCreateAddress(tx) {
      const from = (0, address_js_1.getAddress)(tx.from);
      const nonce = (0, index_js_2.getBigInt)(tx.nonce, "tx.nonce");
      let nonceHex = nonce.toString(16);
      if (nonceHex === "0") {
        nonceHex = "0x";
      } else if (nonceHex.length % 2) {
        nonceHex = "0x0" + nonceHex;
      } else {
        nonceHex = "0x" + nonceHex;
      }
      return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.encodeRlp)([from, nonceHex])), 12));
    }
    exports.getCreateAddress = getCreateAddress;
    function getCreate2Address(_from, _salt, _initCodeHash) {
      const from = (0, address_js_1.getAddress)(_from);
      const salt = (0, index_js_2.getBytes)(_salt, "salt");
      const initCodeHash = (0, index_js_2.getBytes)(_initCodeHash, "initCodeHash");
      (0, index_js_2.assertArgument)(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
      (0, index_js_2.assertArgument)(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
      return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.concat)(["0xff", from, salt, initCodeHash])), 12));
    }
    exports.getCreate2Address = getCreate2Address;
  }
});

// node_modules/ethers/lib.commonjs/address/checks.js
var require_checks = __commonJS({
  "node_modules/ethers/lib.commonjs/address/checks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAddress = exports.isAddress = exports.isAddressable = void 0;
    var index_js_1 = require_utils3();
    var address_js_1 = require_address();
    function isAddressable(value) {
      return value && typeof value.getAddress === "function";
    }
    exports.isAddressable = isAddressable;
    function isAddress(value) {
      try {
        (0, address_js_1.getAddress)(value);
        return true;
      } catch (error) {
      }
      return false;
    }
    exports.isAddress = isAddress;
    async function checkAddress(target, promise) {
      const result = await promise;
      if (result == null || result === "0x0000000000000000000000000000000000000000") {
        (0, index_js_1.assert)(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
        (0, index_js_1.assertArgument)(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
      }
      return (0, address_js_1.getAddress)(result);
    }
    function resolveAddress(target, resolver) {
      if (typeof target === "string") {
        if (target.match(/^0x[0-9a-f]{40}$/i)) {
          return (0, address_js_1.getAddress)(target);
        }
        (0, index_js_1.assert)(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
        return checkAddress(target, resolver.resolveName(target));
      } else if (isAddressable(target)) {
        return checkAddress(target, target.getAddress());
      } else if (target && typeof target.then === "function") {
        return checkAddress(target, target);
      }
      (0, index_js_1.assertArgument)(false, "unsupported addressable value", "target", target);
    }
    exports.resolveAddress = resolveAddress;
  }
});

// node_modules/ethers/lib.commonjs/address/index.js
var require_address2 = __commonJS({
  "node_modules/ethers/lib.commonjs/address/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAddress = exports.isAddress = exports.isAddressable = exports.getCreate2Address = exports.getCreateAddress = exports.getIcapAddress = exports.getAddress = void 0;
    var address_js_1 = require_address();
    Object.defineProperty(exports, "getAddress", { enumerable: true, get: function() {
      return address_js_1.getAddress;
    } });
    Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function() {
      return address_js_1.getIcapAddress;
    } });
    var contract_address_js_1 = require_contract_address();
    Object.defineProperty(exports, "getCreateAddress", { enumerable: true, get: function() {
      return contract_address_js_1.getCreateAddress;
    } });
    Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function() {
      return contract_address_js_1.getCreate2Address;
    } });
    var checks_js_1 = require_checks();
    Object.defineProperty(exports, "isAddressable", { enumerable: true, get: function() {
      return checks_js_1.isAddressable;
    } });
    Object.defineProperty(exports, "isAddress", { enumerable: true, get: function() {
      return checks_js_1.isAddress;
    } });
    Object.defineProperty(exports, "resolveAddress", { enumerable: true, get: function() {
      return checks_js_1.resolveAddress;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/typed.js
var require_typed = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/typed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Typed = void 0;
    var index_js_1 = require_utils3();
    var _gaurd = {};
    function n(value, width) {
      let signed = false;
      if (width < 0) {
        signed = true;
        width *= -1;
      }
      return new Typed(_gaurd, `${signed ? "" : "u"}int${width}`, value, { signed, width });
    }
    function b(value, size) {
      return new Typed(_gaurd, `bytes${size ? size : ""}`, value, { size });
    }
    var _typedSymbol = Symbol.for("_ethers_typed");
    var _options;
    var _Typed = class _Typed {
      /**
       *  @_ignore:
       */
      constructor(gaurd, type, value, options) {
        /**
         *  The type, as a Solidity-compatible type.
         */
        __publicField(this, "type");
        /**
         *  The actual value.
         */
        __publicField(this, "value");
        __privateAdd(this, _options, void 0);
        /**
         *  @_ignore:
         */
        __publicField(this, "_typedSymbol");
        if (options == null) {
          options = null;
        }
        (0, index_js_1.assertPrivate)(_gaurd, gaurd, "Typed");
        (0, index_js_1.defineProperties)(this, { _typedSymbol, type, value });
        __privateSet(this, _options, options);
        this.format();
      }
      /**
       *  Format the type as a Human-Readable type.
       */
      format() {
        if (this.type === "array") {
          throw new Error("");
        } else if (this.type === "dynamicArray") {
          throw new Error("");
        } else if (this.type === "tuple") {
          return `tuple(${this.value.map((v) => v.format()).join(",")})`;
        }
        return this.type;
      }
      /**
       *  The default value returned by this type.
       */
      defaultValue() {
        return 0;
      }
      /**
       *  The minimum value for numeric types.
       */
      minValue() {
        return 0;
      }
      /**
       *  The maximum value for numeric types.
       */
      maxValue() {
        return 0;
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
       */
      isBigInt() {
        return !!this.type.match(/^u?int[0-9]+$/);
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
       */
      isData() {
        return this.type.startsWith("bytes");
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
       */
      isString() {
        return this.type === "string";
      }
      /**
       *  Returns the tuple name, if this is a tuple. Throws otherwise.
       */
      get tupleName() {
        if (this.type !== "tuple") {
          throw TypeError("not a tuple");
        }
        return __privateGet(this, _options);
      }
      // Returns the length of this type as an array
      // - `null` indicates the length is unforced, it could be dynamic
      // - `-1` indicates the length is dynamic
      // - any other value indicates it is a static array and is its length
      /**
       *  Returns the length of the array type or ``-1`` if it is dynamic.
       *
       *  Throws if the type is not an array.
       */
      get arrayLength() {
        if (this.type !== "array") {
          throw TypeError("not an array");
        }
        if (__privateGet(this, _options) === true) {
          return -1;
        }
        if (__privateGet(this, _options) === false) {
          return this.value.length;
        }
        return null;
      }
      /**
       *  Returns a new **Typed** of %%type%% with the %%value%%.
       */
      static from(type, value) {
        return new _Typed(_gaurd, type, value);
      }
      /**
       *  Return a new ``uint8`` type for %%v%%.
       */
      static uint8(v) {
        return n(v, 8);
      }
      /**
       *  Return a new ``uint16`` type for %%v%%.
       */
      static uint16(v) {
        return n(v, 16);
      }
      /**
       *  Return a new ``uint24`` type for %%v%%.
       */
      static uint24(v) {
        return n(v, 24);
      }
      /**
       *  Return a new ``uint32`` type for %%v%%.
       */
      static uint32(v) {
        return n(v, 32);
      }
      /**
       *  Return a new ``uint40`` type for %%v%%.
       */
      static uint40(v) {
        return n(v, 40);
      }
      /**
       *  Return a new ``uint48`` type for %%v%%.
       */
      static uint48(v) {
        return n(v, 48);
      }
      /**
       *  Return a new ``uint56`` type for %%v%%.
       */
      static uint56(v) {
        return n(v, 56);
      }
      /**
       *  Return a new ``uint64`` type for %%v%%.
       */
      static uint64(v) {
        return n(v, 64);
      }
      /**
       *  Return a new ``uint72`` type for %%v%%.
       */
      static uint72(v) {
        return n(v, 72);
      }
      /**
       *  Return a new ``uint80`` type for %%v%%.
       */
      static uint80(v) {
        return n(v, 80);
      }
      /**
       *  Return a new ``uint88`` type for %%v%%.
       */
      static uint88(v) {
        return n(v, 88);
      }
      /**
       *  Return a new ``uint96`` type for %%v%%.
       */
      static uint96(v) {
        return n(v, 96);
      }
      /**
       *  Return a new ``uint104`` type for %%v%%.
       */
      static uint104(v) {
        return n(v, 104);
      }
      /**
       *  Return a new ``uint112`` type for %%v%%.
       */
      static uint112(v) {
        return n(v, 112);
      }
      /**
       *  Return a new ``uint120`` type for %%v%%.
       */
      static uint120(v) {
        return n(v, 120);
      }
      /**
       *  Return a new ``uint128`` type for %%v%%.
       */
      static uint128(v) {
        return n(v, 128);
      }
      /**
       *  Return a new ``uint136`` type for %%v%%.
       */
      static uint136(v) {
        return n(v, 136);
      }
      /**
       *  Return a new ``uint144`` type for %%v%%.
       */
      static uint144(v) {
        return n(v, 144);
      }
      /**
       *  Return a new ``uint152`` type for %%v%%.
       */
      static uint152(v) {
        return n(v, 152);
      }
      /**
       *  Return a new ``uint160`` type for %%v%%.
       */
      static uint160(v) {
        return n(v, 160);
      }
      /**
       *  Return a new ``uint168`` type for %%v%%.
       */
      static uint168(v) {
        return n(v, 168);
      }
      /**
       *  Return a new ``uint176`` type for %%v%%.
       */
      static uint176(v) {
        return n(v, 176);
      }
      /**
       *  Return a new ``uint184`` type for %%v%%.
       */
      static uint184(v) {
        return n(v, 184);
      }
      /**
       *  Return a new ``uint192`` type for %%v%%.
       */
      static uint192(v) {
        return n(v, 192);
      }
      /**
       *  Return a new ``uint200`` type for %%v%%.
       */
      static uint200(v) {
        return n(v, 200);
      }
      /**
       *  Return a new ``uint208`` type for %%v%%.
       */
      static uint208(v) {
        return n(v, 208);
      }
      /**
       *  Return a new ``uint216`` type for %%v%%.
       */
      static uint216(v) {
        return n(v, 216);
      }
      /**
       *  Return a new ``uint224`` type for %%v%%.
       */
      static uint224(v) {
        return n(v, 224);
      }
      /**
       *  Return a new ``uint232`` type for %%v%%.
       */
      static uint232(v) {
        return n(v, 232);
      }
      /**
       *  Return a new ``uint240`` type for %%v%%.
       */
      static uint240(v) {
        return n(v, 240);
      }
      /**
       *  Return a new ``uint248`` type for %%v%%.
       */
      static uint248(v) {
        return n(v, 248);
      }
      /**
       *  Return a new ``uint256`` type for %%v%%.
       */
      static uint256(v) {
        return n(v, 256);
      }
      /**
       *  Return a new ``uint256`` type for %%v%%.
       */
      static uint(v) {
        return n(v, 256);
      }
      /**
       *  Return a new ``int8`` type for %%v%%.
       */
      static int8(v) {
        return n(v, -8);
      }
      /**
       *  Return a new ``int16`` type for %%v%%.
       */
      static int16(v) {
        return n(v, -16);
      }
      /**
       *  Return a new ``int24`` type for %%v%%.
       */
      static int24(v) {
        return n(v, -24);
      }
      /**
       *  Return a new ``int32`` type for %%v%%.
       */
      static int32(v) {
        return n(v, -32);
      }
      /**
       *  Return a new ``int40`` type for %%v%%.
       */
      static int40(v) {
        return n(v, -40);
      }
      /**
       *  Return a new ``int48`` type for %%v%%.
       */
      static int48(v) {
        return n(v, -48);
      }
      /**
       *  Return a new ``int56`` type for %%v%%.
       */
      static int56(v) {
        return n(v, -56);
      }
      /**
       *  Return a new ``int64`` type for %%v%%.
       */
      static int64(v) {
        return n(v, -64);
      }
      /**
       *  Return a new ``int72`` type for %%v%%.
       */
      static int72(v) {
        return n(v, -72);
      }
      /**
       *  Return a new ``int80`` type for %%v%%.
       */
      static int80(v) {
        return n(v, -80);
      }
      /**
       *  Return a new ``int88`` type for %%v%%.
       */
      static int88(v) {
        return n(v, -88);
      }
      /**
       *  Return a new ``int96`` type for %%v%%.
       */
      static int96(v) {
        return n(v, -96);
      }
      /**
       *  Return a new ``int104`` type for %%v%%.
       */
      static int104(v) {
        return n(v, -104);
      }
      /**
       *  Return a new ``int112`` type for %%v%%.
       */
      static int112(v) {
        return n(v, -112);
      }
      /**
       *  Return a new ``int120`` type for %%v%%.
       */
      static int120(v) {
        return n(v, -120);
      }
      /**
       *  Return a new ``int128`` type for %%v%%.
       */
      static int128(v) {
        return n(v, -128);
      }
      /**
       *  Return a new ``int136`` type for %%v%%.
       */
      static int136(v) {
        return n(v, -136);
      }
      /**
       *  Return a new ``int144`` type for %%v%%.
       */
      static int144(v) {
        return n(v, -144);
      }
      /**
       *  Return a new ``int52`` type for %%v%%.
       */
      static int152(v) {
        return n(v, -152);
      }
      /**
       *  Return a new ``int160`` type for %%v%%.
       */
      static int160(v) {
        return n(v, -160);
      }
      /**
       *  Return a new ``int168`` type for %%v%%.
       */
      static int168(v) {
        return n(v, -168);
      }
      /**
       *  Return a new ``int176`` type for %%v%%.
       */
      static int176(v) {
        return n(v, -176);
      }
      /**
       *  Return a new ``int184`` type for %%v%%.
       */
      static int184(v) {
        return n(v, -184);
      }
      /**
       *  Return a new ``int92`` type for %%v%%.
       */
      static int192(v) {
        return n(v, -192);
      }
      /**
       *  Return a new ``int200`` type for %%v%%.
       */
      static int200(v) {
        return n(v, -200);
      }
      /**
       *  Return a new ``int208`` type for %%v%%.
       */
      static int208(v) {
        return n(v, -208);
      }
      /**
       *  Return a new ``int216`` type for %%v%%.
       */
      static int216(v) {
        return n(v, -216);
      }
      /**
       *  Return a new ``int224`` type for %%v%%.
       */
      static int224(v) {
        return n(v, -224);
      }
      /**
       *  Return a new ``int232`` type for %%v%%.
       */
      static int232(v) {
        return n(v, -232);
      }
      /**
       *  Return a new ``int240`` type for %%v%%.
       */
      static int240(v) {
        return n(v, -240);
      }
      /**
       *  Return a new ``int248`` type for %%v%%.
       */
      static int248(v) {
        return n(v, -248);
      }
      /**
       *  Return a new ``int256`` type for %%v%%.
       */
      static int256(v) {
        return n(v, -256);
      }
      /**
       *  Return a new ``int256`` type for %%v%%.
       */
      static int(v) {
        return n(v, -256);
      }
      /**
       *  Return a new ``bytes1`` type for %%v%%.
       */
      static bytes1(v) {
        return b(v, 1);
      }
      /**
       *  Return a new ``bytes2`` type for %%v%%.
       */
      static bytes2(v) {
        return b(v, 2);
      }
      /**
       *  Return a new ``bytes3`` type for %%v%%.
       */
      static bytes3(v) {
        return b(v, 3);
      }
      /**
       *  Return a new ``bytes4`` type for %%v%%.
       */
      static bytes4(v) {
        return b(v, 4);
      }
      /**
       *  Return a new ``bytes5`` type for %%v%%.
       */
      static bytes5(v) {
        return b(v, 5);
      }
      /**
       *  Return a new ``bytes6`` type for %%v%%.
       */
      static bytes6(v) {
        return b(v, 6);
      }
      /**
       *  Return a new ``bytes7`` type for %%v%%.
       */
      static bytes7(v) {
        return b(v, 7);
      }
      /**
       *  Return a new ``bytes8`` type for %%v%%.
       */
      static bytes8(v) {
        return b(v, 8);
      }
      /**
       *  Return a new ``bytes9`` type for %%v%%.
       */
      static bytes9(v) {
        return b(v, 9);
      }
      /**
       *  Return a new ``bytes10`` type for %%v%%.
       */
      static bytes10(v) {
        return b(v, 10);
      }
      /**
       *  Return a new ``bytes11`` type for %%v%%.
       */
      static bytes11(v) {
        return b(v, 11);
      }
      /**
       *  Return a new ``bytes12`` type for %%v%%.
       */
      static bytes12(v) {
        return b(v, 12);
      }
      /**
       *  Return a new ``bytes13`` type for %%v%%.
       */
      static bytes13(v) {
        return b(v, 13);
      }
      /**
       *  Return a new ``bytes14`` type for %%v%%.
       */
      static bytes14(v) {
        return b(v, 14);
      }
      /**
       *  Return a new ``bytes15`` type for %%v%%.
       */
      static bytes15(v) {
        return b(v, 15);
      }
      /**
       *  Return a new ``bytes16`` type for %%v%%.
       */
      static bytes16(v) {
        return b(v, 16);
      }
      /**
       *  Return a new ``bytes17`` type for %%v%%.
       */
      static bytes17(v) {
        return b(v, 17);
      }
      /**
       *  Return a new ``bytes18`` type for %%v%%.
       */
      static bytes18(v) {
        return b(v, 18);
      }
      /**
       *  Return a new ``bytes19`` type for %%v%%.
       */
      static bytes19(v) {
        return b(v, 19);
      }
      /**
       *  Return a new ``bytes20`` type for %%v%%.
       */
      static bytes20(v) {
        return b(v, 20);
      }
      /**
       *  Return a new ``bytes21`` type for %%v%%.
       */
      static bytes21(v) {
        return b(v, 21);
      }
      /**
       *  Return a new ``bytes22`` type for %%v%%.
       */
      static bytes22(v) {
        return b(v, 22);
      }
      /**
       *  Return a new ``bytes23`` type for %%v%%.
       */
      static bytes23(v) {
        return b(v, 23);
      }
      /**
       *  Return a new ``bytes24`` type for %%v%%.
       */
      static bytes24(v) {
        return b(v, 24);
      }
      /**
       *  Return a new ``bytes25`` type for %%v%%.
       */
      static bytes25(v) {
        return b(v, 25);
      }
      /**
       *  Return a new ``bytes26`` type for %%v%%.
       */
      static bytes26(v) {
        return b(v, 26);
      }
      /**
       *  Return a new ``bytes27`` type for %%v%%.
       */
      static bytes27(v) {
        return b(v, 27);
      }
      /**
       *  Return a new ``bytes28`` type for %%v%%.
       */
      static bytes28(v) {
        return b(v, 28);
      }
      /**
       *  Return a new ``bytes29`` type for %%v%%.
       */
      static bytes29(v) {
        return b(v, 29);
      }
      /**
       *  Return a new ``bytes30`` type for %%v%%.
       */
      static bytes30(v) {
        return b(v, 30);
      }
      /**
       *  Return a new ``bytes31`` type for %%v%%.
       */
      static bytes31(v) {
        return b(v, 31);
      }
      /**
       *  Return a new ``bytes32`` type for %%v%%.
       */
      static bytes32(v) {
        return b(v, 32);
      }
      /**
       *  Return a new ``address`` type for %%v%%.
       */
      static address(v) {
        return new _Typed(_gaurd, "address", v);
      }
      /**
       *  Return a new ``bool`` type for %%v%%.
       */
      static bool(v) {
        return new _Typed(_gaurd, "bool", !!v);
      }
      /**
       *  Return a new ``bytes`` type for %%v%%.
       */
      static bytes(v) {
        return new _Typed(_gaurd, "bytes", v);
      }
      /**
       *  Return a new ``string`` type for %%v%%.
       */
      static string(v) {
        return new _Typed(_gaurd, "string", v);
      }
      /**
       *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
       */
      static array(v, dynamic) {
        throw new Error("not implemented yet");
        return new _Typed(_gaurd, "array", v, dynamic);
      }
      /**
       *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
       */
      static tuple(v, name) {
        throw new Error("not implemented yet");
        return new _Typed(_gaurd, "tuple", v, name);
      }
      /**
       *  Return a new ``uint8`` type for %%v%%.
       */
      static overrides(v) {
        return new _Typed(_gaurd, "overrides", Object.assign({}, v));
      }
      /**
       *  Returns true only if %%value%% is a [[Typed]] instance.
       */
      static isTyped(value) {
        return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === _typedSymbol;
      }
      /**
       *  If the value is a [[Typed]] instance, validates the underlying value
       *  and returns it, otherwise returns value directly.
       *
       *  This is useful for functions that with to accept either a [[Typed]]
       *  object or values.
       */
      static dereference(value, type) {
        if (_Typed.isTyped(value)) {
          if (value.type !== type) {
            throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
          }
          return value.value;
        }
        return value;
      }
    };
    _options = new WeakMap();
    var Typed = _Typed;
    exports.Typed = Typed;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/address.js
var require_address3 = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddressCoder = void 0;
    var index_js_1 = require_address2();
    var maths_js_1 = require_maths();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var AddressCoder = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("address", "address", localName, false);
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, _value) {
        let value = typed_js_1.Typed.dereference(_value, "string");
        try {
          value = (0, index_js_1.getAddress)(value);
        } catch (error) {
          return this._throwError(error.message, _value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        return (0, index_js_1.getAddress)((0, maths_js_1.toBeHex)(reader.readValue(), 20));
      }
    };
    exports.AddressCoder = AddressCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/anonymous.js
var require_anonymous = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/anonymous.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnonymousCoder = void 0;
    var abstract_coder_js_1 = require_abstract_coder();
    var AnonymousCoder = class extends abstract_coder_js_1.Coder {
      constructor(coder) {
        super(coder.name, coder.type, "_", coder.dynamic);
        __publicField(this, "coder");
        this.coder = coder;
      }
      defaultValue() {
        return this.coder.defaultValue();
      }
      encode(writer, value) {
        return this.coder.encode(writer, value);
      }
      decode(reader) {
        return this.coder.decode(reader);
      }
    };
    exports.AnonymousCoder = AnonymousCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/array.js
var require_array = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayCoder = exports.unpack = exports.pack = void 0;
    var index_js_1 = require_utils3();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var anonymous_js_1 = require_anonymous();
    function pack(writer, coders, values) {
      let arrayValues = [];
      if (Array.isArray(values)) {
        arrayValues = values;
      } else if (values && typeof values === "object") {
        let unique = {};
        arrayValues = coders.map((coder) => {
          const name = coder.localName;
          (0, index_js_1.assert)(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
          (0, index_js_1.assert)(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
          unique[name] = true;
          return values[name];
        });
      } else {
        (0, index_js_1.assertArgument)(false, "invalid tuple value", "tuple", values);
      }
      (0, index_js_1.assertArgument)(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
      let staticWriter = new abstract_coder_js_1.Writer();
      let dynamicWriter = new abstract_coder_js_1.Writer();
      let updateFuncs = [];
      coders.forEach((coder, index) => {
        let value = arrayValues[index];
        if (coder.dynamic) {
          let dynamicOffset = dynamicWriter.length;
          coder.encode(dynamicWriter, value);
          let updateFunc = staticWriter.writeUpdatableValue();
          updateFuncs.push((baseOffset) => {
            updateFunc(baseOffset + dynamicOffset);
          });
        } else {
          coder.encode(staticWriter, value);
        }
      });
      updateFuncs.forEach((func) => {
        func(staticWriter.length);
      });
      let length = writer.appendWriter(staticWriter);
      length += writer.appendWriter(dynamicWriter);
      return length;
    }
    exports.pack = pack;
    function unpack(reader, coders) {
      let values = [];
      let keys = [];
      let baseReader = reader.subReader(0);
      coders.forEach((coder) => {
        let value = null;
        if (coder.dynamic) {
          let offset = reader.readIndex();
          let offsetReader = baseReader.subReader(offset);
          try {
            value = coder.decode(offsetReader);
          } catch (error) {
            if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
              throw error;
            }
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
          }
        } else {
          try {
            value = coder.decode(reader);
          } catch (error) {
            if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
              throw error;
            }
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
          }
        }
        if (value == void 0) {
          throw new Error("investigate");
        }
        values.push(value);
        keys.push(coder.localName || null);
      });
      return abstract_coder_js_1.Result.fromItems(values, keys);
    }
    exports.unpack = unpack;
    var ArrayCoder = class extends abstract_coder_js_1.Coder {
      constructor(coder, length, localName) {
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        __publicField(this, "coder");
        __publicField(this, "length");
        (0, index_js_1.defineProperties)(this, { coder, length });
      }
      defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i = 0; i < this.length; i++) {
          result.push(defaultChild);
        }
        return result;
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "array");
        if (!Array.isArray(value)) {
          this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
          count = value.length;
          writer.writeValue(value.length);
        }
        (0, index_js_1.assertArgumentCount)(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for (let i = 0; i < value.length; i++) {
          coders.push(this.coder);
        }
        return pack(writer, coders, value);
      }
      decode(reader) {
        let count = this.length;
        if (count === -1) {
          count = reader.readIndex();
          (0, index_js_1.assert)(count * abstract_coder_js_1.WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * abstract_coder_js_1.WordSize, length: reader.dataLength });
        }
        let coders = [];
        for (let i = 0; i < count; i++) {
          coders.push(new anonymous_js_1.AnonymousCoder(this.coder));
        }
        return unpack(reader, coders);
      }
    };
    exports.ArrayCoder = ArrayCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/boolean.js
var require_boolean = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/boolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanCoder = void 0;
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var BooleanCoder = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("bool", "bool", localName, false);
      }
      defaultValue() {
        return false;
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "bool");
        return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
        return !!reader.readValue();
      }
    };
    exports.BooleanCoder = BooleanCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/bytes.js
var require_bytes = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/bytes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesCoder = exports.DynamicBytesCoder = void 0;
    var index_js_1 = require_utils3();
    var abstract_coder_js_1 = require_abstract_coder();
    var DynamicBytesCoder = class extends abstract_coder_js_1.Coder {
      constructor(type, localName) {
        super(type, type, localName, true);
      }
      defaultValue() {
        return "0x";
      }
      encode(writer, value) {
        value = (0, index_js_1.getBytesCopy)(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
      }
      decode(reader) {
        return reader.readBytes(reader.readIndex(), true);
      }
    };
    exports.DynamicBytesCoder = DynamicBytesCoder;
    var BytesCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("bytes", localName);
      }
      decode(reader) {
        return (0, index_js_1.hexlify)(super.decode(reader));
      }
    };
    exports.BytesCoder = BytesCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js
var require_fixed_bytes = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixedBytesCoder = void 0;
    var index_js_1 = require_utils3();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var FixedBytesCoder = class extends abstract_coder_js_1.Coder {
      constructor(size, localName) {
        let name = "bytes" + String(size);
        super(name, name, localName, false);
        __publicField(this, "size");
        (0, index_js_1.defineProperties)(this, { size }, { size: "number" });
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, _value) {
        let data = (0, index_js_1.getBytesCopy)(typed_js_1.Typed.dereference(_value, this.type));
        if (data.length !== this.size) {
          this._throwError("incorrect data length", _value);
        }
        return writer.writeBytes(data);
      }
      decode(reader) {
        return (0, index_js_1.hexlify)(reader.readBytes(this.size));
      }
    };
    exports.FixedBytesCoder = FixedBytesCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/null.js
var require_null = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/null.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NullCoder = void 0;
    var abstract_coder_js_1 = require_abstract_coder();
    var Empty = new Uint8Array([]);
    var NullCoder = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("null", "", localName, false);
      }
      defaultValue() {
        return null;
      }
      encode(writer, value) {
        if (value != null) {
          this._throwError("not null", value);
        }
        return writer.writeBytes(Empty);
      }
      decode(reader) {
        reader.readBytes(0);
        return null;
      }
    };
    exports.NullCoder = NullCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/number.js
var require_number = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/number.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumberCoder = void 0;
    var index_js_1 = require_utils3();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    var NumberCoder = class extends abstract_coder_js_1.Coder {
      constructor(size, signed, localName) {
        const name = (signed ? "int" : "uint") + size * 8;
        super(name, name, localName, false);
        __publicField(this, "size");
        __publicField(this, "signed");
        (0, index_js_1.defineProperties)(this, { size, signed }, { size: "number", signed: "boolean" });
      }
      defaultValue() {
        return 0;
      }
      encode(writer, _value) {
        let value = (0, index_js_1.getBigInt)(typed_js_1.Typed.dereference(_value, this.type));
        let maxUintValue = (0, index_js_1.mask)(BN_MAX_UINT256, abstract_coder_js_1.WordSize * 8);
        if (this.signed) {
          let bounds = (0, index_js_1.mask)(maxUintValue, this.size * 8 - 1);
          if (value > bounds || value < -(bounds + BN_1)) {
            this._throwError("value out-of-bounds", _value);
          }
          value = (0, index_js_1.toTwos)(value, 8 * abstract_coder_js_1.WordSize);
        } else if (value < BN_0 || value > (0, index_js_1.mask)(maxUintValue, this.size * 8)) {
          this._throwError("value out-of-bounds", _value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        let value = (0, index_js_1.mask)(reader.readValue(), this.size * 8);
        if (this.signed) {
          value = (0, index_js_1.fromTwos)(value, this.size * 8);
        }
        return value;
      }
    };
    exports.NumberCoder = NumberCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/string.js
var require_string = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringCoder = void 0;
    var utf8_js_1 = require_utf8();
    var typed_js_1 = require_typed();
    var bytes_js_1 = require_bytes();
    var StringCoder = class extends bytes_js_1.DynamicBytesCoder {
      constructor(localName) {
        super("string", localName);
      }
      defaultValue() {
        return "";
      }
      encode(writer, _value) {
        return super.encode(writer, (0, utf8_js_1.toUtf8Bytes)(typed_js_1.Typed.dereference(_value, "string")));
      }
      decode(reader) {
        return (0, utf8_js_1.toUtf8String)(super.decode(reader));
      }
    };
    exports.StringCoder = StringCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/tuple.js
var require_tuple = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/tuple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TupleCoder = void 0;
    var properties_js_1 = require_properties();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var array_js_1 = require_array();
    var TupleCoder = class extends abstract_coder_js_1.Coder {
      constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
          if (coder.dynamic) {
            dynamic = true;
          }
          types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        __publicField(this, "coders");
        (0, properties_js_1.defineProperties)(this, { coders: Object.freeze(coders.slice()) });
      }
      defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
          values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder) => {
          const name = coder.localName;
          if (name) {
            if (!accum[name]) {
              accum[name] = 0;
            }
            accum[name]++;
          }
          return accum;
        }, {});
        this.coders.forEach((coder, index) => {
          let name = coder.localName;
          if (!name || uniqueNames[name] !== 1) {
            return;
          }
          if (name === "length") {
            name = "_length";
          }
          if (values[name] != null) {
            return;
          }
          values[name] = values[index];
        });
        return Object.freeze(values);
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "tuple");
        return (0, array_js_1.pack)(writer, this.coders, value);
      }
      decode(reader) {
        return (0, array_js_1.unpack)(reader, this.coders);
      }
    };
    exports.TupleCoder = TupleCoder;
  }
});

// node_modules/ethers/lib.commonjs/hash/id.js
var require_id = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/id.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.id = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils3();
    function id(value) {
      return (0, index_js_1.keccak256)((0, index_js_2.toUtf8Bytes)(value));
    }
    exports.id = id;
  }
});

// node_modules/@adraffy/ens-normalize/dist/index.cjs
var require_dist = __commonJS({
  "node_modules/@adraffy/ens-normalize/dist/index.cjs"(exports) {
    "use strict";
    var COMPRESSED$1 = "";
    var FENCED = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
    var NSM_MAX = 4;
    function decode_arithmetic(bytes) {
      let pos = 0;
      function u16() {
        return bytes[pos++] << 8 | bytes[pos++];
      }
      let symbol_count = u16();
      let total = 1;
      let acc = [0, 1];
      for (let i = 1; i < symbol_count; i++) {
        acc.push(total += u16());
      }
      let skip = u16();
      let pos_payload = pos;
      pos += skip;
      let read_width = 0;
      let read_buffer = 0;
      function read_bit() {
        if (read_width == 0) {
          read_buffer = read_buffer << 8 | bytes[pos++];
          read_width = 8;
        }
        return read_buffer >> --read_width & 1;
      }
      const N = 31;
      const FULL = 2 ** N;
      const HALF = FULL >>> 1;
      const QRTR = HALF >> 1;
      const MASK = FULL - 1;
      let register = 0;
      for (let i = 0; i < N; i++)
        register = register << 1 | read_bit();
      let symbols = [];
      let low = 0;
      let range = FULL;
      while (true) {
        let value = Math.floor(((register - low + 1) * total - 1) / range);
        let start = 0;
        let end = symbol_count;
        while (end - start > 1) {
          let mid = start + end >>> 1;
          if (value < acc[mid]) {
            end = mid;
          } else {
            start = mid;
          }
        }
        if (start == 0)
          break;
        symbols.push(start);
        let a = low + Math.floor(range * acc[start] / total);
        let b = low + Math.floor(range * acc[start + 1] / total) - 1;
        while (((a ^ b) & HALF) == 0) {
          register = register << 1 & MASK | read_bit();
          a = a << 1 & MASK;
          b = b << 1 & MASK | 1;
        }
        while (a & ~b & QRTR) {
          register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
          a = a << 1 ^ HALF;
          b = (b ^ HALF) << 1 | HALF | 1;
        }
        low = a;
        range = 1 + b - a;
      }
      let offset = symbol_count - 4;
      return symbols.map((x2) => {
        switch (x2 - offset) {
          case 3:
            return offset + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
          case 2:
            return offset + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
          case 1:
            return offset + bytes[pos_payload++];
          default:
            return x2 - 1;
        }
      });
    }
    function read_payload(v) {
      let pos = 0;
      return () => v[pos++];
    }
    function read_compressed_payload(s) {
      return read_payload(decode_arithmetic(unsafe_atob(s)));
    }
    function unsafe_atob(s) {
      let lookup = [];
      [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
      let n = s.length;
      let ret = new Uint8Array(6 * n >> 3);
      for (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {
        carry = carry << 6 | lookup[s.charCodeAt(i)];
        width += 6;
        if (width >= 8) {
          ret[pos++] = carry >> (width -= 8);
        }
      }
      return ret;
    }
    function signed(i) {
      return i & 1 ? ~i >> 1 : i >> 1;
    }
    function read_deltas(n, next) {
      let v = Array(n);
      for (let i = 0, x2 = 0; i < n; i++)
        v[i] = x2 += signed(next());
      return v;
    }
    function read_sorted(next, prev = 0) {
      let ret = [];
      while (true) {
        let x2 = next();
        let n = next();
        if (!n)
          break;
        prev += x2;
        for (let i = 0; i < n; i++) {
          ret.push(prev + i);
        }
        prev += n + 1;
      }
      return ret;
    }
    function read_sorted_arrays(next) {
      return read_array_while(() => {
        let v = read_sorted(next);
        if (v.length)
          return v;
      });
    }
    function read_mapped(next) {
      let ret = [];
      while (true) {
        let w = next();
        if (w == 0)
          break;
        ret.push(read_linear_table(w, next));
      }
      while (true) {
        let w = next() - 1;
        if (w < 0)
          break;
        ret.push(read_replacement_table(w, next));
      }
      return ret.flat();
    }
    function read_array_while(next) {
      let v = [];
      while (true) {
        let x2 = next(v.length);
        if (!x2)
          break;
        v.push(x2);
      }
      return v;
    }
    function read_transposed(n, w, next) {
      let m = Array(n).fill().map(() => []);
      for (let i = 0; i < w; i++) {
        read_deltas(n, next).forEach((x2, j2) => m[j2].push(x2));
      }
      return m;
    }
    function read_linear_table(w, next) {
      let dx = 1 + next();
      let dy = next();
      let vN = read_array_while(next);
      let m = read_transposed(vN.length, 1 + w, next);
      return m.flatMap((v, i) => {
        let [x2, ...ys] = v;
        return Array(vN[i]).fill().map((_, j2) => {
          let j_dy = j2 * dy;
          return [x2 + j2 * dx, ys.map((y) => y + j_dy)];
        });
      });
    }
    function read_replacement_table(w, next) {
      let n = 1 + next();
      let m = read_transposed(n, 1 + w, next);
      return m.map((v) => [v[0], v.slice(1)]);
    }
    function read_trie(next) {
      let ret = [];
      let sorted = read_sorted(next);
      expand(decode([]), []);
      return ret;
      function decode(Q2) {
        let S = next();
        let B = read_array_while(() => {
          let cps = read_sorted(next).map((i) => sorted[i]);
          if (cps.length)
            return decode(cps);
        });
        return { S, B, Q: Q2 };
      }
      function expand({ S, B }, cps, saved) {
        if (S & 4 && saved === cps[cps.length - 1])
          return;
        if (S & 2)
          saved = cps[cps.length - 1];
        if (S & 1)
          ret.push(cps);
        for (let br2 of B) {
          for (let cp of br2.Q) {
            expand(br2, [...cps, cp], saved);
          }
        }
      }
    }
    function hex_cp(cp) {
      return cp.toString(16).toUpperCase().padStart(2, "0");
    }
    function quote_cp(cp) {
      return `{${hex_cp(cp)}}`;
    }
    function explode_cp(s) {
      let cps = [];
      for (let pos = 0, len = s.length; pos < len; ) {
        let cp = s.codePointAt(pos);
        pos += cp < 65536 ? 1 : 2;
        cps.push(cp);
      }
      return cps;
    }
    function str_from_cps(cps) {
      const chunk = 4096;
      let len = cps.length;
      if (len < chunk)
        return String.fromCodePoint(...cps);
      let buf = [];
      for (let i = 0; i < len; ) {
        buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
      }
      return buf.join("");
    }
    function compare_arrays(a, b) {
      let n = a.length;
      let c = n - b.length;
      for (let i = 0; c == 0 && i < n; i++)
        c = a[i] - b[i];
      return c;
    }
    var COMPRESSED = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
    var S0 = 44032;
    var L0 = 4352;
    var V0 = 4449;
    var T0 = 4519;
    var L_COUNT = 19;
    var V_COUNT = 21;
    var T_COUNT = 28;
    var N_COUNT = V_COUNT * T_COUNT;
    var S_COUNT = L_COUNT * N_COUNT;
    var S1 = S0 + S_COUNT;
    var L1 = L0 + L_COUNT;
    var V1 = V0 + V_COUNT;
    var T1 = T0 + T_COUNT;
    function unpack_cc(packed) {
      return packed >> 24 & 255;
    }
    function unpack_cp(packed) {
      return packed & 16777215;
    }
    var SHIFTED_RANK;
    var EXCLUSIONS;
    var DECOMP;
    var RECOMP;
    function init$1() {
      let r = read_compressed_payload(COMPRESSED);
      SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map((x2) => [x2, i + 1 << 24])));
      EXCLUSIONS = new Set(read_sorted(r));
      DECOMP = /* @__PURE__ */ new Map();
      RECOMP = /* @__PURE__ */ new Map();
      for (let [cp, cps] of read_mapped(r)) {
        if (!EXCLUSIONS.has(cp) && cps.length == 2) {
          let [a, b] = cps;
          let bucket = RECOMP.get(a);
          if (!bucket) {
            bucket = /* @__PURE__ */ new Map();
            RECOMP.set(a, bucket);
          }
          bucket.set(b, cp);
        }
        DECOMP.set(cp, cps.reverse());
      }
    }
    function is_hangul(cp) {
      return cp >= S0 && cp < S1;
    }
    function compose_pair(a, b) {
      if (a >= L0 && a < L1 && b >= V0 && b < V1) {
        return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
      } else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {
        return a + (b - T0);
      } else {
        let recomp = RECOMP.get(a);
        if (recomp) {
          recomp = recomp.get(b);
          if (recomp) {
            return recomp;
          }
        }
        return -1;
      }
    }
    function decomposed(cps) {
      if (!SHIFTED_RANK)
        init$1();
      let ret = [];
      let buf = [];
      let check_order = false;
      function add(cp) {
        let cc = SHIFTED_RANK.get(cp);
        if (cc) {
          check_order = true;
          cp |= cc;
        }
        ret.push(cp);
      }
      for (let cp of cps) {
        while (true) {
          if (cp < 128) {
            ret.push(cp);
          } else if (is_hangul(cp)) {
            let s_index = cp - S0;
            let l_index = s_index / N_COUNT | 0;
            let v_index = s_index % N_COUNT / T_COUNT | 0;
            let t_index = s_index % T_COUNT;
            add(L0 + l_index);
            add(V0 + v_index);
            if (t_index > 0)
              add(T0 + t_index);
          } else {
            let mapped = DECOMP.get(cp);
            if (mapped) {
              buf.push(...mapped);
            } else {
              add(cp);
            }
          }
          if (!buf.length)
            break;
          cp = buf.pop();
        }
      }
      if (check_order && ret.length > 1) {
        let prev_cc = unpack_cc(ret[0]);
        for (let i = 1; i < ret.length; i++) {
          let cc = unpack_cc(ret[i]);
          if (cc == 0 || prev_cc <= cc) {
            prev_cc = cc;
            continue;
          }
          let j2 = i - 1;
          while (true) {
            let tmp = ret[j2 + 1];
            ret[j2 + 1] = ret[j2];
            ret[j2] = tmp;
            if (!j2)
              break;
            prev_cc = unpack_cc(ret[--j2]);
            if (prev_cc <= cc)
              break;
          }
          prev_cc = unpack_cc(ret[i]);
        }
      }
      return ret;
    }
    function composed_from_decomposed(v) {
      let ret = [];
      let stack = [];
      let prev_cp = -1;
      let prev_cc = 0;
      for (let packed of v) {
        let cc = unpack_cc(packed);
        let cp = unpack_cp(packed);
        if (prev_cp == -1) {
          if (cc == 0) {
            prev_cp = cp;
          } else {
            ret.push(cp);
          }
        } else if (prev_cc > 0 && prev_cc >= cc) {
          if (cc == 0) {
            ret.push(prev_cp, ...stack);
            stack.length = 0;
            prev_cp = cp;
          } else {
            stack.push(cp);
          }
          prev_cc = cc;
        } else {
          let composed = compose_pair(prev_cp, cp);
          if (composed >= 0) {
            prev_cp = composed;
          } else if (prev_cc == 0 && cc == 0) {
            ret.push(prev_cp);
            prev_cp = cp;
          } else {
            stack.push(cp);
            prev_cc = cc;
          }
        }
      }
      if (prev_cp >= 0) {
        ret.push(prev_cp, ...stack);
      }
      return ret;
    }
    function nfd(cps) {
      return decomposed(cps).map(unpack_cp);
    }
    function nfc(cps) {
      return composed_from_decomposed(decomposed(cps));
    }
    var HYPHEN = 45;
    var STOP = 46;
    var STOP_CH = ".";
    var FE0F = 65039;
    var UNIQUE_PH = 1;
    var Array_from = (x2) => Array.from(x2);
    function group_has_cp(g, cp) {
      return g.P.has(cp) || g.Q.has(cp);
    }
    var Emoji = class extends Array {
      get is_emoji() {
        return true;
      }
      // free tagging system
    };
    var MAPPED;
    var IGNORED;
    var CM;
    var NSM;
    var ESCAPE;
    var NFC_CHECK;
    var GROUPS;
    var WHOLE_VALID;
    var WHOLE_MAP;
    var VALID;
    var EMOJI_LIST;
    var EMOJI_ROOT;
    function init() {
      if (MAPPED)
        return;
      let r = read_compressed_payload(COMPRESSED$1);
      const read_sorted_array = () => read_sorted(r);
      const read_sorted_set = () => new Set(read_sorted_array());
      const set_add_many = (set, v) => v.forEach((x2) => set.add(x2));
      MAPPED = new Map(read_mapped(r));
      IGNORED = read_sorted_set();
      CM = read_sorted_array();
      NSM = new Set(read_sorted_array().map((i) => CM[i]));
      CM = new Set(CM);
      ESCAPE = read_sorted_set();
      NFC_CHECK = read_sorted_set();
      let chunks = read_sorted_arrays(r);
      let unrestricted = r();
      const read_chunked = () => {
        let set = /* @__PURE__ */ new Set();
        read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
        set_add_many(set, read_sorted_array());
        return set;
      };
      GROUPS = read_array_while((i) => {
        let N = read_array_while(r).map((x2) => x2 + 96);
        if (N.length) {
          let R2 = i >= unrestricted;
          N[0] -= 32;
          N = str_from_cps(N);
          if (R2)
            N = `Restricted[${N}]`;
          let P2 = read_chunked();
          let Q2 = read_chunked();
          let M = !r();
          return { N, P: P2, Q: Q2, M, R: R2 };
        }
      });
      WHOLE_VALID = read_sorted_set();
      WHOLE_MAP = /* @__PURE__ */ new Map();
      let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a - b);
      wholes.forEach((cp, i) => {
        let d = r();
        let w = wholes[i] = d ? wholes[i - d] : { V: [], M: /* @__PURE__ */ new Map() };
        w.V.push(cp);
        if (!WHOLE_VALID.has(cp)) {
          WHOLE_MAP.set(cp, w);
        }
      });
      for (let { V: V2, M } of new Set(WHOLE_MAP.values())) {
        let recs = [];
        for (let cp of V2) {
          let gs = GROUPS.filter((g) => group_has_cp(g, cp));
          let rec = recs.find(({ G: G2 }) => gs.some((g) => G2.has(g)));
          if (!rec) {
            rec = { G: /* @__PURE__ */ new Set(), V: [] };
            recs.push(rec);
          }
          rec.V.push(cp);
          set_add_many(rec.G, gs);
        }
        let union = recs.flatMap((x2) => Array_from(x2.G));
        for (let { G: G2, V: V3 } of recs) {
          let complement = new Set(union.filter((g) => !G2.has(g)));
          for (let cp of V3) {
            M.set(cp, complement);
          }
        }
      }
      VALID = /* @__PURE__ */ new Set();
      let multi = /* @__PURE__ */ new Set();
      const add_to_union = (cp) => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
      for (let g of GROUPS) {
        for (let cp of g.P)
          add_to_union(cp);
        for (let cp of g.Q)
          add_to_union(cp);
      }
      for (let cp of VALID) {
        if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
          WHOLE_MAP.set(cp, UNIQUE_PH);
        }
      }
      set_add_many(VALID, nfd(VALID));
      EMOJI_LIST = read_trie(r).map((v) => Emoji.from(v)).sort(compare_arrays);
      EMOJI_ROOT = /* @__PURE__ */ new Map();
      for (let cps of EMOJI_LIST) {
        let prev = [EMOJI_ROOT];
        for (let cp of cps) {
          let next = prev.map((node) => {
            let child = node.get(cp);
            if (!child) {
              child = /* @__PURE__ */ new Map();
              node.set(cp, child);
            }
            return child;
          });
          if (cp === FE0F) {
            prev.push(...next);
          } else {
            prev = next;
          }
        }
        for (let x2 of prev) {
          x2.V = cps;
        }
      }
    }
    function quoted_cp(cp) {
      return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
    }
    function bidi_qq(s) {
      return `"${s}"‎`;
    }
    function check_label_extension(cps) {
      if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
        throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
      }
    }
    function check_leading_underscore(cps) {
      const UNDERSCORE = 95;
      for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
        if (cps[--i] !== UNDERSCORE) {
          throw new Error("underscore allowed only at start");
        }
      }
    }
    function check_fenced(cps) {
      let cp = cps[0];
      let prev = FENCED.get(cp);
      if (prev)
        throw error_placement(`leading ${prev}`);
      let n = cps.length;
      let last = -1;
      for (let i = 1; i < n; i++) {
        cp = cps[i];
        let match = FENCED.get(cp);
        if (match) {
          if (last == i)
            throw error_placement(`${prev} + ${match}`);
          last = i + 1;
          prev = match;
        }
      }
      if (last == n)
        throw error_placement(`trailing ${prev}`);
    }
    function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
      let buf = [];
      if (is_combining_mark(cps[0]))
        buf.push("◌");
      if (cps.length > max) {
        max >>= 1;
        cps = [...cps.slice(0, max), 8230, ...cps.slice(-max)];
      }
      let prev = 0;
      let n = cps.length;
      for (let i = 0; i < n; i++) {
        let cp = cps[i];
        if (should_escape(cp)) {
          buf.push(str_from_cps(cps.slice(prev, i)));
          buf.push(quoter(cp));
          prev = i + 1;
        }
      }
      buf.push(str_from_cps(cps.slice(prev, n)));
      return buf.join("");
    }
    function is_combining_mark(cp) {
      init();
      return CM.has(cp);
    }
    function should_escape(cp) {
      init();
      return ESCAPE.has(cp);
    }
    function ens_emoji() {
      init();
      return EMOJI_LIST.map((x2) => x2.slice());
    }
    function ens_normalize_fragment(frag, decompose) {
      init();
      let nf = decompose ? nfd : nfc;
      return frag.split(STOP_CH).map((label) => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);
    }
    function ens_normalize(name) {
      return flatten(split(name, nfc, filter_fe0f));
    }
    function ens_beautify(name) {
      let labels = split(name, nfc, (x2) => x2);
      for (let { type, output, error } of labels) {
        if (error)
          break;
        if (type !== "Greek")
          array_replace(output, 958, 926);
      }
      return flatten(labels);
    }
    function array_replace(v, a, b) {
      let prev = 0;
      while (true) {
        let next = v.indexOf(a, prev);
        if (next < 0)
          break;
        v[next] = b;
        prev = next + 1;
      }
    }
    function ens_split(name, preserve_emoji) {
      return split(name, nfc, preserve_emoji ? (x2) => x2.slice() : filter_fe0f);
    }
    function split(name, nf, ef) {
      if (!name)
        return [];
      init();
      let offset = 0;
      return name.split(STOP_CH).map((label) => {
        let input = explode_cp(label);
        let info = {
          input,
          offset
          // codepoint, not substring!
        };
        offset += input.length + 1;
        try {
          let tokens = info.tokens = tokens_from_str(input, nf, ef);
          let token_count = tokens.length;
          let type;
          if (!token_count) {
            throw new Error(`empty label`);
          }
          let norm = info.output = tokens.flat();
          check_leading_underscore(norm);
          let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
          if (!emoji && norm.every((cp) => cp < 128)) {
            check_label_extension(norm);
            type = "ASCII";
          } else {
            let chars = tokens.flatMap((x2) => x2.is_emoji ? [] : x2);
            if (!chars.length) {
              type = "Emoji";
            } else {
              if (CM.has(norm[0]))
                throw error_placement("leading combining mark");
              for (let i = 1; i < token_count; i++) {
                let cps = tokens[i];
                if (!cps.is_emoji && CM.has(cps[0])) {
                  throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
                }
              }
              check_fenced(norm);
              let unique = Array_from(new Set(chars));
              let [g] = determine_group(unique);
              check_group(g, chars);
              check_whole(g, unique);
              type = g.N;
            }
          }
          info.type = type;
        } catch (err2) {
          info.error = err2;
        }
        return info;
      });
    }
    function check_whole(group, unique) {
      let maker;
      let shared = [];
      for (let cp of unique) {
        let whole = WHOLE_MAP.get(cp);
        if (whole === UNIQUE_PH)
          return;
        if (whole) {
          let set = whole.M.get(cp);
          maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);
          if (!maker.length)
            return;
        } else {
          shared.push(cp);
        }
      }
      if (maker) {
        for (let g of maker) {
          if (shared.every((cp) => group_has_cp(g, cp))) {
            throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
          }
        }
      }
    }
    function determine_group(unique) {
      let groups = GROUPS;
      for (let cp of unique) {
        let gs = groups.filter((g) => group_has_cp(g, cp));
        if (!gs.length) {
          if (!GROUPS.some((g) => group_has_cp(g, cp))) {
            throw error_disallowed(cp);
          } else {
            throw error_group_member(groups[0], cp);
          }
        }
        groups = gs;
        if (gs.length == 1)
          break;
      }
      return groups;
    }
    function flatten(split2) {
      return split2.map(({ input, error, output }) => {
        if (error) {
          let msg = error.message;
          throw new Error(split2.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
        }
        return str_from_cps(output);
      }).join(STOP_CH);
    }
    function error_disallowed(cp) {
      return new Error(`disallowed character: ${quoted_cp(cp)}`);
    }
    function error_group_member(g, cp) {
      let quoted = quoted_cp(cp);
      let gg = GROUPS.find((g2) => g2.P.has(cp));
      if (gg) {
        quoted = `${gg.N} ${quoted}`;
      }
      return new Error(`illegal mixture: ${g.N} + ${quoted}`);
    }
    function error_placement(where) {
      return new Error(`illegal placement: ${where}`);
    }
    function check_group(g, cps) {
      for (let cp of cps) {
        if (!group_has_cp(g, cp)) {
          throw error_group_member(g, cp);
        }
      }
      if (g.M) {
        let decomposed2 = nfd(cps);
        for (let i = 1, e = decomposed2.length; i < e; i++) {
          if (NSM.has(decomposed2[i])) {
            let j2 = i + 1;
            for (let cp; j2 < e && NSM.has(cp = decomposed2[j2]); j2++) {
              for (let k = i; k < j2; k++) {
                if (decomposed2[k] == cp) {
                  throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
                }
              }
            }
            if (j2 - i > NSM_MAX) {
              throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j2)))} (${j2 - i}/${NSM_MAX})`);
            }
            i = j2;
          }
        }
      }
    }
    function tokens_from_str(input, nf, ef) {
      let ret = [];
      let chars = [];
      input = input.slice().reverse();
      while (input.length) {
        let emoji = consume_emoji_reversed(input);
        if (emoji) {
          if (chars.length) {
            ret.push(nf(chars));
            chars = [];
          }
          ret.push(ef(emoji));
        } else {
          let cp = input.pop();
          if (VALID.has(cp)) {
            chars.push(cp);
          } else {
            let cps = MAPPED.get(cp);
            if (cps) {
              chars.push(...cps);
            } else if (!IGNORED.has(cp)) {
              throw error_disallowed(cp);
            }
          }
        }
      }
      if (chars.length) {
        ret.push(nf(chars));
      }
      return ret;
    }
    function filter_fe0f(cps) {
      return cps.filter((cp) => cp != FE0F);
    }
    function consume_emoji_reversed(cps, eaten) {
      let node = EMOJI_ROOT;
      let emoji;
      let pos = cps.length;
      while (pos) {
        node = node.get(cps[--pos]);
        if (!node)
          break;
        let { V: V2 } = node;
        if (V2) {
          emoji = V2;
          if (eaten)
            eaten.push(...cps.slice(pos).reverse());
          cps.length = pos;
        }
      }
      return emoji;
    }
    var TY_VALID = "valid";
    var TY_MAPPED = "mapped";
    var TY_IGNORED = "ignored";
    var TY_DISALLOWED = "disallowed";
    var TY_EMOJI = "emoji";
    var TY_NFC = "nfc";
    var TY_STOP = "stop";
    function ens_tokenize(name, {
      nf = true
      // collapse unnormalized runs into a single token
    } = {}) {
      init();
      let input = explode_cp(name).reverse();
      let eaten = [];
      let tokens = [];
      while (input.length) {
        let emoji = consume_emoji_reversed(input, eaten);
        if (emoji) {
          tokens.push({
            type: TY_EMOJI,
            emoji: emoji.slice(),
            // copy emoji
            input: eaten,
            cps: filter_fe0f(emoji)
          });
          eaten = [];
        } else {
          let cp = input.pop();
          if (cp == STOP) {
            tokens.push({ type: TY_STOP, cp });
          } else if (VALID.has(cp)) {
            tokens.push({ type: TY_VALID, cps: [cp] });
          } else if (IGNORED.has(cp)) {
            tokens.push({ type: TY_IGNORED, cp });
          } else {
            let cps = MAPPED.get(cp);
            if (cps) {
              tokens.push({ type: TY_MAPPED, cp, cps: cps.slice() });
            } else {
              tokens.push({ type: TY_DISALLOWED, cp });
            }
          }
        }
      }
      if (nf) {
        for (let i = 0, start = -1; i < tokens.length; i++) {
          let token = tokens[i];
          if (is_valid_or_mapped(token.type)) {
            if (requires_check(token.cps)) {
              let end = i + 1;
              for (let pos = end; pos < tokens.length; pos++) {
                let { type, cps: cps2 } = tokens[pos];
                if (is_valid_or_mapped(type)) {
                  if (!requires_check(cps2))
                    break;
                  end = pos + 1;
                } else if (type !== TY_IGNORED) {
                  break;
                }
              }
              if (start < 0)
                start = i;
              let slice = tokens.slice(start, end);
              let cps0 = slice.flatMap((x2) => is_valid_or_mapped(x2.type) ? x2.cps : []);
              let cps = nfc(cps0);
              if (compare_arrays(cps, cps0)) {
                tokens.splice(start, end - start, {
                  type: TY_NFC,
                  input: cps0,
                  // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps
                  cps,
                  tokens0: collapse_valid_tokens(slice),
                  tokens: ens_tokenize(str_from_cps(cps), { nf: false })
                });
                i = start;
              } else {
                i = end - 1;
              }
              start = -1;
            } else {
              start = i;
            }
          } else if (token.type !== TY_IGNORED) {
            start = -1;
          }
        }
      }
      return collapse_valid_tokens(tokens);
    }
    function is_valid_or_mapped(type) {
      return type == TY_VALID || type == TY_MAPPED;
    }
    function requires_check(cps) {
      return cps.some((cp) => NFC_CHECK.has(cp));
    }
    function collapse_valid_tokens(tokens) {
      for (let i = 0; i < tokens.length; i++) {
        if (tokens[i].type == TY_VALID) {
          let j2 = i + 1;
          while (j2 < tokens.length && tokens[j2].type == TY_VALID)
            j2++;
          tokens.splice(i, j2 - i, { type: TY_VALID, cps: tokens.slice(i, j2).flatMap((x2) => x2.cps) });
        }
      }
      return tokens;
    }
    exports.ens_beautify = ens_beautify;
    exports.ens_emoji = ens_emoji;
    exports.ens_normalize = ens_normalize;
    exports.ens_normalize_fragment = ens_normalize_fragment;
    exports.ens_split = ens_split;
    exports.ens_tokenize = ens_tokenize;
    exports.is_combining_mark = is_combining_mark;
    exports.nfc = nfc;
    exports.nfd = nfd;
    exports.safe_str_from_cps = safe_str_from_cps;
    exports.should_escape = should_escape;
  }
});

// node_modules/ethers/lib.commonjs/hash/namehash.js
var require_namehash = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/namehash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils3();
    var ens_normalize_1 = require_dist();
    var Zeros = new Uint8Array(32);
    Zeros.fill(0);
    function checkComponent(comp) {
      (0, index_js_2.assertArgument)(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
      return comp;
    }
    function ensNameSplit(name) {
      const bytes = (0, index_js_2.toUtf8Bytes)(ensNormalize(name));
      const comps = [];
      if (name.length === 0) {
        return comps;
      }
      let last = 0;
      for (let i = 0; i < bytes.length; i++) {
        const d = bytes[i];
        if (d === 46) {
          comps.push(checkComponent(bytes.slice(last, i)));
          last = i + 1;
        }
      }
      (0, index_js_2.assertArgument)(last < bytes.length, "invalid ENS name; empty component", "name", name);
      comps.push(checkComponent(bytes.slice(last)));
      return comps;
    }
    function ensNormalize(name) {
      try {
        if (name.length === 0) {
          throw new Error("empty label");
        }
        return (0, ens_normalize_1.ens_normalize)(name);
      } catch (error) {
        (0, index_js_2.assertArgument)(false, `invalid ENS name (${error.message})`, "name", name);
      }
    }
    exports.ensNormalize = ensNormalize;
    function isValidName(name) {
      try {
        return ensNameSplit(name).length !== 0;
      } catch (error) {
      }
      return false;
    }
    exports.isValidName = isValidName;
    function namehash(name) {
      (0, index_js_2.assertArgument)(typeof name === "string", "invalid ENS name; not a string", "name", name);
      (0, index_js_2.assertArgument)(name.length, `invalid ENS name (empty label)`, "name", name);
      let result = Zeros;
      const comps = ensNameSplit(name);
      while (comps.length) {
        result = (0, index_js_1.keccak256)((0, index_js_2.concat)([result, (0, index_js_1.keccak256)(comps.pop())]));
      }
      return (0, index_js_2.hexlify)(result);
    }
    exports.namehash = namehash;
    function dnsEncode(name, _maxLength) {
      const length = _maxLength != null ? _maxLength : 63;
      (0, index_js_2.assertArgument)(length <= 255, "DNS encoded label cannot exceed 255", "length", length);
      return (0, index_js_2.hexlify)((0, index_js_2.concat)(ensNameSplit(name).map((comp) => {
        (0, index_js_2.assertArgument)(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, "name", name);
        const bytes = new Uint8Array(comp.length + 1);
        bytes.set(comp, 1);
        bytes[0] = bytes.length - 1;
        return bytes;
      }))) + "00";
    }
    exports.dnsEncode = dnsEncode;
  }
});

// node_modules/ethers/lib.commonjs/transaction/accesslist.js
var require_accesslist = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/accesslist.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accessListify = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_utils3();
    function accessSetify(addr, storageKeys) {
      return {
        address: (0, index_js_1.getAddress)(addr),
        storageKeys: storageKeys.map((storageKey, index) => {
          (0, index_js_2.assertArgument)((0, index_js_2.isHexString)(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
          return storageKey.toLowerCase();
        })
      };
    }
    function accessListify(value) {
      if (Array.isArray(value)) {
        return value.map((set, index) => {
          if (Array.isArray(set)) {
            (0, index_js_2.assertArgument)(set.length === 2, "invalid slot set", `value[${index}]`, set);
            return accessSetify(set[0], set[1]);
          }
          (0, index_js_2.assertArgument)(set != null && typeof set === "object", "invalid address-slot set", "value", value);
          return accessSetify(set.address, set.storageKeys);
        });
      }
      (0, index_js_2.assertArgument)(value != null && typeof value === "object", "invalid access list", "value", value);
      const result = Object.keys(value).map((addr) => {
        const storageKeys = value[addr].reduce((accum, storageKey) => {
          accum[storageKey] = true;
          return accum;
        }, {});
        return accessSetify(addr, Object.keys(storageKeys).sort());
      });
      result.sort((a, b) => a.address.localeCompare(b.address));
      return result;
    }
    exports.accessListify = accessListify;
  }
});

// node_modules/ethers/lib.commonjs/transaction/address.js
var require_address4 = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.recoverAddress = exports.computeAddress = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    function computeAddress(key) {
      let pubkey;
      if (typeof key === "string") {
        pubkey = index_js_2.SigningKey.computePublicKey(key, false);
      } else {
        pubkey = key.publicKey;
      }
      return (0, index_js_1.getAddress)((0, index_js_2.keccak256)("0x" + pubkey.substring(4)).substring(26));
    }
    exports.computeAddress = computeAddress;
    function recoverAddress(digest, signature) {
      return computeAddress(index_js_2.SigningKey.recoverPublicKey(digest, signature));
    }
    exports.recoverAddress = recoverAddress;
  }
});

// node_modules/ethers/lib.commonjs/transaction/transaction.js
var require_transaction = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Transaction = void 0;
    var index_js_1 = require_address2();
    var addresses_js_1 = require_addresses();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_utils3();
    var accesslist_js_1 = require_accesslist();
    var address_js_1 = require_address4();
    var BN_0 = BigInt(0);
    var BN_2 = BigInt(2);
    var BN_27 = BigInt(27);
    var BN_28 = BigInt(28);
    var BN_35 = BigInt(35);
    var BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    var BLOB_SIZE = 4096 * 32;
    function getVersionedHash(version, hash) {
      let versioned = version.toString(16);
      while (versioned.length < 2) {
        versioned = "0" + versioned;
      }
      versioned += (0, index_js_2.sha256)(hash).substring(4);
      return "0x" + versioned;
    }
    function handleAddress(value) {
      if (value === "0x") {
        return null;
      }
      return (0, index_js_1.getAddress)(value);
    }
    function handleAccessList(value, param) {
      try {
        return (0, accesslist_js_1.accessListify)(value);
      } catch (error) {
        (0, index_js_3.assertArgument)(false, error.message, param, value);
      }
    }
    function handleNumber(_value2, param) {
      if (_value2 === "0x") {
        return 0;
      }
      return (0, index_js_3.getNumber)(_value2, param);
    }
    function handleUint(_value2, param) {
      if (_value2 === "0x") {
        return BN_0;
      }
      const value = (0, index_js_3.getBigInt)(_value2, param);
      (0, index_js_3.assertArgument)(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
      return value;
    }
    function formatNumber(_value2, name) {
      const value = (0, index_js_3.getBigInt)(_value2, "value");
      const result = (0, index_js_3.toBeArray)(value);
      (0, index_js_3.assertArgument)(result.length <= 32, `value too large`, `tx.${name}`, value);
      return result;
    }
    function formatAccessList(value) {
      return (0, accesslist_js_1.accessListify)(value).map((set) => [set.address, set.storageKeys]);
    }
    function formatHashes(value, param) {
      (0, index_js_3.assertArgument)(Array.isArray(value), `invalid ${param}`, "value", value);
      for (let i = 0; i < value.length; i++) {
        (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid ${ param } hash", `value[${i}]`, value[i]);
      }
      return value;
    }
    function _parseLegacy(data) {
      const fields = (0, index_js_3.decodeRlp)(data);
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
      const tx = {
        type: 0,
        nonce: handleNumber(fields[0], "nonce"),
        gasPrice: handleUint(fields[1], "gasPrice"),
        gasLimit: handleUint(fields[2], "gasLimit"),
        to: handleAddress(fields[3]),
        value: handleUint(fields[4], "value"),
        data: (0, index_js_3.hexlify)(fields[5]),
        chainId: BN_0
      };
      if (fields.length === 6) {
        return tx;
      }
      const v = handleUint(fields[6], "v");
      const r = handleUint(fields[7], "r");
      const s = handleUint(fields[8], "s");
      if (r === BN_0 && s === BN_0) {
        tx.chainId = v;
      } else {
        let chainId = (v - BN_35) / BN_2;
        if (chainId < BN_0) {
          chainId = BN_0;
        }
        tx.chainId = chainId;
        (0, index_js_3.assertArgument)(chainId !== BN_0 || (v === BN_27 || v === BN_28), "non-canonical legacy v", "v", fields[6]);
        tx.signature = index_js_2.Signature.from({
          r: (0, index_js_3.zeroPadValue)(fields[7], 32),
          s: (0, index_js_3.zeroPadValue)(fields[8], 32),
          v
        });
      }
      return tx;
    }
    function _serializeLegacy(tx, sig) {
      const fields = [
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.gasPrice || 0, "gasPrice"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data
      ];
      let chainId = BN_0;
      if (tx.chainId != BN_0) {
        chainId = (0, index_js_3.getBigInt)(tx.chainId, "tx.chainId");
        (0, index_js_3.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
      } else if (tx.signature) {
        const legacy = tx.signature.legacyChainId;
        if (legacy != null) {
          chainId = legacy;
        }
      }
      if (!sig) {
        if (chainId !== BN_0) {
          fields.push((0, index_js_3.toBeArray)(chainId));
          fields.push("0x");
          fields.push("0x");
        }
        return (0, index_js_3.encodeRlp)(fields);
      }
      let v = BigInt(27 + sig.yParity);
      if (chainId !== BN_0) {
        v = index_js_2.Signature.getChainIdV(chainId, sig.v);
      } else if (BigInt(sig.v) !== v) {
        (0, index_js_3.assertArgument)(false, "tx.chainId/sig.v mismatch", "sig", sig);
      }
      fields.push((0, index_js_3.toBeArray)(v));
      fields.push((0, index_js_3.toBeArray)(sig.r));
      fields.push((0, index_js_3.toBeArray)(sig.s));
      return (0, index_js_3.encodeRlp)(fields);
    }
    function _parseEipSignature(tx, fields) {
      let yParity;
      try {
        yParity = handleNumber(fields[0], "yParity");
        if (yParity !== 0 && yParity !== 1) {
          throw new Error("bad yParity");
        }
      } catch (error) {
        (0, index_js_3.assertArgument)(false, "invalid yParity", "yParity", fields[0]);
      }
      const r = (0, index_js_3.zeroPadValue)(fields[1], 32);
      const s = (0, index_js_3.zeroPadValue)(fields[2], 32);
      const signature = index_js_2.Signature.from({ r, s, yParity });
      tx.signature = signature;
    }
    function _parseEip1559(data) {
      const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 2,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
        maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
        gasPrice: null,
        gasLimit: handleUint(fields[4], "gasLimit"),
        to: handleAddress(fields[5]),
        value: handleUint(fields[6], "value"),
        data: (0, index_js_3.hexlify)(fields[7]),
        accessList: handleAccessList(fields[8], "accessList")
      };
      if (fields.length === 9) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(9));
      return tx;
    }
    function _serializeEip1559(tx, sig) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || [])
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "yParity"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
      }
      return (0, index_js_3.concat)(["0x02", (0, index_js_3.encodeRlp)(fields)]);
    }
    function _parseEip2930(data) {
      const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 1,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        gasPrice: handleUint(fields[2], "gasPrice"),
        gasLimit: handleUint(fields[3], "gasLimit"),
        to: handleAddress(fields[4]),
        value: handleUint(fields[5], "value"),
        data: (0, index_js_3.hexlify)(fields[6]),
        accessList: handleAccessList(fields[7], "accessList")
      };
      if (fields.length === 8) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(8));
      return tx;
    }
    function _serializeEip2930(tx, sig) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.gasPrice || 0, "gasPrice"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || [])
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "recoveryParam"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
      }
      return (0, index_js_3.concat)(["0x01", (0, index_js_3.encodeRlp)(fields)]);
    }
    function _parseEip4844(data) {
      let fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      let typeName = "3";
      let blobs = null;
      if (fields.length === 4 && Array.isArray(fields[0])) {
        typeName = "3 (network format)";
        const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];
        (0, index_js_3.assertArgument)(Array.isArray(fBlobs), "invalid network format: blobs not an array", "fields[1]", fBlobs);
        (0, index_js_3.assertArgument)(Array.isArray(fCommits), "invalid network format: commitments not an array", "fields[2]", fCommits);
        (0, index_js_3.assertArgument)(Array.isArray(fProofs), "invalid network format: proofs not an array", "fields[3]", fProofs);
        (0, index_js_3.assertArgument)(fBlobs.length === fCommits.length, "invalid network format: blobs/commitments length mismatch", "fields", fields);
        (0, index_js_3.assertArgument)(fBlobs.length === fProofs.length, "invalid network format: blobs/proofs length mismatch", "fields", fields);
        blobs = [];
        for (let i = 0; i < fields[1].length; i++) {
          blobs.push({
            data: fBlobs[i],
            commitment: fCommits[i],
            proof: fProofs[i]
          });
        }
        fields = fields[0];
      }
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 3,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
        maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
        gasPrice: null,
        gasLimit: handleUint(fields[4], "gasLimit"),
        to: handleAddress(fields[5]),
        value: handleUint(fields[6], "value"),
        data: (0, index_js_3.hexlify)(fields[7]),
        accessList: handleAccessList(fields[8], "accessList"),
        maxFeePerBlobGas: handleUint(fields[9], "maxFeePerBlobGas"),
        blobVersionedHashes: fields[10]
      };
      if (blobs) {
        tx.blobs = blobs;
      }
      (0, index_js_3.assertArgument)(tx.to != null, `invalid address for transaction type: ${typeName}`, "data", data);
      (0, index_js_3.assertArgument)(Array.isArray(tx.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", data);
      for (let i = 0; i < tx.blobVersionedHashes.length; i++) {
        (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, "data", data);
      }
      if (fields.length === 11) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(11));
      return tx;
    }
    function _serializeEip4844(tx, sig, blobs) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || addresses_js_1.ZeroAddress,
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || []),
        formatNumber(tx.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
        formatHashes(tx.blobVersionedHashes || [], "blobVersionedHashes")
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "yParity"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
        if (blobs) {
          return (0, index_js_3.concat)([
            "0x03",
            (0, index_js_3.encodeRlp)([
              fields,
              blobs.map((b) => b.data),
              blobs.map((b) => b.commitment),
              blobs.map((b) => b.proof)
            ])
          ]);
        }
      }
      return (0, index_js_3.concat)(["0x03", (0, index_js_3.encodeRlp)(fields)]);
    }
    var _type, _to, _data, _nonce, _gasLimit, _gasPrice, _maxPriorityFeePerGas, _maxFeePerGas, _value, _chainId, _sig, _accessList, _maxFeePerBlobGas, _blobVersionedHashes, _kzg, _blobs, _getSerialized, getSerialized_fn;
    var _Transaction = class _Transaction {
      /**
       *  Creates a new Transaction with default values.
       */
      constructor() {
        __privateAdd(this, _getSerialized);
        __privateAdd(this, _type, void 0);
        __privateAdd(this, _to, void 0);
        __privateAdd(this, _data, void 0);
        __privateAdd(this, _nonce, void 0);
        __privateAdd(this, _gasLimit, void 0);
        __privateAdd(this, _gasPrice, void 0);
        __privateAdd(this, _maxPriorityFeePerGas, void 0);
        __privateAdd(this, _maxFeePerGas, void 0);
        __privateAdd(this, _value, void 0);
        __privateAdd(this, _chainId, void 0);
        __privateAdd(this, _sig, void 0);
        __privateAdd(this, _accessList, void 0);
        __privateAdd(this, _maxFeePerBlobGas, void 0);
        __privateAdd(this, _blobVersionedHashes, void 0);
        __privateAdd(this, _kzg, void 0);
        __privateAdd(this, _blobs, void 0);
        __privateSet(this, _type, null);
        __privateSet(this, _to, null);
        __privateSet(this, _nonce, 0);
        __privateSet(this, _gasLimit, BN_0);
        __privateSet(this, _gasPrice, null);
        __privateSet(this, _maxPriorityFeePerGas, null);
        __privateSet(this, _maxFeePerGas, null);
        __privateSet(this, _data, "0x");
        __privateSet(this, _value, BN_0);
        __privateSet(this, _chainId, BN_0);
        __privateSet(this, _sig, null);
        __privateSet(this, _accessList, null);
        __privateSet(this, _maxFeePerBlobGas, null);
        __privateSet(this, _blobVersionedHashes, null);
        __privateSet(this, _blobs, null);
        __privateSet(this, _kzg, null);
      }
      /**
       *  The transaction type.
       *
       *  If null, the type will be automatically inferred based on
       *  explicit properties.
       */
      get type() {
        return __privateGet(this, _type);
      }
      set type(value) {
        switch (value) {
          case null:
            __privateSet(this, _type, null);
            break;
          case 0:
          case "legacy":
            __privateSet(this, _type, 0);
            break;
          case 1:
          case "berlin":
          case "eip-2930":
            __privateSet(this, _type, 1);
            break;
          case 2:
          case "london":
          case "eip-1559":
            __privateSet(this, _type, 2);
            break;
          case 3:
          case "cancun":
          case "eip-4844":
            __privateSet(this, _type, 3);
            break;
          default:
            (0, index_js_3.assertArgument)(false, "unsupported transaction type", "type", value);
        }
      }
      /**
       *  The name of the transaction type.
       */
      get typeName() {
        switch (this.type) {
          case 0:
            return "legacy";
          case 1:
            return "eip-2930";
          case 2:
            return "eip-1559";
          case 3:
            return "eip-4844";
        }
        return null;
      }
      /**
       *  The ``to`` address for the transaction or ``null`` if the
       *  transaction is an ``init`` transaction.
       */
      get to() {
        const value = __privateGet(this, _to);
        if (value == null && this.type === 3) {
          return addresses_js_1.ZeroAddress;
        }
        return value;
      }
      set to(value) {
        __privateSet(this, _to, value == null ? null : (0, index_js_1.getAddress)(value));
      }
      /**
       *  The transaction nonce.
       */
      get nonce() {
        return __privateGet(this, _nonce);
      }
      set nonce(value) {
        __privateSet(this, _nonce, (0, index_js_3.getNumber)(value, "value"));
      }
      /**
       *  The gas limit.
       */
      get gasLimit() {
        return __privateGet(this, _gasLimit);
      }
      set gasLimit(value) {
        __privateSet(this, _gasLimit, (0, index_js_3.getBigInt)(value));
      }
      /**
       *  The gas price.
       *
       *  On legacy networks this defines the fee that will be paid. On
       *  EIP-1559 networks, this should be ``null``.
       */
      get gasPrice() {
        const value = __privateGet(this, _gasPrice);
        if (value == null && (this.type === 0 || this.type === 1)) {
          return BN_0;
        }
        return value;
      }
      set gasPrice(value) {
        __privateSet(this, _gasPrice, value == null ? null : (0, index_js_3.getBigInt)(value, "gasPrice"));
      }
      /**
       *  The maximum priority fee per unit of gas to pay. On legacy
       *  networks this should be ``null``.
       */
      get maxPriorityFeePerGas() {
        const value = __privateGet(this, _maxPriorityFeePerGas);
        if (value == null) {
          if (this.type === 2 || this.type === 3) {
            return BN_0;
          }
          return null;
        }
        return value;
      }
      set maxPriorityFeePerGas(value) {
        __privateSet(this, _maxPriorityFeePerGas, value == null ? null : (0, index_js_3.getBigInt)(value, "maxPriorityFeePerGas"));
      }
      /**
       *  The maximum total fee per unit of gas to pay. On legacy
       *  networks this should be ``null``.
       */
      get maxFeePerGas() {
        const value = __privateGet(this, _maxFeePerGas);
        if (value == null) {
          if (this.type === 2 || this.type === 3) {
            return BN_0;
          }
          return null;
        }
        return value;
      }
      set maxFeePerGas(value) {
        __privateSet(this, _maxFeePerGas, value == null ? null : (0, index_js_3.getBigInt)(value, "maxFeePerGas"));
      }
      /**
       *  The transaction data. For ``init`` transactions this is the
       *  deployment code.
       */
      get data() {
        return __privateGet(this, _data);
      }
      set data(value) {
        __privateSet(this, _data, (0, index_js_3.hexlify)(value));
      }
      /**
       *  The amount of ether (in wei) to send in this transactions.
       */
      get value() {
        return __privateGet(this, _value);
      }
      set value(value) {
        __privateSet(this, _value, (0, index_js_3.getBigInt)(value, "value"));
      }
      /**
       *  The chain ID this transaction is valid on.
       */
      get chainId() {
        return __privateGet(this, _chainId);
      }
      set chainId(value) {
        __privateSet(this, _chainId, (0, index_js_3.getBigInt)(value));
      }
      /**
       *  If signed, the signature for this transaction.
       */
      get signature() {
        return __privateGet(this, _sig) || null;
      }
      set signature(value) {
        __privateSet(this, _sig, value == null ? null : index_js_2.Signature.from(value));
      }
      /**
       *  The access list.
       *
       *  An access list permits discounted (but pre-paid) access to
       *  bytecode and state variable access within contract execution.
       */
      get accessList() {
        const value = __privateGet(this, _accessList) || null;
        if (value == null) {
          if (this.type === 1 || this.type === 2 || this.type === 3) {
            return [];
          }
          return null;
        }
        return value;
      }
      set accessList(value) {
        __privateSet(this, _accessList, value == null ? null : (0, accesslist_js_1.accessListify)(value));
      }
      /**
       *  The max fee per blob gas for Cancun transactions.
       */
      get maxFeePerBlobGas() {
        const value = __privateGet(this, _maxFeePerBlobGas);
        if (value == null && this.type === 3) {
          return BN_0;
        }
        return value;
      }
      set maxFeePerBlobGas(value) {
        __privateSet(this, _maxFeePerBlobGas, value == null ? null : (0, index_js_3.getBigInt)(value, "maxFeePerBlobGas"));
      }
      /**
       *  The BLOb versioned hashes for Cancun transactions.
       */
      get blobVersionedHashes() {
        let value = __privateGet(this, _blobVersionedHashes);
        if (value == null && this.type === 3) {
          return [];
        }
        return value;
      }
      set blobVersionedHashes(value) {
        if (value != null) {
          (0, index_js_3.assertArgument)(Array.isArray(value), "blobVersionedHashes must be an Array", "value", value);
          value = value.slice();
          for (let i = 0; i < value.length; i++) {
            (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid blobVersionedHash", `value[${i}]`, value[i]);
          }
        }
        __privateSet(this, _blobVersionedHashes, value);
      }
      /**
       *  The BLObs for the Transaction, if any.
       *
       *  If ``blobs`` is non-``null``, then the [[seriailized]]
       *  will return the network formatted sidecar, otherwise it
       *  will return the standard [[link-eip-2718]] payload. The
       *  [[unsignedSerialized]] is unaffected regardless.
       *
       *  When setting ``blobs``, either fully valid [[Blob]] objects
       *  may be specified (i.e. correctly padded, with correct
       *  committments and proofs) or a raw [[BytesLike]] may
       *  be provided.
       *
       *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**
       *  be already set. The blob will be correctly padded and the
       *  [[KzgLibrary]] will be used to compute the committment and
       *  proof for the blob.
       *
       *  A BLOb is a sequence of field elements, each of which must
       *  be within the BLS field modulo, so some additional processing
       *  may be required to encode arbitrary data to ensure each 32 byte
       *  field is within the valid range.
       *
       *  Setting this automatically populates [[blobVersionedHashes]],
       *  overwriting any existing values. Setting this to ``null``
       *  does **not** remove the [[blobVersionedHashes]], leaving them
       *  present.
       */
      get blobs() {
        if (__privateGet(this, _blobs) == null) {
          return null;
        }
        return __privateGet(this, _blobs).map((b) => Object.assign({}, b));
      }
      set blobs(_blobs2) {
        if (_blobs2 == null) {
          __privateSet(this, _blobs, null);
          return;
        }
        const blobs = [];
        const versionedHashes = [];
        for (let i = 0; i < _blobs2.length; i++) {
          const blob = _blobs2[i];
          if ((0, index_js_3.isBytesLike)(blob)) {
            (0, index_js_3.assert)(__privateGet(this, _kzg), "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
              operation: "set blobs()"
            });
            let data = (0, index_js_3.getBytes)(blob);
            (0, index_js_3.assertArgument)(data.length <= BLOB_SIZE, "blob is too large", `blobs[${i}]`, blob);
            if (data.length !== BLOB_SIZE) {
              const padded = new Uint8Array(BLOB_SIZE);
              padded.set(data);
              data = padded;
            }
            const commit = __privateGet(this, _kzg).blobToKzgCommitment(data);
            const proof = (0, index_js_3.hexlify)(__privateGet(this, _kzg).computeBlobKzgProof(data, commit));
            blobs.push({
              data: (0, index_js_3.hexlify)(data),
              commitment: (0, index_js_3.hexlify)(commit),
              proof
            });
            versionedHashes.push(getVersionedHash(1, commit));
          } else {
            const commit = (0, index_js_3.hexlify)(blob.commitment);
            blobs.push({
              data: (0, index_js_3.hexlify)(blob.data),
              commitment: commit,
              proof: (0, index_js_3.hexlify)(blob.proof)
            });
            versionedHashes.push(getVersionedHash(1, commit));
          }
        }
        __privateSet(this, _blobs, blobs);
        __privateSet(this, _blobVersionedHashes, versionedHashes);
      }
      get kzg() {
        return __privateGet(this, _kzg);
      }
      set kzg(kzg) {
        __privateSet(this, _kzg, kzg);
      }
      /**
       *  The transaction hash, if signed. Otherwise, ``null``.
       */
      get hash() {
        if (this.signature == null) {
          return null;
        }
        return (0, index_js_2.keccak256)(__privateMethod(this, _getSerialized, getSerialized_fn).call(this, true, false));
      }
      /**
       *  The pre-image hash of this transaction.
       *
       *  This is the digest that a [[Signer]] must sign to authorize
       *  this transaction.
       */
      get unsignedHash() {
        return (0, index_js_2.keccak256)(this.unsignedSerialized);
      }
      /**
       *  The sending address, if signed. Otherwise, ``null``.
       */
      get from() {
        if (this.signature == null) {
          return null;
        }
        return (0, address_js_1.recoverAddress)(this.unsignedHash, this.signature);
      }
      /**
       *  The public key of the sender, if signed. Otherwise, ``null``.
       */
      get fromPublicKey() {
        if (this.signature == null) {
          return null;
        }
        return index_js_2.SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
      }
      /**
       *  Returns true if signed.
       *
       *  This provides a Type Guard that properties requiring a signed
       *  transaction are non-null.
       */
      isSigned() {
        return this.signature != null;
      }
      /**
       *  The serialized transaction.
       *
       *  This throws if the transaction is unsigned. For the pre-image,
       *  use [[unsignedSerialized]].
       */
      get serialized() {
        return __privateMethod(this, _getSerialized, getSerialized_fn).call(this, true, true);
      }
      /**
       *  The transaction pre-image.
       *
       *  The hash of this is the digest which needs to be signed to
       *  authorize this transaction.
       */
      get unsignedSerialized() {
        return __privateMethod(this, _getSerialized, getSerialized_fn).call(this, false, false);
      }
      /**
       *  Return the most "likely" type; currently the highest
       *  supported transaction type.
       */
      inferType() {
        const types = this.inferTypes();
        if (types.indexOf(2) >= 0) {
          return 2;
        }
        return types.pop();
      }
      /**
       *  Validates the explicit properties and returns a list of compatible
       *  transaction types.
       */
      inferTypes() {
        const hasGasPrice = this.gasPrice != null;
        const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;
        const hasAccessList = this.accessList != null;
        const hasBlob = __privateGet(this, _maxFeePerBlobGas) != null || __privateGet(this, _blobVersionedHashes);
        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
          (0, index_js_3.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
        }
        (0, index_js_3.assert)(!hasFee || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
        (0, index_js_3.assert)(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
        const types = [];
        if (this.type != null) {
          types.push(this.type);
        } else {
          if (hasFee) {
            types.push(2);
          } else if (hasGasPrice) {
            types.push(1);
            if (!hasAccessList) {
              types.push(0);
            }
          } else if (hasAccessList) {
            types.push(1);
            types.push(2);
          } else if (hasBlob && this.to) {
            types.push(3);
          } else {
            types.push(0);
            types.push(1);
            types.push(2);
            types.push(3);
          }
        }
        types.sort();
        return types;
      }
      /**
       *  Returns true if this transaction is a legacy transaction (i.e.
       *  ``type === 0``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isLegacy() {
        return this.type === 0;
      }
      /**
       *  Returns true if this transaction is berlin hardform transaction (i.e.
       *  ``type === 1``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isBerlin() {
        return this.type === 1;
      }
      /**
       *  Returns true if this transaction is london hardform transaction (i.e.
       *  ``type === 2``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isLondon() {
        return this.type === 2;
      }
      /**
       *  Returns true if this transaction is an [[link-eip-4844]] BLOB
       *  transaction.
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isCancun() {
        return this.type === 3;
      }
      /**
       *  Create a copy of this transaciton.
       */
      clone() {
        return _Transaction.from(this);
      }
      /**
       *  Return a JSON-friendly object.
       */
      toJSON() {
        const s = (v) => {
          if (v == null) {
            return null;
          }
          return v.toString();
        };
        return {
          type: this.type,
          to: this.to,
          //            from: this.from,
          data: this.data,
          nonce: this.nonce,
          gasLimit: s(this.gasLimit),
          gasPrice: s(this.gasPrice),
          maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
          maxFeePerGas: s(this.maxFeePerGas),
          value: s(this.value),
          chainId: s(this.chainId),
          sig: this.signature ? this.signature.toJSON() : null,
          accessList: this.accessList
        };
      }
      /**
       *  Create a **Transaction** from a serialized transaction or a
       *  Transaction-like object.
       */
      static from(tx) {
        if (tx == null) {
          return new _Transaction();
        }
        if (typeof tx === "string") {
          const payload = (0, index_js_3.getBytes)(tx);
          if (payload[0] >= 127) {
            return _Transaction.from(_parseLegacy(payload));
          }
          switch (payload[0]) {
            case 1:
              return _Transaction.from(_parseEip2930(payload));
            case 2:
              return _Transaction.from(_parseEip1559(payload));
            case 3:
              return _Transaction.from(_parseEip4844(payload));
          }
          (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
        }
        const result = new _Transaction();
        if (tx.type != null) {
          result.type = tx.type;
        }
        if (tx.to != null) {
          result.to = tx.to;
        }
        if (tx.nonce != null) {
          result.nonce = tx.nonce;
        }
        if (tx.gasLimit != null) {
          result.gasLimit = tx.gasLimit;
        }
        if (tx.gasPrice != null) {
          result.gasPrice = tx.gasPrice;
        }
        if (tx.maxPriorityFeePerGas != null) {
          result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
        }
        if (tx.maxFeePerGas != null) {
          result.maxFeePerGas = tx.maxFeePerGas;
        }
        if (tx.maxFeePerBlobGas != null) {
          result.maxFeePerBlobGas = tx.maxFeePerBlobGas;
        }
        if (tx.data != null) {
          result.data = tx.data;
        }
        if (tx.value != null) {
          result.value = tx.value;
        }
        if (tx.chainId != null) {
          result.chainId = tx.chainId;
        }
        if (tx.signature != null) {
          result.signature = index_js_2.Signature.from(tx.signature);
        }
        if (tx.accessList != null) {
          result.accessList = tx.accessList;
        }
        if (tx.blobVersionedHashes != null) {
          result.blobVersionedHashes = tx.blobVersionedHashes;
        }
        if (tx.kzg != null) {
          result.kzg = tx.kzg;
        }
        if (tx.blobs != null) {
          result.blobs = tx.blobs;
        }
        if (tx.hash != null) {
          (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define '.hash'", "tx", tx);
          (0, index_js_3.assertArgument)(result.hash === tx.hash, "hash mismatch", "tx", tx);
        }
        if (tx.from != null) {
          (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define '.from'", "tx", tx);
          (0, index_js_3.assertArgument)(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
        }
        return result;
      }
    };
    _type = new WeakMap();
    _to = new WeakMap();
    _data = new WeakMap();
    _nonce = new WeakMap();
    _gasLimit = new WeakMap();
    _gasPrice = new WeakMap();
    _maxPriorityFeePerGas = new WeakMap();
    _maxFeePerGas = new WeakMap();
    _value = new WeakMap();
    _chainId = new WeakMap();
    _sig = new WeakMap();
    _accessList = new WeakMap();
    _maxFeePerBlobGas = new WeakMap();
    _blobVersionedHashes = new WeakMap();
    _kzg = new WeakMap();
    _blobs = new WeakMap();
    _getSerialized = new WeakSet();
    getSerialized_fn = function(signed, sidecar) {
      (0, index_js_3.assert)(!signed || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
      const sig = signed ? this.signature : null;
      switch (this.inferType()) {
        case 0:
          return _serializeLegacy(this, sig);
        case 1:
          return _serializeEip2930(this, sig);
        case 2:
          return _serializeEip1559(this, sig);
        case 3:
          return _serializeEip4844(this, sig, sidecar ? this.blobs : null);
      }
      (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
    };
    var Transaction = _Transaction;
    exports.Transaction = Transaction;
  }
});

// node_modules/ethers/lib.commonjs/transaction/index.js
var require_transaction2 = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Transaction = exports.recoverAddress = exports.computeAddress = exports.accessListify = void 0;
    var accesslist_js_1 = require_accesslist();
    Object.defineProperty(exports, "accessListify", { enumerable: true, get: function() {
      return accesslist_js_1.accessListify;
    } });
    var address_js_1 = require_address4();
    Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function() {
      return address_js_1.computeAddress;
    } });
    Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function() {
      return address_js_1.recoverAddress;
    } });
    var transaction_js_1 = require_transaction();
    Object.defineProperty(exports, "Transaction", { enumerable: true, get: function() {
      return transaction_js_1.Transaction;
    } });
  }
});

// node_modules/ethers/lib.commonjs/hash/message.js
var require_message = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/message.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verifyMessage = exports.hashMessage = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_constants();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils3();
    function hashMessage(message) {
      if (typeof message === "string") {
        message = (0, index_js_4.toUtf8Bytes)(message);
      }
      return (0, index_js_1.keccak256)((0, index_js_4.concat)([
        (0, index_js_4.toUtf8Bytes)(index_js_2.MessagePrefix),
        (0, index_js_4.toUtf8Bytes)(String(message.length)),
        message
      ]));
    }
    exports.hashMessage = hashMessage;
    function verifyMessage(message, sig) {
      const digest = hashMessage(message);
      return (0, index_js_3.recoverAddress)(digest, sig);
    }
    exports.verifyMessage = verifyMessage;
  }
});

// node_modules/ethers/lib.commonjs/hash/solidity.js
var require_solidity = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/solidity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_utils3();
    var regexBytes = new RegExp("^bytes([0-9]+)$");
    var regexNumber = new RegExp("^(u?int)([0-9]*)$");
    var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    function _pack(type, value, isArray) {
      switch (type) {
        case "address":
          if (isArray) {
            return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
          }
          return (0, index_js_3.getBytes)((0, index_js_1.getAddress)(value));
        case "string":
          return (0, index_js_3.toUtf8Bytes)(value);
        case "bytes":
          return (0, index_js_3.getBytes)(value);
        case "bool":
          value = !!value ? "0x01" : "0x00";
          if (isArray) {
            return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
          }
          return (0, index_js_3.getBytes)(value);
      }
      let match = type.match(regexNumber);
      if (match) {
        let signed = match[1] === "int";
        let size = parseInt(match[2] || "256");
        (0, index_js_3.assertArgument)((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type);
        if (isArray) {
          size = 256;
        }
        if (signed) {
          value = (0, index_js_3.toTwos)(value, size);
        }
        return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)((0, index_js_3.toBeArray)(value), size / 8));
      }
      match = type.match(regexBytes);
      if (match) {
        const size = parseInt(match[1]);
        (0, index_js_3.assertArgument)(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type);
        (0, index_js_3.assertArgument)((0, index_js_3.dataLength)(value) === size, `invalid value for ${type}`, "value", value);
        if (isArray) {
          return (0, index_js_3.getBytes)((0, index_js_3.zeroPadBytes)(value, 32));
        }
        return value;
      }
      match = type.match(regexArray);
      if (match && Array.isArray(value)) {
        const baseType = match[1];
        const count = parseInt(match[2] || String(value.length));
        (0, index_js_3.assertArgument)(count === value.length, `invalid array length for ${type}`, "value", value);
        const result = [];
        value.forEach(function(value2) {
          result.push(_pack(baseType, value2, true));
        });
        return (0, index_js_3.getBytes)((0, index_js_3.concat)(result));
      }
      (0, index_js_3.assertArgument)(false, "invalid type", "type", type);
    }
    function solidityPacked(types, values) {
      (0, index_js_3.assertArgument)(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
      const tight = [];
      types.forEach(function(type, index) {
        tight.push(_pack(type, values[index]));
      });
      return (0, index_js_3.hexlify)((0, index_js_3.concat)(tight));
    }
    exports.solidityPacked = solidityPacked;
    function solidityPackedKeccak256(types, values) {
      return (0, index_js_2.keccak256)(solidityPacked(types, values));
    }
    exports.solidityPackedKeccak256 = solidityPackedKeccak256;
    function solidityPackedSha256(types, values) {
      return (0, index_js_2.sha256)(solidityPacked(types, values));
    }
    exports.solidityPackedSha256 = solidityPackedSha256;
  }
});

// node_modules/ethers/lib.commonjs/hash/typed-data.js
var require_typed_data = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/typed-data.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verifyTypedData = exports.TypedDataEncoder = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils3();
    var id_js_1 = require_id();
    var padding = new Uint8Array(32);
    padding.fill(0);
    var BN__1 = BigInt(-1);
    var BN_0 = BigInt(0);
    var BN_1 = BigInt(1);
    var BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
      const bytes = (0, index_js_4.getBytes)(value);
      const padOffset = bytes.length % 32;
      if (padOffset) {
        return (0, index_js_4.concat)([bytes, padding.slice(padOffset)]);
      }
      return (0, index_js_4.hexlify)(bytes);
    }
    var hexTrue = (0, index_js_4.toBeHex)(BN_1, 32);
    var hexFalse = (0, index_js_4.toBeHex)(BN_0, 32);
    var domainFieldTypes = {
      name: "string",
      version: "string",
      chainId: "uint256",
      verifyingContract: "address",
      salt: "bytes32"
    };
    var domainFieldNames = [
      "name",
      "version",
      "chainId",
      "verifyingContract",
      "salt"
    ];
    function checkString(key) {
      return function(value) {
        (0, index_js_4.assertArgument)(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
        return value;
      };
    }
    var domainChecks = {
      name: checkString("name"),
      version: checkString("version"),
      chainId: function(_value) {
        const value = (0, index_js_4.getBigInt)(_value, "domain.chainId");
        (0, index_js_4.assertArgument)(value >= 0, "invalid chain ID", "domain.chainId", _value);
        if (Number.isSafeInteger(value)) {
          return Number(value);
        }
        return (0, index_js_4.toQuantity)(value);
      },
      verifyingContract: function(value) {
        try {
          return (0, index_js_1.getAddress)(value).toLowerCase();
        } catch (error) {
        }
        (0, index_js_4.assertArgument)(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
      },
      salt: function(value) {
        const bytes = (0, index_js_4.getBytes)(value, "domain.salt");
        (0, index_js_4.assertArgument)(bytes.length === 32, `invalid domain value "salt"`, "domain.salt", value);
        return (0, index_js_4.hexlify)(bytes);
      }
    };
    function getBaseEncoder(type) {
      {
        const match = type.match(/^(u?)int(\d+)$/);
        if (match) {
          const signed = match[1] === "";
          const width = parseInt(match[2]);
          (0, index_js_4.assertArgument)(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type);
          const boundsUpper = (0, index_js_4.mask)(BN_MAX_UINT256, signed ? width - 1 : width);
          const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;
          return function(_value) {
            const value = (0, index_js_4.getBigInt)(_value, "value");
            (0, index_js_4.assertArgument)(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, "value", value);
            return (0, index_js_4.toBeHex)(signed ? (0, index_js_4.toTwos)(value, 256) : value, 32);
          };
        }
      }
      {
        const match = type.match(/^bytes(\d+)$/);
        if (match) {
          const width = parseInt(match[1]);
          (0, index_js_4.assertArgument)(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type);
          return function(value) {
            const bytes = (0, index_js_4.getBytes)(value);
            (0, index_js_4.assertArgument)(bytes.length === width, `invalid length for ${type}`, "value", value);
            return hexPadRight(value);
          };
        }
      }
      switch (type) {
        case "address":
          return function(value) {
            return (0, index_js_4.zeroPadValue)((0, index_js_1.getAddress)(value), 32);
          };
        case "bool":
          return function(value) {
            return !value ? hexFalse : hexTrue;
          };
        case "bytes":
          return function(value) {
            return (0, index_js_2.keccak256)(value);
          };
        case "string":
          return function(value) {
            return (0, id_js_1.id)(value);
          };
      }
      return null;
    }
    function encodeType(name, fields) {
      return `${name}(${fields.map(({ name: name2, type }) => type + " " + name2).join(",")})`;
    }
    function splitArray(type) {
      const match = type.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
      if (match) {
        return {
          base: match[1],
          index: match[2] + match[4],
          array: {
            base: match[1],
            prefix: match[1] + match[2],
            count: match[5] ? parseInt(match[5]) : -1
          }
        };
      }
      return { base: type };
    }
    var _types, _fullTypes, _encoderCache, _getEncoder, getEncoder_fn;
    var _TypedDataEncoder = class _TypedDataEncoder {
      /**
       *  Create a new **TypedDataEncoder** for %%types%%.
       *
       *  This performs all necessary checking that types are valid and
       *  do not violate the [[link-eip-712]] structural constraints as
       *  well as computes the [[primaryType]].
       */
      constructor(_types2) {
        __privateAdd(this, _getEncoder);
        /**
         *  The primary type for the structured [[types]].
         *
         *  This is derived automatically from the [[types]], since no
         *  recursion is possible, once the DAG for the types is consturcted
         *  internally, the primary type must be the only remaining type with
         *  no parent nodes.
         */
        __publicField(this, "primaryType");
        __privateAdd(this, _types, void 0);
        __privateAdd(this, _fullTypes, void 0);
        __privateAdd(this, _encoderCache, void 0);
        __privateSet(this, _fullTypes, /* @__PURE__ */ new Map());
        __privateSet(this, _encoderCache, /* @__PURE__ */ new Map());
        const links = /* @__PURE__ */ new Map();
        const parents = /* @__PURE__ */ new Map();
        const subtypes = /* @__PURE__ */ new Map();
        const types = {};
        Object.keys(_types2).forEach((type) => {
          types[type] = _types2[type].map(({ name, type: type2 }) => {
            let { base, index } = splitArray(type2);
            if (base === "int" && !_types2["int"]) {
              base = "int256";
            }
            if (base === "uint" && !_types2["uint"]) {
              base = "uint256";
            }
            return { name, type: base + (index || "") };
          });
          links.set(type, /* @__PURE__ */ new Set());
          parents.set(type, []);
          subtypes.set(type, /* @__PURE__ */ new Set());
        });
        __privateSet(this, _types, JSON.stringify(types));
        for (const name in types) {
          const uniqueNames = /* @__PURE__ */ new Set();
          for (const field of types[name]) {
            (0, index_js_4.assertArgument)(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types2);
            uniqueNames.add(field.name);
            const baseType = splitArray(field.type).base;
            (0, index_js_4.assertArgument)(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types2);
            const encoder = getBaseEncoder(baseType);
            if (encoder) {
              continue;
            }
            (0, index_js_4.assertArgument)(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types2);
            parents.get(baseType).push(name);
            links.get(name).add(baseType);
          }
        }
        const primaryTypes = Array.from(parents.keys()).filter((n) => parents.get(n).length === 0);
        (0, index_js_4.assertArgument)(primaryTypes.length !== 0, "missing primary type", "types", _types2);
        (0, index_js_4.assertArgument)(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", _types2);
        (0, index_js_4.defineProperties)(this, { primaryType: primaryTypes[0] });
        function checkCircular(type, found) {
          (0, index_js_4.assertArgument)(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, "types", _types2);
          found.add(type);
          for (const child of links.get(type)) {
            if (!parents.has(child)) {
              continue;
            }
            checkCircular(child, found);
            for (const subtype of found) {
              subtypes.get(subtype).add(child);
            }
          }
          found.delete(type);
        }
        checkCircular(this.primaryType, /* @__PURE__ */ new Set());
        for (const [name, set] of subtypes) {
          const st2 = Array.from(set);
          st2.sort();
          __privateGet(this, _fullTypes).set(name, encodeType(name, types[name]) + st2.map((t) => encodeType(t, types[t])).join(""));
        }
      }
      /**
       *  The types.
       */
      get types() {
        return JSON.parse(__privateGet(this, _types));
      }
      /**
       *  Returnthe encoder for the specific %%type%%.
       */
      getEncoder(type) {
        let encoder = __privateGet(this, _encoderCache).get(type);
        if (!encoder) {
          encoder = __privateMethod(this, _getEncoder, getEncoder_fn).call(this, type);
          __privateGet(this, _encoderCache).set(type, encoder);
        }
        return encoder;
      }
      /**
       *  Return the full type for %%name%%.
       */
      encodeType(name) {
        const result = __privateGet(this, _fullTypes).get(name);
        (0, index_js_4.assertArgument)(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
        return result;
      }
      /**
       *  Return the encoded %%value%% for the %%type%%.
       */
      encodeData(type, value) {
        return this.getEncoder(type)(value);
      }
      /**
       *  Returns the hash of %%value%% for the type of %%name%%.
       */
      hashStruct(name, value) {
        return (0, index_js_2.keccak256)(this.encodeData(name, value));
      }
      /**
       *  Return the fulled encoded %%value%% for the [[types]].
       */
      encode(value) {
        return this.encodeData(this.primaryType, value);
      }
      /**
       *  Return the hash of the fully encoded %%value%% for the [[types]].
       */
      hash(value) {
        return this.hashStruct(this.primaryType, value);
      }
      /**
       *  @_ignore:
       */
      _visit(type, value, callback) {
        {
          const encoder = getBaseEncoder(type);
          if (encoder) {
            return callback(type, value);
          }
        }
        const array = splitArray(type).array;
        if (array) {
          (0, index_js_4.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
          return value.map((v) => this._visit(array.prefix, v, callback));
        }
        const fields = this.types[type];
        if (fields) {
          return fields.reduce((accum, { name, type: type2 }) => {
            accum[name] = this._visit(type2, value[name], callback);
            return accum;
          }, {});
        }
        (0, index_js_4.assertArgument)(false, `unknown type: ${type}`, "type", type);
      }
      /**
       *  Call %%calback%% for each value in %%value%%, passing the type and
       *  component within %%value%%.
       *
       *  This is useful for replacing addresses or other transformation that
       *  may be desired on each component, based on its type.
       */
      visit(value, callback) {
        return this._visit(this.primaryType, value, callback);
      }
      /**
       *  Create a new **TypedDataEncoder** for %%types%%.
       */
      static from(types) {
        return new _TypedDataEncoder(types);
      }
      /**
       *  Return the primary type for %%types%%.
       */
      static getPrimaryType(types) {
        return _TypedDataEncoder.from(types).primaryType;
      }
      /**
       *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
       */
      static hashStruct(name, types, value) {
        return _TypedDataEncoder.from(types).hashStruct(name, value);
      }
      /**
       *  Return the domain hash for %%domain%%.
       */
      static hashDomain(domain) {
        const domainFields = [];
        for (const name in domain) {
          if (domain[name] == null) {
            continue;
          }
          const type = domainFieldTypes[name];
          (0, index_js_4.assertArgument)(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
          domainFields.push({ name, type });
        }
        domainFields.sort((a, b) => {
          return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
        });
        return _TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
      }
      /**
       *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
       */
      static encode(domain, types, value) {
        return (0, index_js_4.concat)([
          "0x1901",
          _TypedDataEncoder.hashDomain(domain),
          _TypedDataEncoder.from(types).hash(value)
        ]);
      }
      /**
       *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
       */
      static hash(domain, types, value) {
        return (0, index_js_2.keccak256)(_TypedDataEncoder.encode(domain, types, value));
      }
      // Replaces all address types with ENS names with their looked up address
      /**
       * Resolves to the value from resolving all addresses in %%value%% for
       * %%types%% and the %%domain%%.
       */
      static async resolveNames(domain, types, value, resolveName) {
        domain = Object.assign({}, domain);
        for (const key in domain) {
          if (domain[key] == null) {
            delete domain[key];
          }
        }
        const ensCache = {};
        if (domain.verifyingContract && !(0, index_js_4.isHexString)(domain.verifyingContract, 20)) {
          ensCache[domain.verifyingContract] = "0x";
        }
        const encoder = _TypedDataEncoder.from(types);
        encoder.visit(value, (type, value2) => {
          if (type === "address" && !(0, index_js_4.isHexString)(value2, 20)) {
            ensCache[value2] = "0x";
          }
          return value2;
        });
        for (const name in ensCache) {
          ensCache[name] = await resolveName(name);
        }
        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
          domain.verifyingContract = ensCache[domain.verifyingContract];
        }
        value = encoder.visit(value, (type, value2) => {
          if (type === "address" && ensCache[value2]) {
            return ensCache[value2];
          }
          return value2;
        });
        return { domain, value };
      }
      /**
       *  Returns the JSON-encoded payload expected by nodes which implement
       *  the JSON-RPC [[link-eip-712]] method.
       */
      static getPayload(domain, types, value) {
        _TypedDataEncoder.hashDomain(domain);
        const domainValues = {};
        const domainTypes = [];
        domainFieldNames.forEach((name) => {
          const value2 = domain[name];
          if (value2 == null) {
            return;
          }
          domainValues[name] = domainChecks[name](value2);
          domainTypes.push({ name, type: domainFieldTypes[name] });
        });
        const encoder = _TypedDataEncoder.from(types);
        types = encoder.types;
        const typesWithDomain = Object.assign({}, types);
        (0, index_js_4.assertArgument)(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
        typesWithDomain.EIP712Domain = domainTypes;
        encoder.encode(value);
        return {
          types: typesWithDomain,
          domain: domainValues,
          primaryType: encoder.primaryType,
          message: encoder.visit(value, (type, value2) => {
            if (type.match(/^bytes(\d*)/)) {
              return (0, index_js_4.hexlify)((0, index_js_4.getBytes)(value2));
            }
            if (type.match(/^u?int/)) {
              return (0, index_js_4.getBigInt)(value2).toString();
            }
            switch (type) {
              case "address":
                return value2.toLowerCase();
              case "bool":
                return !!value2;
              case "string":
                (0, index_js_4.assertArgument)(typeof value2 === "string", "invalid string", "value", value2);
                return value2;
            }
            (0, index_js_4.assertArgument)(false, "unsupported type", "type", type);
          })
        };
      }
    };
    _types = new WeakMap();
    _fullTypes = new WeakMap();
    _encoderCache = new WeakMap();
    _getEncoder = new WeakSet();
    getEncoder_fn = function(type) {
      {
        const encoder = getBaseEncoder(type);
        if (encoder) {
          return encoder;
        }
      }
      const array = splitArray(type).array;
      if (array) {
        const subtype = array.prefix;
        const subEncoder = this.getEncoder(subtype);
        return (value) => {
          (0, index_js_4.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
          let result = value.map(subEncoder);
          if (__privateGet(this, _fullTypes).has(subtype)) {
            result = result.map(index_js_2.keccak256);
          }
          return (0, index_js_2.keccak256)((0, index_js_4.concat)(result));
        };
      }
      const fields = this.types[type];
      if (fields) {
        const encodedType = (0, id_js_1.id)(__privateGet(this, _fullTypes).get(type));
        return (value) => {
          const values = fields.map(({ name, type: type2 }) => {
            const result = this.getEncoder(type2)(value[name]);
            if (__privateGet(this, _fullTypes).has(type2)) {
              return (0, index_js_2.keccak256)(result);
            }
            return result;
          });
          values.unshift(encodedType);
          return (0, index_js_4.concat)(values);
        };
      }
      (0, index_js_4.assertArgument)(false, `unknown type: ${type}`, "type", type);
    };
    var TypedDataEncoder = _TypedDataEncoder;
    exports.TypedDataEncoder = TypedDataEncoder;
    function verifyTypedData(domain, types, value, signature) {
      return (0, index_js_3.recoverAddress)(TypedDataEncoder.hash(domain, types, value), signature);
    }
    exports.verifyTypedData = verifyTypedData;
  }
});

// node_modules/ethers/lib.commonjs/hash/index.js
var require_hash = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verifyTypedData = exports.TypedDataEncoder = exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = exports.verifyMessage = exports.hashMessage = exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = exports.id = void 0;
    var id_js_1 = require_id();
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return id_js_1.id;
    } });
    var namehash_js_1 = require_namehash();
    Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function() {
      return namehash_js_1.ensNormalize;
    } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function() {
      return namehash_js_1.isValidName;
    } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function() {
      return namehash_js_1.namehash;
    } });
    Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function() {
      return namehash_js_1.dnsEncode;
    } });
    var message_js_1 = require_message();
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function() {
      return message_js_1.hashMessage;
    } });
    Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function() {
      return message_js_1.verifyMessage;
    } });
    var solidity_js_1 = require_solidity();
    Object.defineProperty(exports, "solidityPacked", { enumerable: true, get: function() {
      return solidity_js_1.solidityPacked;
    } });
    Object.defineProperty(exports, "solidityPackedKeccak256", { enumerable: true, get: function() {
      return solidity_js_1.solidityPackedKeccak256;
    } });
    Object.defineProperty(exports, "solidityPackedSha256", { enumerable: true, get: function() {
      return solidity_js_1.solidityPackedSha256;
    } });
    var typed_data_js_1 = require_typed_data();
    Object.defineProperty(exports, "TypedDataEncoder", { enumerable: true, get: function() {
      return typed_data_js_1.TypedDataEncoder;
    } });
    Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function() {
      return typed_data_js_1.verifyTypedData;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/fragments.js
var require_fragments = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/fragments.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StructFragment = exports.FunctionFragment = exports.FallbackFragment = exports.ConstructorFragment = exports.EventFragment = exports.ErrorFragment = exports.NamedFragment = exports.Fragment = exports.ParamType = void 0;
    var index_js_1 = require_utils3();
    var index_js_2 = require_hash();
    function setify(items) {
      const result = /* @__PURE__ */ new Set();
      items.forEach((k) => result.add(k));
      return Object.freeze(result);
    }
    var _kwVisibDeploy = "external public payable override";
    var KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
    var _kwVisib = "constant external internal payable private public pure view override";
    var KwVisib = setify(_kwVisib.split(" "));
    var _kwTypes = "constructor error event fallback function receive struct";
    var KwTypes = setify(_kwTypes.split(" "));
    var _kwModifiers = "calldata memory storage payable indexed";
    var KwModifiers = setify(_kwModifiers.split(" "));
    var _kwOther = "tuple returns";
    var _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
    var Keywords = setify(_keywords.split(" "));
    var SimpleTokens = {
      "(": "OPEN_PAREN",
      ")": "CLOSE_PAREN",
      "[": "OPEN_BRACKET",
      "]": "CLOSE_BRACKET",
      ",": "COMMA",
      "@": "AT"
    };
    var regexWhitespacePrefix = new RegExp("^(\\s*)");
    var regexNumberPrefix = new RegExp("^([0-9]+)");
    var regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
    var regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
    var regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
    var _offset, _tokens, _subTokenString, subTokenString_fn;
    var _TokenString = class _TokenString {
      constructor(tokens) {
        __privateAdd(this, _subTokenString);
        __privateAdd(this, _offset, void 0);
        __privateAdd(this, _tokens, void 0);
        __privateSet(this, _offset, 0);
        __privateSet(this, _tokens, tokens.slice());
      }
      get offset() {
        return __privateGet(this, _offset);
      }
      get length() {
        return __privateGet(this, _tokens).length - __privateGet(this, _offset);
      }
      clone() {
        return new _TokenString(__privateGet(this, _tokens));
      }
      reset() {
        __privateSet(this, _offset, 0);
      }
      // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
      popKeyword(allowed) {
        const top = this.peek();
        if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
          throw new Error(`expected keyword ${top.text}`);
        }
        return this.pop().text;
      }
      // Pops and returns the value of the next token if it is `type`; throws if out of tokens
      popType(type) {
        if (this.peek().type !== type) {
          const top = this.peek();
          throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);
        }
        return this.pop().text;
      }
      // Pops and returns a "(" TOKENS ")"
      popParen() {
        const top = this.peek();
        if (top.type !== "OPEN_PAREN") {
          throw new Error("bad start");
        }
        const result = __privateMethod(this, _subTokenString, subTokenString_fn).call(this, __privateGet(this, _offset) + 1, top.match + 1);
        __privateSet(this, _offset, top.match + 1);
        return result;
      }
      // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
      popParams() {
        const top = this.peek();
        if (top.type !== "OPEN_PAREN") {
          throw new Error("bad start");
        }
        const result = [];
        while (__privateGet(this, _offset) < top.match - 1) {
          const link = this.peek().linkNext;
          result.push(__privateMethod(this, _subTokenString, subTokenString_fn).call(this, __privateGet(this, _offset) + 1, link));
          __privateSet(this, _offset, link);
        }
        __privateSet(this, _offset, top.match + 1);
        return result;
      }
      // Returns the top Token, throwing if out of tokens
      peek() {
        if (__privateGet(this, _offset) >= __privateGet(this, _tokens).length) {
          throw new Error("out-of-bounds");
        }
        return __privateGet(this, _tokens)[__privateGet(this, _offset)];
      }
      // Returns the next value, if it is a keyword in `allowed`
      peekKeyword(allowed) {
        const top = this.peekType("KEYWORD");
        return top != null && allowed.has(top) ? top : null;
      }
      // Returns the value of the next token if it is `type`
      peekType(type) {
        if (this.length === 0) {
          return null;
        }
        const top = this.peek();
        return top.type === type ? top.text : null;
      }
      // Returns the next token; throws if out of tokens
      pop() {
        const result = this.peek();
        __privateWrapper(this, _offset)._++;
        return result;
      }
      toString() {
        const tokens = [];
        for (let i = __privateGet(this, _offset); i < __privateGet(this, _tokens).length; i++) {
          const token = __privateGet(this, _tokens)[i];
          tokens.push(`${token.type}:${token.text}`);
        }
        return `<TokenString ${tokens.join(" ")}>`;
      }
    };
    _offset = new WeakMap();
    _tokens = new WeakMap();
    _subTokenString = new WeakSet();
    subTokenString_fn = function(from = 0, to = 0) {
      return new _TokenString(__privateGet(this, _tokens).slice(from, to).map((t) => {
        return Object.freeze(Object.assign({}, t, {
          match: t.match - from,
          linkBack: t.linkBack - from,
          linkNext: t.linkNext - from
        }));
      }));
    };
    var TokenString = _TokenString;
    function lex(text) {
      const tokens = [];
      const throwError = (message) => {
        const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
        throw new Error(`invalid token ${token} at ${offset}: ${message}`);
      };
      let brackets = [];
      let commas = [];
      let offset = 0;
      while (offset < text.length) {
        let cur = text.substring(offset);
        let match = cur.match(regexWhitespacePrefix);
        if (match) {
          offset += match[1].length;
          cur = text.substring(offset);
        }
        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
        tokens.push(token);
        let type = SimpleTokens[cur[0]] || "";
        if (type) {
          token.type = type;
          token.text = cur[0];
          offset++;
          if (type === "OPEN_PAREN") {
            brackets.push(tokens.length - 1);
            commas.push(tokens.length - 1);
          } else if (type == "CLOSE_PAREN") {
            if (brackets.length === 0) {
              throwError("no matching open bracket");
            }
            token.match = brackets.pop();
            tokens[token.match].match = tokens.length - 1;
            token.depth--;
            token.linkBack = commas.pop();
            tokens[token.linkBack].linkNext = tokens.length - 1;
          } else if (type === "COMMA") {
            token.linkBack = commas.pop();
            tokens[token.linkBack].linkNext = tokens.length - 1;
            commas.push(tokens.length - 1);
          } else if (type === "OPEN_BRACKET") {
            token.type = "BRACKET";
          } else if (type === "CLOSE_BRACKET") {
            let suffix = tokens.pop().text;
            if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
              const value = tokens.pop().text;
              suffix = value + suffix;
              tokens[tokens.length - 1].value = (0, index_js_1.getNumber)(value);
            }
            if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
              throw new Error("missing opening bracket");
            }
            tokens[tokens.length - 1].text += suffix;
          }
          continue;
        }
        match = cur.match(regexIdPrefix);
        if (match) {
          token.text = match[1];
          offset += token.text.length;
          if (Keywords.has(token.text)) {
            token.type = "KEYWORD";
            continue;
          }
          if (token.text.match(regexType)) {
            token.type = "TYPE";
            continue;
          }
          token.type = "ID";
          continue;
        }
        match = cur.match(regexNumberPrefix);
        if (match) {
          token.text = match[1];
          token.type = "NUMBER";
          offset += token.text.length;
          continue;
        }
        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
      }
      return new TokenString(tokens.map((t) => Object.freeze(t)));
    }
    function allowSingle(set, allowed) {
      let included = [];
      for (const key in allowed.keys()) {
        if (set.has(key)) {
          included.push(key);
        }
      }
      if (included.length > 1) {
        throw new Error(`conflicting types: ${included.join(", ")}`);
      }
    }
    function consumeName(type, tokens) {
      if (tokens.peekKeyword(KwTypes)) {
        const keyword = tokens.pop().text;
        if (keyword !== type) {
          throw new Error(`expected ${type}, got ${keyword}`);
        }
      }
      return tokens.popType("ID");
    }
    function consumeKeywords(tokens, allowed) {
      const keywords = /* @__PURE__ */ new Set();
      while (true) {
        const keyword = tokens.peekType("KEYWORD");
        if (keyword == null || allowed && !allowed.has(keyword)) {
          break;
        }
        tokens.pop();
        if (keywords.has(keyword)) {
          throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
        }
        keywords.add(keyword);
      }
      return Object.freeze(keywords);
    }
    function consumeMutability(tokens) {
      let modifiers = consumeKeywords(tokens, KwVisib);
      allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
      allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
      if (modifiers.has("view")) {
        return "view";
      }
      if (modifiers.has("pure")) {
        return "pure";
      }
      if (modifiers.has("payable")) {
        return "payable";
      }
      if (modifiers.has("nonpayable")) {
        return "nonpayable";
      }
      if (modifiers.has("constant")) {
        return "view";
      }
      return "nonpayable";
    }
    function consumeParams(tokens, allowIndexed) {
      return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
    }
    function consumeGas(tokens) {
      if (tokens.peekType("AT")) {
        tokens.pop();
        if (tokens.peekType("NUMBER")) {
          return (0, index_js_1.getBigInt)(tokens.pop().text);
        }
        throw new Error("invalid gas");
      }
      return null;
    }
    function consumeEoi(tokens) {
      if (tokens.length) {
        throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
      }
    }
    var regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
    function verifyBasicType(type) {
      const match = type.match(regexType);
      (0, index_js_1.assertArgument)(match, "invalid type", "type", type);
      if (type === "uint") {
        return "uint256";
      }
      if (type === "int") {
        return "int256";
      }
      if (match[2]) {
        const length = parseInt(match[2]);
        (0, index_js_1.assertArgument)(length !== 0 && length <= 32, "invalid bytes length", "type", type);
      } else if (match[3]) {
        const size = parseInt(match[3]);
        (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type);
      }
      return type;
    }
    var _guard = {};
    var internal = Symbol.for("_ethers_internal");
    var ParamTypeInternal = "_ParamTypeInternal";
    var ErrorFragmentInternal = "_ErrorInternal";
    var EventFragmentInternal = "_EventInternal";
    var ConstructorFragmentInternal = "_ConstructorInternal";
    var FallbackFragmentInternal = "_FallbackInternal";
    var FunctionFragmentInternal = "_FunctionInternal";
    var StructFragmentInternal = "_StructInternal";
    var _walkAsync, walkAsync_fn;
    var _ParamType = class _ParamType {
      /**
       *  @private
       */
      constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {
        __privateAdd(this, _walkAsync);
        /**
         *  The local name of the parameter (or ``""`` if unbound)
         */
        __publicField(this, "name");
        /**
         *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
         *  ``"uint256[3][]"``)
         */
        __publicField(this, "type");
        /**
         *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
         */
        __publicField(this, "baseType");
        /**
         *  True if the parameters is indexed.
         *
         *  For non-indexable types this is ``null``.
         */
        __publicField(this, "indexed");
        /**
         *  The components for the tuple.
         *
         *  For non-tuple types this is ``null``.
         */
        __publicField(this, "components");
        /**
         *  The array length, or ``-1`` for dynamic-lengthed arrays.
         *
         *  For non-array types this is ``null``.
         */
        __publicField(this, "arrayLength");
        /**
         *  The type of each child in the array.
         *
         *  For non-array types this is ``null``.
         */
        __publicField(this, "arrayChildren");
        (0, index_js_1.assertPrivate)(guard, _guard, "ParamType");
        Object.defineProperty(this, internal, { value: ParamTypeInternal });
        if (components) {
          components = Object.freeze(components.slice());
        }
        if (baseType === "array") {
          if (arrayLength == null || arrayChildren == null) {
            throw new Error("");
          }
        } else if (arrayLength != null || arrayChildren != null) {
          throw new Error("");
        }
        if (baseType === "tuple") {
          if (components == null) {
            throw new Error("");
          }
        } else if (components != null) {
          throw new Error("");
        }
        (0, index_js_1.defineProperties)(this, {
          name,
          type,
          baseType,
          indexed,
          components,
          arrayLength,
          arrayChildren
        });
      }
      /**
       *  Return a string representation of this type.
       *
       *  For example,
       *
       *  ``sighash" => "(uint256,address)"``
       *
       *  ``"minimal" => "tuple(uint256,address) indexed"``
       *
       *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          const name = this.name || "";
          if (this.isArray()) {
            const result3 = JSON.parse(this.arrayChildren.format("json"));
            result3.name = name;
            result3.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
            return JSON.stringify(result3);
          }
          const result2 = {
            type: this.baseType === "tuple" ? "tuple" : this.type,
            name
          };
          if (typeof this.indexed === "boolean") {
            result2.indexed = this.indexed;
          }
          if (this.isTuple()) {
            result2.components = this.components.map((c) => JSON.parse(c.format(format)));
          }
          return JSON.stringify(result2);
        }
        let result = "";
        if (this.isArray()) {
          result += this.arrayChildren.format(format);
          result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
        } else {
          if (this.isTuple()) {
            result += "(" + this.components.map((comp) => comp.format(format)).join(format === "full" ? ", " : ",") + ")";
          } else {
            result += this.type;
          }
        }
        if (format !== "sighash") {
          if (this.indexed === true) {
            result += " indexed";
          }
          if (format === "full" && this.name) {
            result += " " + this.name;
          }
        }
        return result;
      }
      /**
       *  Returns true if %%this%% is an Array type.
       *
       *  This provides a type gaurd ensuring that [[arrayChildren]]
       *  and [[arrayLength]] are non-null.
       */
      isArray() {
        return this.baseType === "array";
      }
      /**
       *  Returns true if %%this%% is a Tuple type.
       *
       *  This provides a type gaurd ensuring that [[components]]
       *  is non-null.
       */
      isTuple() {
        return this.baseType === "tuple";
      }
      /**
       *  Returns true if %%this%% is an Indexable type.
       *
       *  This provides a type gaurd ensuring that [[indexed]]
       *  is non-null.
       */
      isIndexable() {
        return this.indexed != null;
      }
      /**
       *  Walks the **ParamType** with %%value%%, calling %%process%%
       *  on each type, destructing the %%value%% recursively.
       */
      walk(value, process) {
        if (this.isArray()) {
          if (!Array.isArray(value)) {
            throw new Error("invalid array value");
          }
          if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
            throw new Error("array is wrong length");
          }
          const _this = this;
          return value.map((v) => _this.arrayChildren.walk(v, process));
        }
        if (this.isTuple()) {
          if (!Array.isArray(value)) {
            throw new Error("invalid tuple value");
          }
          if (value.length !== this.components.length) {
            throw new Error("array is wrong length");
          }
          const _this = this;
          return value.map((v, i) => _this.components[i].walk(v, process));
        }
        return process(this.type, value);
      }
      /**
       *  Walks the **ParamType** with %%value%%, asynchronously calling
       *  %%process%% on each type, destructing the %%value%% recursively.
       *
       *  This can be used to resolve ENS names by walking and resolving each
       *  ``"address"`` type.
       */
      async walkAsync(value, process) {
        const promises = [];
        const result = [value];
        __privateMethod(this, _walkAsync, walkAsync_fn).call(this, promises, value, process, (value2) => {
          result[0] = value2;
        });
        if (promises.length) {
          await Promise.all(promises);
        }
        return result[0];
      }
      /**
       *  Creates a new **ParamType** for %%obj%%.
       *
       *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
       *  otherwise the ``indexed`` keyword will throw an error.
       */
      static from(obj, allowIndexed) {
        if (_ParamType.isParamType(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _ParamType.from(lex(obj), allowIndexed);
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid param type", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          let type2 = "", baseType = "";
          let comps = null;
          if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
            baseType = "tuple";
            comps = obj.popParams().map((t) => _ParamType.from(t));
            type2 = `tuple(${comps.map((c) => c.format()).join(",")})`;
          } else {
            type2 = verifyBasicType(obj.popType("TYPE"));
            baseType = type2;
          }
          let arrayChildren = null;
          let arrayLength = null;
          while (obj.length && obj.peekType("BRACKET")) {
            const bracket = obj.pop();
            arrayChildren = new _ParamType(_guard, "", type2, baseType, null, comps, arrayLength, arrayChildren);
            arrayLength = bracket.value;
            type2 += bracket.text;
            baseType = "array";
            comps = null;
          }
          let indexed2 = null;
          const keywords = consumeKeywords(obj, KwModifiers);
          if (keywords.has("indexed")) {
            if (!allowIndexed) {
              throw new Error("");
            }
            indexed2 = true;
          }
          const name2 = obj.peekType("ID") ? obj.pop().text : "";
          if (obj.length) {
            throw new Error("leftover tokens");
          }
          return new _ParamType(_guard, name2, type2, baseType, indexed2, comps, arrayLength, arrayChildren);
        }
        const name = obj.name;
        (0, index_js_1.assertArgument)(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
        let indexed = obj.indexed;
        if (indexed != null) {
          (0, index_js_1.assertArgument)(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
          indexed = !!indexed;
        }
        let type = obj.type;
        let arrayMatch = type.match(regexArrayType);
        if (arrayMatch) {
          const arrayLength = parseInt(arrayMatch[2] || "-1");
          const arrayChildren = _ParamType.from({
            type: arrayMatch[1],
            components: obj.components
          });
          return new _ParamType(_guard, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
        }
        if (type === "tuple" || type.startsWith(
          "tuple("
          /* fix: ) */
        ) || type.startsWith(
          "("
          /* fix: ) */
        )) {
          const comps = obj.components != null ? obj.components.map((c) => _ParamType.from(c)) : null;
          const tuple = new _ParamType(_guard, name || "", type, "tuple", indexed, comps, null, null);
          return tuple;
        }
        type = verifyBasicType(obj.type);
        return new _ParamType(_guard, name || "", type, type, indexed, null, null, null);
      }
      /**
       *  Returns true if %%value%% is a **ParamType**.
       */
      static isParamType(value) {
        return value && value[internal] === ParamTypeInternal;
      }
    };
    _walkAsync = new WeakSet();
    walkAsync_fn = function(promises, value, process, setValue) {
      if (this.isArray()) {
        if (!Array.isArray(value)) {
          throw new Error("invalid array value");
        }
        if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
          throw new Error("array is wrong length");
        }
        const childType = this.arrayChildren;
        const result2 = value.slice();
        result2.forEach((value2, index) => {
          var _a;
          __privateMethod(_a = childType, _walkAsync, walkAsync_fn).call(_a, promises, value2, process, (value3) => {
            result2[index] = value3;
          });
        });
        setValue(result2);
        return;
      }
      if (this.isTuple()) {
        const components = this.components;
        let result2;
        if (Array.isArray(value)) {
          result2 = value.slice();
        } else {
          if (value == null || typeof value !== "object") {
            throw new Error("invalid tuple value");
          }
          result2 = components.map((param) => {
            if (!param.name) {
              throw new Error("cannot use object value with unnamed components");
            }
            if (!(param.name in value)) {
              throw new Error(`missing value for component ${param.name}`);
            }
            return value[param.name];
          });
        }
        if (result2.length !== this.components.length) {
          throw new Error("array is wrong length");
        }
        result2.forEach((value2, index) => {
          var _a;
          __privateMethod(_a = components[index], _walkAsync, walkAsync_fn).call(_a, promises, value2, process, (value3) => {
            result2[index] = value3;
          });
        });
        setValue(result2);
        return;
      }
      const result = process(this.type, value);
      if (result.then) {
        promises.push(async function() {
          setValue(await result);
        }());
      } else {
        setValue(result);
      }
    };
    var ParamType = _ParamType;
    exports.ParamType = ParamType;
    var Fragment2 = class _Fragment {
      /**
       *  @private
       */
      constructor(guard, type, inputs) {
        /**
         *  The type of the fragment.
         */
        __publicField(this, "type");
        /**
         *  The inputs for the fragment.
         */
        __publicField(this, "inputs");
        (0, index_js_1.assertPrivate)(guard, _guard, "Fragment");
        inputs = Object.freeze(inputs.slice());
        (0, index_js_1.defineProperties)(this, { type, inputs });
      }
      /**
       *  Creates a new **Fragment** for %%obj%%, wich can be any supported
       *  ABI frgament type.
       */
      static from(obj) {
        if (typeof obj === "string") {
          try {
            _Fragment.from(JSON.parse(obj));
          } catch (e) {
          }
          return _Fragment.from(lex(obj));
        }
        if (obj instanceof TokenString) {
          const type = obj.peekKeyword(KwTypes);
          switch (type) {
            case "constructor":
              return ConstructorFragment.from(obj);
            case "error":
              return ErrorFragment.from(obj);
            case "event":
              return EventFragment.from(obj);
            case "fallback":
            case "receive":
              return FallbackFragment.from(obj);
            case "function":
              return FunctionFragment.from(obj);
            case "struct":
              return StructFragment.from(obj);
          }
        } else if (typeof obj === "object") {
          switch (obj.type) {
            case "constructor":
              return ConstructorFragment.from(obj);
            case "error":
              return ErrorFragment.from(obj);
            case "event":
              return EventFragment.from(obj);
            case "fallback":
            case "receive":
              return FallbackFragment.from(obj);
            case "function":
              return FunctionFragment.from(obj);
            case "struct":
              return StructFragment.from(obj);
          }
          (0, index_js_1.assert)(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
            operation: "Fragment.from"
          });
        }
        (0, index_js_1.assertArgument)(false, "unsupported frgament object", "obj", obj);
      }
      /**
       *  Returns true if %%value%% is a [[ConstructorFragment]].
       */
      static isConstructor(value) {
        return ConstructorFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is an [[ErrorFragment]].
       */
      static isError(value) {
        return ErrorFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is an [[EventFragment]].
       */
      static isEvent(value) {
        return EventFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is a [[FunctionFragment]].
       */
      static isFunction(value) {
        return FunctionFragment.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is a [[StructFragment]].
       */
      static isStruct(value) {
        return StructFragment.isFragment(value);
      }
    };
    exports.Fragment = Fragment2;
    var NamedFragment = class extends Fragment2 {
      /**
       *  @private
       */
      constructor(guard, type, name, inputs) {
        super(guard, type, inputs);
        /**
         *  The name of the fragment.
         */
        __publicField(this, "name");
        (0, index_js_1.assertArgument)(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
        inputs = Object.freeze(inputs.slice());
        (0, index_js_1.defineProperties)(this, { name });
      }
    };
    exports.NamedFragment = NamedFragment;
    function joinParams(format, params) {
      return "(" + params.map((p) => p.format(format)).join(format === "full" ? ", " : ",") + ")";
    }
    var ErrorFragment = class _ErrorFragment extends NamedFragment {
      /**
       *  @private
       */
      constructor(guard, name, inputs) {
        super(guard, "error", name, inputs);
        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });
      }
      /**
       *  The Custom Error selector.
       */
      get selector() {
        return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
      }
      /**
       *  Returns a string representation of this fragment as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("error");
        }
        result.push(this.name + joinParams(format, this.inputs));
        return result.join(" ");
      }
      /**
       *  Returns a new **ErrorFragment** for %%obj%%.
       */
      static from(obj) {
        if (_ErrorFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          return _ErrorFragment.from(lex(obj));
        } else if (obj instanceof TokenString) {
          const name = consumeName("error", obj);
          const inputs = consumeParams(obj);
          consumeEoi(obj);
          return new _ErrorFragment(_guard, name, inputs);
        }
        return new _ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is an
       *  **ErrorFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === ErrorFragmentInternal;
      }
    };
    exports.ErrorFragment = ErrorFragment;
    var EventFragment = class _EventFragment extends NamedFragment {
      /**
       *  @private
       */
      constructor(guard, name, inputs, anonymous) {
        super(guard, "event", name, inputs);
        /**
         *  Whether this event is anonymous.
         */
        __publicField(this, "anonymous");
        Object.defineProperty(this, internal, { value: EventFragmentInternal });
        (0, index_js_1.defineProperties)(this, { anonymous });
      }
      /**
       *  The Event topic hash.
       */
      get topicHash() {
        return (0, index_js_2.id)(this.format("sighash"));
      }
      /**
       *  Returns a string representation of this event as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("event");
        }
        result.push(this.name + joinParams(format, this.inputs));
        if (format !== "sighash" && this.anonymous) {
          result.push("anonymous");
        }
        return result.join(" ");
      }
      /**
       *  Return the topic hash for an event with %%name%% and %%params%%.
       */
      static getTopicHash(name, params) {
        params = (params || []).map((p) => ParamType.from(p));
        const fragment = new _EventFragment(_guard, name, params, false);
        return fragment.topicHash;
      }
      /**
       *  Returns a new **EventFragment** for %%obj%%.
       */
      static from(obj) {
        if (_EventFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _EventFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid event fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const name = consumeName("event", obj);
          const inputs = consumeParams(obj, true);
          const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
          consumeEoi(obj);
          return new _EventFragment(_guard, name, inputs, anonymous);
        }
        return new _EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is an
       *  **EventFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === EventFragmentInternal;
      }
    };
    exports.EventFragment = EventFragment;
    var ConstructorFragment = class _ConstructorFragment extends Fragment2 {
      /**
       *  @private
       */
      constructor(guard, type, inputs, payable, gas) {
        super(guard, type, inputs);
        /**
         *  Whether the constructor can receive an endowment.
         */
        __publicField(this, "payable");
        /**
         *  The recommended gas limit for deployment or ``null``.
         */
        __publicField(this, "gas");
        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });
        (0, index_js_1.defineProperties)(this, { payable, gas });
      }
      /**
       *  Returns a string representation of this constructor as %%format%%.
       */
      format(format) {
        (0, index_js_1.assert)(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
        if (format === "json") {
          return JSON.stringify({
            type: "constructor",
            stateMutability: this.payable ? "payable" : "undefined",
            payable: this.payable,
            gas: this.gas != null ? this.gas : void 0,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
          });
        }
        const result = [`constructor${joinParams(format, this.inputs)}`];
        if (this.payable) {
          result.push("payable");
        }
        if (this.gas != null) {
          result.push(`@${this.gas.toString()}`);
        }
        return result.join(" ");
      }
      /**
       *  Returns a new **ConstructorFragment** for %%obj%%.
       */
      static from(obj) {
        if (_ConstructorFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _ConstructorFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid constuctor fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          consumeKeywords(obj, setify(["constructor"]));
          const inputs = consumeParams(obj);
          const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
          const gas = consumeGas(obj);
          consumeEoi(obj);
          return new _ConstructorFragment(_guard, "constructor", inputs, payable, gas);
        }
        return new _ConstructorFragment(_guard, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **ConstructorFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === ConstructorFragmentInternal;
      }
    };
    exports.ConstructorFragment = ConstructorFragment;
    var FallbackFragment = class _FallbackFragment extends Fragment2 {
      constructor(guard, inputs, payable) {
        super(guard, "fallback", inputs);
        /**
         *  If the function can be sent value during invocation.
         */
        __publicField(this, "payable");
        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });
        (0, index_js_1.defineProperties)(this, { payable });
      }
      /**
       *  Returns a string representation of this fallback as %%format%%.
       */
      format(format) {
        const type = this.inputs.length === 0 ? "receive" : "fallback";
        if (format === "json") {
          const stateMutability = this.payable ? "payable" : "nonpayable";
          return JSON.stringify({ type, stateMutability });
        }
        return `${type}()${this.payable ? " payable" : ""}`;
      }
      /**
       *  Returns a new **FallbackFragment** for %%obj%%.
       */
      static from(obj) {
        if (_FallbackFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _FallbackFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid fallback fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const errorObj = obj.toString();
          const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
          (0, index_js_1.assertArgument)(topIsValid, "type must be fallback or receive", "obj", errorObj);
          const type = obj.popKeyword(setify(["fallback", "receive"]));
          if (type === "receive") {
            const inputs2 = consumeParams(obj);
            (0, index_js_1.assertArgument)(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
            consumeKeywords(obj, setify(["payable"]));
            consumeEoi(obj);
            return new _FallbackFragment(_guard, [], true);
          }
          let inputs = consumeParams(obj);
          if (inputs.length) {
            (0, index_js_1.assertArgument)(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
          } else {
            inputs = [ParamType.from("bytes")];
          }
          const mutability = consumeMutability(obj);
          (0, index_js_1.assertArgument)(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
          if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
            const outputs = consumeParams(obj);
            (0, index_js_1.assertArgument)(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
          }
          consumeEoi(obj);
          return new _FallbackFragment(_guard, inputs, mutability === "payable");
        }
        if (obj.type === "receive") {
          return new _FallbackFragment(_guard, [], true);
        }
        if (obj.type === "fallback") {
          const inputs = [ParamType.from("bytes")];
          const payable = obj.stateMutability === "payable";
          return new _FallbackFragment(_guard, inputs, payable);
        }
        (0, index_js_1.assertArgument)(false, "invalid fallback description", "obj", obj);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **FallbackFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === FallbackFragmentInternal;
      }
    };
    exports.FallbackFragment = FallbackFragment;
    var FunctionFragment = class _FunctionFragment extends NamedFragment {
      /**
       *  @private
       */
      constructor(guard, name, stateMutability, inputs, outputs, gas) {
        super(guard, "function", name, inputs);
        /**
         *  If the function is constant (e.g. ``pure`` or ``view`` functions).
         */
        __publicField(this, "constant");
        /**
         *  The returned types for the result of calling this function.
         */
        __publicField(this, "outputs");
        /**
         *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
         *  or ``pure``)
         */
        __publicField(this, "stateMutability");
        /**
         *  If the function can be sent value during invocation.
         */
        __publicField(this, "payable");
        /**
         *  The recommended gas limit to send when calling this function.
         */
        __publicField(this, "gas");
        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });
        outputs = Object.freeze(outputs.slice());
        const constant = stateMutability === "view" || stateMutability === "pure";
        const payable = stateMutability === "payable";
        (0, index_js_1.defineProperties)(this, { constant, gas, outputs, payable, stateMutability });
      }
      /**
       *  The Function selector.
       */
      get selector() {
        return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
      }
      /**
       *  Returns a string representation of this function as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas != null ? this.gas : void 0,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
            outputs: this.outputs.map((o) => JSON.parse(o.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("function");
        }
        result.push(this.name + joinParams(format, this.inputs));
        if (format !== "sighash") {
          if (this.stateMutability !== "nonpayable") {
            result.push(this.stateMutability);
          }
          if (this.outputs && this.outputs.length) {
            result.push("returns");
            result.push(joinParams(format, this.outputs));
          }
          if (this.gas != null) {
            result.push(`@${this.gas.toString()}`);
          }
        }
        return result.join(" ");
      }
      /**
       *  Return the selector for a function with %%name%% and %%params%%.
       */
      static getSelector(name, params) {
        params = (params || []).map((p) => ParamType.from(p));
        const fragment = new _FunctionFragment(_guard, name, "view", params, [], null);
        return fragment.selector;
      }
      /**
       *  Returns a new **FunctionFragment** for %%obj%%.
       */
      static from(obj) {
        if (_FunctionFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _FunctionFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid function fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const name = consumeName("function", obj);
          const inputs = consumeParams(obj);
          const mutability = consumeMutability(obj);
          let outputs = [];
          if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
            outputs = consumeParams(obj);
          }
          const gas = consumeGas(obj);
          consumeEoi(obj);
          return new _FunctionFragment(_guard, name, mutability, inputs, outputs, gas);
        }
        let stateMutability = obj.stateMutability;
        if (stateMutability == null) {
          stateMutability = "payable";
          if (typeof obj.constant === "boolean") {
            stateMutability = "view";
            if (!obj.constant) {
              stateMutability = "payable";
              if (typeof obj.payable === "boolean" && !obj.payable) {
                stateMutability = "nonpayable";
              }
            }
          } else if (typeof obj.payable === "boolean" && !obj.payable) {
            stateMutability = "nonpayable";
          }
        }
        return new _FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **FunctionFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === FunctionFragmentInternal;
      }
    };
    exports.FunctionFragment = FunctionFragment;
    var StructFragment = class _StructFragment extends NamedFragment {
      /**
       *  @private
       */
      constructor(guard, name, inputs) {
        super(guard, "struct", name, inputs);
        Object.defineProperty(this, internal, { value: StructFragmentInternal });
      }
      /**
       *  Returns a string representation of this struct as %%format%%.
       */
      format() {
        throw new Error("@TODO");
      }
      /**
       *  Returns a new **StructFragment** for %%obj%%.
       */
      static from(obj) {
        if (typeof obj === "string") {
          try {
            return _StructFragment.from(lex(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid struct fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString) {
          const name = consumeName("struct", obj);
          const inputs = consumeParams(obj);
          consumeEoi(obj);
          return new _StructFragment(_guard, name, inputs);
        }
        return new _StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
      }
      // @TODO: fix this return type
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **StructFragment**.
       */
      static isFragment(value) {
        return value && value[internal] === StructFragmentInternal;
      }
    };
    exports.StructFragment = StructFragment;
  }
});

// node_modules/ethers/lib.commonjs/abi/abi-coder.js
var require_abi_coder = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/abi-coder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbiCoder = void 0;
    var index_js_1 = require_utils3();
    var abstract_coder_js_1 = require_abstract_coder();
    var address_js_1 = require_address3();
    var array_js_1 = require_array();
    var boolean_js_1 = require_boolean();
    var bytes_js_1 = require_bytes();
    var fixed_bytes_js_1 = require_fixed_bytes();
    var null_js_1 = require_null();
    var number_js_1 = require_number();
    var string_js_1 = require_string();
    var tuple_js_1 = require_tuple();
    var fragments_js_1 = require_fragments();
    var index_js_2 = require_address2();
    var index_js_3 = require_utils3();
    var PanicReasons = /* @__PURE__ */ new Map();
    PanicReasons.set(0, "GENERIC_PANIC");
    PanicReasons.set(1, "ASSERT_FALSE");
    PanicReasons.set(17, "OVERFLOW");
    PanicReasons.set(18, "DIVIDE_BY_ZERO");
    PanicReasons.set(33, "ENUM_RANGE_ERROR");
    PanicReasons.set(34, "BAD_STORAGE_DATA");
    PanicReasons.set(49, "STACK_UNDERFLOW");
    PanicReasons.set(50, "ARRAY_RANGE_ERROR");
    PanicReasons.set(65, "OUT_OF_MEMORY");
    PanicReasons.set(81, "UNINITIALIZED_FUNCTION_CALL");
    var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    var defaultCoder = null;
    var defaultMaxInflation = 1024;
    function getBuiltinCallException(action, tx, data, abiCoder) {
      let message = "missing revert data";
      let reason = null;
      const invocation = null;
      let revert = null;
      if (data) {
        message = "execution reverted";
        const bytes = (0, index_js_3.getBytes)(data);
        data = (0, index_js_3.hexlify)(data);
        if (bytes.length === 0) {
          message += " (no data present; likely require(false) occurred";
          reason = "require(false)";
        } else if (bytes.length % 32 !== 4) {
          message += " (could not decode reason; invalid data length)";
        } else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === "0x08c379a0") {
          try {
            reason = abiCoder.decode(["string"], bytes.slice(4))[0];
            revert = {
              signature: "Error(string)",
              name: "Error",
              args: [reason]
            };
            message += `: ${JSON.stringify(reason)}`;
          } catch (error) {
            message += " (could not decode reason; invalid string data)";
          }
        } else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === "0x4e487b71") {
          try {
            const code = Number(abiCoder.decode(["uint256"], bytes.slice(4))[0]);
            revert = {
              signature: "Panic(uint256)",
              name: "Panic",
              args: [code]
            };
            reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
            message += `: ${reason}`;
          } catch (error) {
            message += " (could not decode panic code)";
          }
        } else {
          message += " (unknown custom error)";
        }
      }
      const transaction = {
        to: tx.to ? (0, index_js_2.getAddress)(tx.to) : null,
        data: tx.data || "0x"
      };
      if (tx.from) {
        transaction.from = (0, index_js_2.getAddress)(tx.from);
      }
      return (0, index_js_3.makeError)(message, "CALL_EXCEPTION", {
        action,
        data,
        reason,
        transaction,
        invocation,
        revert
      });
    }
    var _getCoder, getCoder_fn;
    var _AbiCoder = class _AbiCoder {
      constructor() {
        __privateAdd(this, _getCoder);
      }
      /**
       *  Get the default values for the given %%types%%.
       *
       *  For example, a ``uint`` is by default ``0`` and ``bool``
       *  is by default ``false``.
       */
      getDefaultValue(types) {
        const coders = types.map((type) => __privateMethod(this, _getCoder, getCoder_fn).call(this, fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        return coder.defaultValue();
      }
      /**
       *  Encode the %%values%% as the %%types%% into ABI data.
       *
       *  @returns DataHexstring
       */
      encode(types, values) {
        (0, index_js_1.assertArgumentCount)(values.length, types.length, "types/values length mismatch");
        const coders = types.map((type) => __privateMethod(this, _getCoder, getCoder_fn).call(this, fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        const writer = new abstract_coder_js_1.Writer();
        coder.encode(writer, values);
        return writer.data;
      }
      /**
       *  Decode the ABI %%data%% as the %%types%% into values.
       *
       *  If %%loose%% decoding is enabled, then strict padding is
       *  not enforced. Some older versions of Solidity incorrectly
       *  padded event data emitted from ``external`` functions.
       */
      decode(types, data, loose) {
        const coders = types.map((type) => __privateMethod(this, _getCoder, getCoder_fn).call(this, fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        return coder.decode(new abstract_coder_js_1.Reader(data, loose, defaultMaxInflation));
      }
      static _setDefaultMaxInflation(value) {
        (0, index_js_1.assertArgument)(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
        defaultMaxInflation = value;
      }
      /**
       *  Returns the shared singleton instance of a default [[AbiCoder]].
       *
       *  On the first call, the instance is created internally.
       */
      static defaultAbiCoder() {
        if (defaultCoder == null) {
          defaultCoder = new _AbiCoder();
        }
        return defaultCoder;
      }
      /**
       *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
       *  result %%data%% for the [[CallExceptionAction]] %%action%% against
       *  the Transaction %%tx%%.
       */
      static getBuiltinCallException(action, tx, data) {
        return getBuiltinCallException(action, tx, data, _AbiCoder.defaultAbiCoder());
      }
    };
    _getCoder = new WeakSet();
    getCoder_fn = function(param) {
      if (param.isArray()) {
        return new array_js_1.ArrayCoder(__privateMethod(this, _getCoder, getCoder_fn).call(this, param.arrayChildren), param.arrayLength, param.name);
      }
      if (param.isTuple()) {
        return new tuple_js_1.TupleCoder(param.components.map((c) => __privateMethod(this, _getCoder, getCoder_fn).call(this, c)), param.name);
      }
      switch (param.baseType) {
        case "address":
          return new address_js_1.AddressCoder(param.name);
        case "bool":
          return new boolean_js_1.BooleanCoder(param.name);
        case "string":
          return new string_js_1.StringCoder(param.name);
        case "bytes":
          return new bytes_js_1.BytesCoder(param.name);
        case "":
          return new null_js_1.NullCoder(param.name);
      }
      let match = param.type.match(paramTypeNumber);
      if (match) {
        let size = parseInt(match[2] || "256");
        (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
        return new number_js_1.NumberCoder(size / 8, match[1] === "int", param.name);
      }
      match = param.type.match(paramTypeBytes);
      if (match) {
        let size = parseInt(match[1]);
        (0, index_js_1.assertArgument)(size !== 0 && size <= 32, "invalid bytes length", "param", param);
        return new fixed_bytes_js_1.FixedBytesCoder(size, param.name);
      }
      (0, index_js_1.assertArgument)(false, "invalid type", "type", param.type);
    };
    var AbiCoder = _AbiCoder;
    exports.AbiCoder = AbiCoder;
  }
});

// node_modules/ethers/lib.commonjs/abi/bytes32.js
var require_bytes32 = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/bytes32.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeBytes32String = exports.encodeBytes32String = void 0;
    var index_js_1 = require_utils3();
    function encodeBytes32String(text) {
      const bytes = (0, index_js_1.toUtf8Bytes)(text);
      if (bytes.length > 31) {
        throw new Error("bytes32 string must be less than 32 bytes");
      }
      return (0, index_js_1.zeroPadBytes)(bytes, 32);
    }
    exports.encodeBytes32String = encodeBytes32String;
    function decodeBytes32String(_bytes) {
      const data = (0, index_js_1.getBytes)(_bytes, "bytes");
      if (data.length !== 32) {
        throw new Error("invalid bytes32 - not 32 bytes long");
      }
      if (data[31] !== 0) {
        throw new Error("invalid bytes32 string - no null terminator");
      }
      let length = 31;
      while (data[length - 1] === 0) {
        length--;
      }
      return (0, index_js_1.toUtf8String)(data.slice(0, length));
    }
    exports.decodeBytes32String = decodeBytes32String;
  }
});

// node_modules/ethers/lib.commonjs/abi/interface.js
var require_interface = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.Result = exports.checkResultErrors = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_hash();
    var index_js_3 = require_utils3();
    var abi_coder_js_1 = require_abi_coder();
    var abstract_coder_js_1 = require_abstract_coder();
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return abstract_coder_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "Result", { enumerable: true, get: function() {
      return abstract_coder_js_1.Result;
    } });
    var fragments_js_1 = require_fragments();
    var typed_js_1 = require_typed();
    var LogDescription = class {
      /**
       *  @_ignore:
       */
      constructor(fragment, topic, args) {
        /**
         *  The matching fragment for the ``topic0``.
         */
        __publicField(this, "fragment");
        /**
         *  The name of the Event.
         */
        __publicField(this, "name");
        /**
         *  The full Event signature.
         */
        __publicField(this, "signature");
        /**
         *  The topic hash for the Event.
         */
        __publicField(this, "topic");
        /**
         *  The arguments passed into the Event with ``emit``.
         */
        __publicField(this, "args");
        const name = fragment.name, signature = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          signature,
          topic,
          args
        });
      }
    };
    exports.LogDescription = LogDescription;
    var TransactionDescription = class {
      /**
       *  @_ignore:
       */
      constructor(fragment, selector, args, value) {
        /**
         *  The matching fragment from the transaction ``data``.
         */
        __publicField(this, "fragment");
        /**
         *  The name of the Function from the transaction ``data``.
         */
        __publicField(this, "name");
        /**
         *  The arguments passed to the Function from the transaction ``data``.
         */
        __publicField(this, "args");
        /**
         *  The full Function signature from the transaction ``data``.
         */
        __publicField(this, "signature");
        /**
         *  The selector for the Function from the transaction ``data``.
         */
        __publicField(this, "selector");
        /**
         *  The ``value`` (in wei) from the transaction.
         */
        __publicField(this, "value");
        const name = fragment.name, signature = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          args,
          signature,
          selector,
          value
        });
      }
    };
    exports.TransactionDescription = TransactionDescription;
    var ErrorDescription = class {
      /**
       *  @_ignore:
       */
      constructor(fragment, selector, args) {
        /**
         *  The matching fragment.
         */
        __publicField(this, "fragment");
        /**
         *  The name of the Error.
         */
        __publicField(this, "name");
        /**
         *  The arguments passed to the Error with ``revert``.
         */
        __publicField(this, "args");
        /**
         *  The full Error signature.
         */
        __publicField(this, "signature");
        /**
         *  The selector for the Error.
         */
        __publicField(this, "selector");
        const name = fragment.name, signature = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          args,
          signature,
          selector
        });
      }
    };
    exports.ErrorDescription = ErrorDescription;
    var Indexed = class {
      /**
       *  @_ignore:
       */
      constructor(hash) {
        /**
         *  The ``keccak256`` of the value logged.
         */
        __publicField(this, "hash");
        /**
         *  @_ignore:
         */
        __publicField(this, "_isIndexed");
        (0, index_js_3.defineProperties)(this, { hash, _isIndexed: true });
      }
      /**
       *  Returns ``true`` if %%value%% is an **Indexed**.
       *
       *  This provides a Type Guard for property access.
       */
      static isIndexed(value) {
        return !!(value && value._isIndexed);
      }
    };
    exports.Indexed = Indexed;
    var PanicReasons = {
      "0": "generic panic",
      "1": "assert(false)",
      "17": "arithmetic overflow",
      "18": "division or modulo by zero",
      "33": "enum overflow",
      "34": "invalid encoded storage byte array accessed",
      "49": "out-of-bounds array access; popping on an empty array",
      "50": "out-of-bounds access of an array or bytesN",
      "65": "out of memory",
      "81": "uninitialized function"
    };
    var BuiltinErrors = {
      "0x08c379a0": {
        signature: "Error(string)",
        name: "Error",
        inputs: ["string"],
        reason: (message) => {
          return `reverted with reason string ${JSON.stringify(message)}`;
        }
      },
      "0x4e487b71": {
        signature: "Panic(uint256)",
        name: "Panic",
        inputs: ["uint256"],
        reason: (code) => {
          let reason = "unknown panic code";
          if (code >= 0 && code <= 255 && PanicReasons[code.toString()]) {
            reason = PanicReasons[code.toString()];
          }
          return `reverted with panic code 0x${code.toString(16)} (${reason})`;
        }
      }
    };
    var _errors, _events, _functions, _abiCoder, _getFunction, getFunction_fn, _getEvent, getEvent_fn;
    var _Interface = class _Interface {
      /**
       *  Create a new Interface for the %%fragments%%.
       */
      constructor(fragments) {
        // Find a function definition by any means necessary (unless it is ambiguous)
        __privateAdd(this, _getFunction);
        // Find an event definition by any means necessary (unless it is ambiguous)
        __privateAdd(this, _getEvent);
        /**
         *  All the Contract ABI members (i.e. methods, events, errors, etc).
         */
        __publicField(this, "fragments");
        /**
         *  The Contract constructor.
         */
        __publicField(this, "deploy");
        /**
         *  The Fallback method, if any.
         */
        __publicField(this, "fallback");
        /**
         *  If receiving ether is supported.
         */
        __publicField(this, "receive");
        __privateAdd(this, _errors, void 0);
        __privateAdd(this, _events, void 0);
        __privateAdd(this, _functions, void 0);
        //    #structs: Map<string, StructFragment>;
        __privateAdd(this, _abiCoder, void 0);
        let abi = [];
        if (typeof fragments === "string") {
          abi = JSON.parse(fragments);
        } else {
          abi = fragments;
        }
        __privateSet(this, _functions, /* @__PURE__ */ new Map());
        __privateSet(this, _errors, /* @__PURE__ */ new Map());
        __privateSet(this, _events, /* @__PURE__ */ new Map());
        const frags = [];
        for (const a of abi) {
          try {
            frags.push(fragments_js_1.Fragment.from(a));
          } catch (error) {
            console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
          }
        }
        (0, index_js_3.defineProperties)(this, {
          fragments: Object.freeze(frags)
        });
        let fallback = null;
        let receive = false;
        __privateSet(this, _abiCoder, this.getAbiCoder());
        this.fragments.forEach((fragment, index) => {
          let bucket;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                console.log("duplicate definition - constructor");
                return;
              }
              (0, index_js_3.defineProperties)(this, { deploy: fragment });
              return;
            case "fallback":
              if (fragment.inputs.length === 0) {
                receive = true;
              } else {
                (0, index_js_3.assertArgument)(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
                fallback = fragment;
                receive = fallback.payable;
              }
              return;
            case "function":
              bucket = __privateGet(this, _functions);
              break;
            case "event":
              bucket = __privateGet(this, _events);
              break;
            case "error":
              bucket = __privateGet(this, _errors);
              break;
            default:
              return;
          }
          const signature = fragment.format();
          if (bucket.has(signature)) {
            return;
          }
          bucket.set(signature, fragment);
        });
        if (!this.deploy) {
          (0, index_js_3.defineProperties)(this, {
            deploy: fragments_js_1.ConstructorFragment.from("constructor()")
          });
        }
        (0, index_js_3.defineProperties)(this, { fallback, receive });
      }
      /**
       *  Returns the entire Human-Readable ABI, as an array of
       *  signatures, optionally as %%minimal%% strings, which
       *  removes parameter names and unneceesary spaces.
       */
      format(minimal) {
        const format = minimal ? "minimal" : "full";
        const abi = this.fragments.map((f) => f.format(format));
        return abi;
      }
      /**
       *  Return the JSON-encoded ABI. This is the format Solidiy
       *  returns.
       */
      formatJson() {
        const abi = this.fragments.map((f) => f.format("json"));
        return JSON.stringify(abi.map((j2) => JSON.parse(j2)));
      }
      /**
       *  The ABI coder that will be used to encode and decode binary
       *  data.
       */
      getAbiCoder() {
        return abi_coder_js_1.AbiCoder.defaultAbiCoder();
      }
      /**
       *  Get the function name for %%key%%, which may be a function selector,
       *  function name or function signature that belongs to the ABI.
       */
      getFunctionName(key) {
        const fragment = __privateMethod(this, _getFunction, getFunction_fn).call(this, key, null, false);
        (0, index_js_3.assertArgument)(fragment, "no matching function", "key", key);
        return fragment.name;
      }
      /**
       *  Returns true if %%key%% (a function selector, function name or
       *  function signature) is present in the ABI.
       *
       *  In the case of a function name, the name may be ambiguous, so
       *  accessing the [[FunctionFragment]] may require refinement.
       */
      hasFunction(key) {
        return !!__privateMethod(this, _getFunction, getFunction_fn).call(this, key, null, false);
      }
      /**
       *  Get the [[FunctionFragment]] for %%key%%, which may be a function
       *  selector, function name or function signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple functions match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single function in
       *  the ABI, this will throw.
       */
      getFunction(key, values) {
        return __privateMethod(this, _getFunction, getFunction_fn).call(this, key, values || null, true);
      }
      /**
       *  Iterate over all functions, calling %%callback%%, sorted by their name.
       */
      forEachFunction(callback) {
        const names = Array.from(__privateGet(this, _functions).keys());
        names.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(__privateGet(this, _functions).get(name), i);
        }
      }
      /**
       *  Get the event name for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       */
      getEventName(key) {
        const fragment = __privateMethod(this, _getEvent, getEvent_fn).call(this, key, null, false);
        (0, index_js_3.assertArgument)(fragment, "no matching event", "key", key);
        return fragment.name;
      }
      /**
       *  Returns true if %%key%% (an event topic hash, event name or
       *  event signature) is present in the ABI.
       *
       *  In the case of an event name, the name may be ambiguous, so
       *  accessing the [[EventFragment]] may require refinement.
       */
      hasEvent(key) {
        return !!__privateMethod(this, _getEvent, getEvent_fn).call(this, key, null, false);
      }
      /**
       *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple events match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single event in
       *  the ABI, this will throw.
       */
      getEvent(key, values) {
        return __privateMethod(this, _getEvent, getEvent_fn).call(this, key, values || null, true);
      }
      /**
       *  Iterate over all events, calling %%callback%%, sorted by their name.
       */
      forEachEvent(callback) {
        const names = Array.from(__privateGet(this, _events).keys());
        names.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(__privateGet(this, _events).get(name), i);
        }
      }
      /**
       *  Get the [[ErrorFragment]] for %%key%%, which may be an error
       *  selector, error name or error signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple errors match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single error in
       *  the ABI, this will throw.
       */
      getError(key, values) {
        if ((0, index_js_3.isHexString)(key)) {
          const selector = key.toLowerCase();
          if (BuiltinErrors[selector]) {
            return fragments_js_1.ErrorFragment.from(BuiltinErrors[selector].signature);
          }
          for (const fragment of __privateGet(this, _errors).values()) {
            if (selector === fragment.selector) {
              return fragment;
            }
          }
          return null;
        }
        if (key.indexOf("(") === -1) {
          const matching = [];
          for (const [name, fragment] of __privateGet(this, _errors)) {
            if (name.split(
              "("
              /* fix:) */
            )[0] === key) {
              matching.push(fragment);
            }
          }
          if (matching.length === 0) {
            if (key === "Error") {
              return fragments_js_1.ErrorFragment.from("error Error(string)");
            }
            if (key === "Panic") {
              return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
            }
            return null;
          } else if (matching.length > 1) {
            const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
            (0, index_js_3.assertArgument)(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
          }
          return matching[0];
        }
        key = fragments_js_1.ErrorFragment.from(key).format();
        if (key === "Error(string)") {
          return fragments_js_1.ErrorFragment.from("error Error(string)");
        }
        if (key === "Panic(uint256)") {
          return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
        }
        const result = __privateGet(this, _errors).get(key);
        if (result) {
          return result;
        }
        return null;
      }
      /**
       *  Iterate over all errors, calling %%callback%%, sorted by their name.
       */
      forEachError(callback) {
        const names = Array.from(__privateGet(this, _errors).keys());
        names.sort((a, b) => a.localeCompare(b));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(__privateGet(this, _errors).get(name), i);
        }
      }
      // Get the 4-byte selector used by Solidity to identify a function
      /*
      getSelector(fragment: ErrorFragment | FunctionFragment): string {
          if (typeof(fragment) === "string") {
              const matches: Array<Fragment> = [ ];
      
              try { matches.push(this.getFunction(fragment)); } catch (error) { }
              try { matches.push(this.getError(<string>fragment)); } catch (_) { }
      
              if (matches.length === 0) {
                  logger.throwArgumentError("unknown fragment", "key", fragment);
              } else if (matches.length > 1) {
                  logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
              }
      
              fragment = matches[0];
          }
      
          return dataSlice(id(fragment.format()), 0, 4);
      }
          */
      // Get the 32-byte topic hash used by Solidity to identify an event
      /*
      getEventTopic(fragment: EventFragment): string {
          //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
          return id(fragment.format());
      }
      */
      _decodeParams(params, data) {
        return __privateGet(this, _abiCoder).decode(params, data);
      }
      _encodeParams(params, values) {
        return __privateGet(this, _abiCoder).encode(params, values);
      }
      /**
       *  Encodes a ``tx.data`` object for deploying the Contract with
       *  the %%values%% as the constructor arguments.
       */
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified error (see [[getError]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */
      decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
          const f = this.getError(fragment);
          (0, index_js_3.assertArgument)(f, "unknown error", "fragment", fragment);
          fragment = f;
        }
        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));
      }
      /**
       *  Encodes the transaction revert data for a call result that
       *  reverted from the the Contract with the sepcified %%error%%
       *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getError(fragment);
          (0, index_js_3.assertArgument)(f, "unknown error", "fragment", fragment);
          fragment = f;
        }
        return (0, index_js_3.concat)([
          fragment.selector,
          this._encodeParams(fragment.inputs, values || [])
        ]);
      }
      /**
       *  Decodes the %%data%% from a transaction ``tx.data`` for
       *  the function specified (see [[getFunction]] for valid values
       *  for %%fragment%%).
       *
       *  Most developers should prefer the [[parseTransaction]] method
       *  instead, which will automatically detect the fragment.
       */
      decodeFunctionData(fragment, data) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));
      }
      /**
       *  Encodes the ``tx.data`` for a transaction that calls the function
       *  specified (see [[getFunction]] for valid values for %%fragment%%) with
       *  the %%values%%.
       */
      encodeFunctionData(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        return (0, index_js_3.concat)([
          fragment.selector,
          this._encodeParams(fragment.inputs, values || [])
        ]);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */
      decodeFunctionResult(fragment, data) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        let message = "invalid length for result data";
        const bytes = (0, index_js_3.getBytesCopy)(data);
        if (bytes.length % 32 === 0) {
          try {
            return __privateGet(this, _abiCoder).decode(fragment.outputs, bytes);
          } catch (error) {
            message = "could not decode result data";
          }
        }
        (0, index_js_3.assert)(false, message, "BAD_DATA", {
          value: (0, index_js_3.hexlify)(bytes),
          info: { method: fragment.name, signature: fragment.format() }
        });
      }
      makeError(_data, tx) {
        const data = (0, index_js_3.getBytes)(_data, "data");
        const error = abi_coder_js_1.AbiCoder.getBuiltinCallException("call", tx, data);
        const customPrefix = "execution reverted (unknown custom error)";
        if (error.message.startsWith(customPrefix)) {
          const selector = (0, index_js_3.hexlify)(data.slice(0, 4));
          const ef = this.getError(selector);
          if (ef) {
            try {
              const args = __privateGet(this, _abiCoder).decode(ef.inputs, data.slice(4));
              error.revert = {
                name: ef.name,
                signature: ef.format(),
                args
              };
              error.reason = error.revert.signature;
              error.message = `execution reverted: ${error.reason}`;
            } catch (e) {
              error.message = `execution reverted (coult not decode custom error)`;
            }
          }
        }
        const parsed = this.parseTransaction(tx);
        if (parsed) {
          error.invocation = {
            method: parsed.name,
            signature: parsed.signature,
            args: parsed.args
          };
        }
        return error;
      }
      /**
       *  Encodes the result data (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values
       *  for %%fragment%%) with %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */
      encodeFunctionResult(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
          fragment = f;
        }
        return (0, index_js_3.hexlify)(__privateGet(this, _abiCoder).encode(fragment.outputs, values || []));
      }
      /*
          spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
              const promises: Array<Promise<>> = [ ];
              const process = function(type: ParamType, value: any): any {
                  if (type.baseType === "array") {
                      return descend(type.child
                  }
                  if (type. === "address") {
                  }
              };
      
              const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
                  if (inputs.length !== values.length) { throw new Error("length mismatch"); }
                  
              };
      
              const result: Array<any> = [ ];
              values.forEach((value, index) => {
                  if (value == null) {
                      topics.push(null);
                  } else if (param.baseType === "array" || param.baseType === "tuple") {
                      logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                  } else if (Array.isArray(value)) {
                      topics.push(value.map((value) => encodeTopic(param, value)));
                  } else {
                      topics.push(encodeTopic(param, value));
                  }
              });
          }
      */
      // Create the filter for the event with search criteria (e.g. for eth_filterLog)
      encodeFilterTopics(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
          fragment = f;
        }
        (0, index_js_3.assert)(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
        const topics = [];
        if (!fragment.anonymous) {
          topics.push(fragment.topicHash);
        }
        const encodeTopic = (param, value) => {
          if (param.type === "string") {
            return (0, index_js_2.id)(value);
          } else if (param.type === "bytes") {
            return (0, index_js_1.keccak256)((0, index_js_3.hexlify)(value));
          }
          if (param.type === "bool" && typeof value === "boolean") {
            value = value ? "0x01" : "0x00";
          } else if (param.type.match(/^u?int/)) {
            value = (0, index_js_3.toBeHex)(value);
          } else if (param.type.match(/^bytes/)) {
            value = (0, index_js_3.zeroPadBytes)(value, 32);
          } else if (param.type === "address") {
            __privateGet(this, _abiCoder).encode(["address"], [value]);
          }
          return (0, index_js_3.zeroPadValue)((0, index_js_3.hexlify)(value), 32);
        };
        values.forEach((value, index) => {
          const param = fragment.inputs[index];
          if (!param.indexed) {
            (0, index_js_3.assertArgument)(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
            return;
          }
          if (value == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            (0, index_js_3.assertArgument)(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
          } else if (Array.isArray(value)) {
            topics.push(value.map((value2) => encodeTopic(param, value2)));
          } else {
            topics.push(encodeTopic(param, value));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(fragment, values) {
        if (typeof fragment === "string") {
          const f = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
          fragment = f;
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!fragment.anonymous) {
          topics.push(fragment.topicHash);
        }
        (0, index_js_3.assertArgument)(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
        fragment.inputs.forEach((param, index) => {
          const value = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push((0, index_js_2.id)(value));
            } else if (param.type === "bytes") {
              topics.push((0, index_js_1.keccak256)(value));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(__privateGet(this, _abiCoder).encode([param.type], [value]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value);
          }
        });
        return {
          data: __privateGet(this, _abiCoder).encode(dataTypes, dataValues),
          topics
        };
      }
      // Decode a filter for the event and the search criteria
      decodeEventLog(fragment, data, topics) {
        if (typeof fragment === "string") {
          const f = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
          fragment = f;
        }
        if (topics != null && !fragment.anonymous) {
          const eventTopic = fragment.topicHash;
          (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
          topics = topics.slice(1);
        }
        const indexed = [];
        const nonIndexed = [];
        const dynamic = [];
        fragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(fragments_js_1.ParamType.from({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        const resultIndexed = topics != null ? __privateGet(this, _abiCoder).decode(indexed, (0, index_js_3.concat)(topics)) : null;
        const resultNonIndexed = __privateGet(this, _abiCoder).decode(nonIndexed, data, true);
        const values = [];
        const keys = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        fragment.inputs.forEach((param, index) => {
          let value = null;
          if (param.indexed) {
            if (resultIndexed == null) {
              value = new Indexed(null);
            } else if (dynamic[index]) {
              value = new Indexed(resultIndexed[indexedIndex++]);
            } else {
              try {
                value = resultIndexed[indexedIndex++];
              } catch (error) {
                value = error;
              }
            }
          } else {
            try {
              value = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              value = error;
            }
          }
          values.push(value);
          keys.push(param.name || null);
        });
        return abstract_coder_js_1.Result.fromItems(values, keys);
      }
      /**
       *  Parses a transaction, finding the matching function and extracts
       *  the parameter values along with other useful function details.
       *
       *  If the matching function cannot be found, return null.
       */
      parseTransaction(tx) {
        const data = (0, index_js_3.getBytes)(tx.data, "tx.data");
        const value = (0, index_js_3.getBigInt)(tx.value != null ? tx.value : 0, "tx.value");
        const fragment = this.getFunction((0, index_js_3.hexlify)(data.slice(0, 4)));
        if (!fragment) {
          return null;
        }
        const args = __privateGet(this, _abiCoder).decode(fragment.inputs, data.slice(4));
        return new TransactionDescription(fragment, fragment.selector, args, value);
      }
      parseCallResult(data) {
        throw new Error("@TODO");
      }
      /**
       *  Parses a receipt log, finding the matching event and extracts
       *  the parameter values along with other useful event details.
       *
       *  If the matching event cannot be found, returns null.
       */
      parseLog(log) {
        const fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
      }
      /**
       *  Parses a revert data, finding the matching error and extracts
       *  the parameter values along with other useful error details.
       *
       *  If the matching error cannot be found, returns null.
       */
      parseError(data) {
        const hexData = (0, index_js_3.hexlify)(data);
        const fragment = this.getError((0, index_js_3.dataSlice)(hexData, 0, 4));
        if (!fragment) {
          return null;
        }
        const args = __privateGet(this, _abiCoder).decode(fragment.inputs, (0, index_js_3.dataSlice)(hexData, 4));
        return new ErrorDescription(fragment, fragment.selector, args);
      }
      /**
       *  Creates a new [[Interface]] from the ABI %%value%%.
       *
       *  The %%value%% may be provided as an existing [[Interface]] object,
       *  a JSON-encoded ABI or any Human-Readable ABI format.
       */
      static from(value) {
        if (value instanceof _Interface) {
          return value;
        }
        if (typeof value === "string") {
          return new _Interface(JSON.parse(value));
        }
        if (typeof value.formatJson === "function") {
          return new _Interface(value.formatJson());
        }
        if (typeof value.format === "function") {
          return new _Interface(value.format("json"));
        }
        return new _Interface(value);
      }
    };
    _errors = new WeakMap();
    _events = new WeakMap();
    _functions = new WeakMap();
    _abiCoder = new WeakMap();
    _getFunction = new WeakSet();
    getFunction_fn = function(key, values, forceUnique) {
      if ((0, index_js_3.isHexString)(key)) {
        const selector = key.toLowerCase();
        for (const fragment of __privateGet(this, _functions).values()) {
          if (selector === fragment.selector) {
            return fragment;
          }
        }
        return null;
      }
      if (key.indexOf("(") === -1) {
        const matching = [];
        for (const [name, fragment] of __privateGet(this, _functions)) {
          if (name.split(
            "("
            /* fix:) */
          )[0] === key) {
            matching.push(fragment);
          }
        }
        if (values) {
          const lastValue = values.length > 0 ? values[values.length - 1] : null;
          let valueLength = values.length;
          let allowOptions = true;
          if (typed_js_1.Typed.isTyped(lastValue) && lastValue.type === "overrides") {
            allowOptions = false;
            valueLength--;
          }
          for (let i = matching.length - 1; i >= 0; i--) {
            const inputs = matching[i].inputs.length;
            if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
              matching.splice(i, 1);
            }
          }
          for (let i = matching.length - 1; i >= 0; i--) {
            const inputs = matching[i].inputs;
            for (let j2 = 0; j2 < values.length; j2++) {
              if (!typed_js_1.Typed.isTyped(values[j2])) {
                continue;
              }
              if (j2 >= inputs.length) {
                if (values[j2].type === "overrides") {
                  continue;
                }
                matching.splice(i, 1);
                break;
              }
              if (values[j2].type !== inputs[j2].baseType) {
                matching.splice(i, 1);
                break;
              }
            }
          }
        }
        if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
          const lastArg = values[values.length - 1];
          if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
            matching.splice(0, 1);
          }
        }
        if (matching.length === 0) {
          return null;
        }
        if (matching.length > 1 && forceUnique) {
          const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
          (0, index_js_3.assertArgument)(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
        }
        return matching[0];
      }
      const result = __privateGet(this, _functions).get(fragments_js_1.FunctionFragment.from(key).format());
      if (result) {
        return result;
      }
      return null;
    };
    _getEvent = new WeakSet();
    getEvent_fn = function(key, values, forceUnique) {
      if ((0, index_js_3.isHexString)(key)) {
        const eventTopic = key.toLowerCase();
        for (const fragment of __privateGet(this, _events).values()) {
          if (eventTopic === fragment.topicHash) {
            return fragment;
          }
        }
        return null;
      }
      if (key.indexOf("(") === -1) {
        const matching = [];
        for (const [name, fragment] of __privateGet(this, _events)) {
          if (name.split(
            "("
            /* fix:) */
          )[0] === key) {
            matching.push(fragment);
          }
        }
        if (values) {
          for (let i = matching.length - 1; i >= 0; i--) {
            if (matching[i].inputs.length < values.length) {
              matching.splice(i, 1);
            }
          }
          for (let i = matching.length - 1; i >= 0; i--) {
            const inputs = matching[i].inputs;
            for (let j2 = 0; j2 < values.length; j2++) {
              if (!typed_js_1.Typed.isTyped(values[j2])) {
                continue;
              }
              if (values[j2].type !== inputs[j2].baseType) {
                matching.splice(i, 1);
                break;
              }
            }
          }
        }
        if (matching.length === 0) {
          return null;
        }
        if (matching.length > 1 && forceUnique) {
          const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
          (0, index_js_3.assertArgument)(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
        }
        return matching[0];
      }
      const result = __privateGet(this, _events).get(fragments_js_1.EventFragment.from(key).format());
      if (result) {
        return result;
      }
      return null;
    };
    var Interface = _Interface;
    exports.Interface = Interface;
  }
});

// node_modules/ethers/lib.commonjs/abi/index.js
var require_abi = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Typed = exports.Result = exports.TransactionDescription = exports.LogDescription = exports.ErrorDescription = exports.Interface = exports.Indexed = exports.checkResultErrors = exports.StructFragment = exports.ParamType = exports.NamedFragment = exports.FunctionFragment = exports.Fragment = exports.FallbackFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.encodeBytes32String = exports.decodeBytes32String = exports.AbiCoder = void 0;
    var abi_coder_js_1 = require_abi_coder();
    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function() {
      return abi_coder_js_1.AbiCoder;
    } });
    var bytes32_js_1 = require_bytes32();
    Object.defineProperty(exports, "decodeBytes32String", { enumerable: true, get: function() {
      return bytes32_js_1.decodeBytes32String;
    } });
    Object.defineProperty(exports, "encodeBytes32String", { enumerable: true, get: function() {
      return bytes32_js_1.encodeBytes32String;
    } });
    var fragments_js_1 = require_fragments();
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function() {
      return fragments_js_1.ConstructorFragment;
    } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function() {
      return fragments_js_1.ErrorFragment;
    } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function() {
      return fragments_js_1.EventFragment;
    } });
    Object.defineProperty(exports, "FallbackFragment", { enumerable: true, get: function() {
      return fragments_js_1.FallbackFragment;
    } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function() {
      return fragments_js_1.Fragment;
    } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function() {
      return fragments_js_1.FunctionFragment;
    } });
    Object.defineProperty(exports, "NamedFragment", { enumerable: true, get: function() {
      return fragments_js_1.NamedFragment;
    } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function() {
      return fragments_js_1.ParamType;
    } });
    Object.defineProperty(exports, "StructFragment", { enumerable: true, get: function() {
      return fragments_js_1.StructFragment;
    } });
    var interface_js_1 = require_interface();
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return interface_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function() {
      return interface_js_1.Indexed;
    } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function() {
      return interface_js_1.Interface;
    } });
    Object.defineProperty(exports, "ErrorDescription", { enumerable: true, get: function() {
      return interface_js_1.ErrorDescription;
    } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function() {
      return interface_js_1.LogDescription;
    } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function() {
      return interface_js_1.TransactionDescription;
    } });
    Object.defineProperty(exports, "Result", { enumerable: true, get: function() {
      return interface_js_1.Result;
    } });
    var typed_js_1 = require_typed();
    Object.defineProperty(exports, "Typed", { enumerable: true, get: function() {
      return typed_js_1.Typed;
    } });
  }
});

// node_modules/ethers/lib.commonjs/providers/provider.js
var require_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.Block = exports.copyRequest = exports.FeeData = void 0;
    var index_js_1 = require_utils3();
    var index_js_2 = require_transaction2();
    var BN_0 = BigInt(0);
    function getValue(value) {
      if (value == null) {
        return null;
      }
      return value;
    }
    function toJson(value) {
      if (value == null) {
        return null;
      }
      return value.toString();
    }
    var FeeData = class {
      /**
       *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
       *  %%maxPriorityFeePerGas%%.
       */
      constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
        /**
         *  The gas price for legacy networks.
         */
        __publicField(this, "gasPrice");
        /**
         *  The maximum fee to pay per gas.
         *
         *  The base fee per gas is defined by the network and based on
         *  congestion, increasing the cost during times of heavy load
         *  and lowering when less busy.
         *
         *  The actual fee per gas will be the base fee for the block
         *  and the priority fee, up to the max fee per gas.
         *
         *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
         */
        __publicField(this, "maxFeePerGas");
        /**
         *  The additional amout to pay per gas to encourage a validator
         *  to include the transaction.
         *
         *  The purpose of this is to compensate the validator for the
         *  adjusted risk for including a given transaction.
         *
         *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
         */
        __publicField(this, "maxPriorityFeePerGas");
        (0, index_js_1.defineProperties)(this, {
          gasPrice: getValue(gasPrice),
          maxFeePerGas: getValue(maxFeePerGas),
          maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)
        });
      }
      /**
       *  Returns a JSON-friendly value.
       */
      toJSON() {
        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
        return {
          _type: "FeeData",
          gasPrice: toJson(gasPrice),
          maxFeePerGas: toJson(maxFeePerGas),
          maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)
        };
      }
    };
    exports.FeeData = FeeData;
    function copyRequest(req) {
      const result = {};
      if (req.to) {
        result.to = req.to;
      }
      if (req.from) {
        result.from = req.from;
      }
      if (req.data) {
        result.data = (0, index_js_1.hexlify)(req.data);
      }
      const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
      for (const key of bigIntKeys) {
        if (!(key in req) || req[key] == null) {
          continue;
        }
        result[key] = (0, index_js_1.getBigInt)(req[key], `request.${key}`);
      }
      const numberKeys = "type,nonce".split(/,/);
      for (const key of numberKeys) {
        if (!(key in req) || req[key] == null) {
          continue;
        }
        result[key] = (0, index_js_1.getNumber)(req[key], `request.${key}`);
      }
      if (req.accessList) {
        result.accessList = (0, index_js_2.accessListify)(req.accessList);
      }
      if ("blockTag" in req) {
        result.blockTag = req.blockTag;
      }
      if ("enableCcipRead" in req) {
        result.enableCcipRead = !!req.enableCcipRead;
      }
      if ("customData" in req) {
        result.customData = req.customData;
      }
      if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
        result.blobVersionedHashes = req.blobVersionedHashes.slice();
      }
      if ("kzg" in req) {
        result.kzg = req.kzg;
      }
      if ("blobs" in req && req.blobs) {
        result.blobs = req.blobs.map((b) => {
          if ((0, index_js_1.isBytesLike)(b)) {
            return (0, index_js_1.hexlify)(b);
          }
          return Object.assign({}, b);
        });
      }
      return result;
    }
    exports.copyRequest = copyRequest;
    var _transactions;
    var Block = class {
      /**
       *  Create a new **Block** object.
       *
       *  This should generally not be necessary as the unless implementing a
       *  low-level library.
       */
      constructor(block, provider) {
        /**
         *  The provider connected to the block used to fetch additional details
         *  if necessary.
         */
        __publicField(this, "provider");
        /**
         *  The block number, sometimes called the block height. This is a
         *  sequential number that is one higher than the parent block.
         */
        __publicField(this, "number");
        /**
         *  The block hash.
         *
         *  This hash includes all properties, so can be safely used to identify
         *  an exact set of block properties.
         */
        __publicField(this, "hash");
        /**
         *  The timestamp for this block, which is the number of seconds since
         *  epoch that this block was included.
         */
        __publicField(this, "timestamp");
        /**
         *  The block hash of the parent block.
         */
        __publicField(this, "parentHash");
        /**
         *  The hash tree root of the parent beacon block for the given
         *  execution block. See [[link-eip-4788]].
         */
        __publicField(this, "parentBeaconBlockRoot");
        /**
         *  The nonce.
         *
         *  On legacy networks, this is the random number inserted which
         *  permitted the difficulty target to be reached.
         */
        __publicField(this, "nonce");
        /**
         *  The difficulty target.
         *
         *  On legacy networks, this is the proof-of-work target required
         *  for a block to meet the protocol rules to be included.
         *
         *  On modern networks, this is a random number arrived at using
         *  randao.  @TODO: Find links?
         */
        __publicField(this, "difficulty");
        /**
         *  The total gas limit for this block.
         */
        __publicField(this, "gasLimit");
        /**
         *  The total gas used in this block.
         */
        __publicField(this, "gasUsed");
        /**
         *  The root hash for the global state after applying changes
         *  in this block.
         */
        __publicField(this, "stateRoot");
        /**
         *  The hash of the transaction receipts trie.
         */
        __publicField(this, "receiptsRoot");
        /**
         *  The total amount of blob gas consumed by the transactions
         *  within the block. See [[link-eip-4844]].
         */
        __publicField(this, "blobGasUsed");
        /**
         *  The running total of blob gas consumed in excess of the
         *  target, prior to the block. See [[link-eip-4844]].
         */
        __publicField(this, "excessBlobGas");
        /**
         *  The miner coinbase address, wihch receives any subsidies for
         *  including this block.
         */
        __publicField(this, "miner");
        /**
         *  The latest RANDAO mix of the post beacon state of
         *  the previous block.
         */
        __publicField(this, "prevRandao");
        /**
         *  Any extra data the validator wished to include.
         */
        __publicField(this, "extraData");
        /**
         *  The base fee per gas that all transactions in this block were
         *  charged.
         *
         *  This adjusts after each block, depending on how congested the network
         *  is.
         */
        __publicField(this, "baseFeePerGas");
        __privateAdd(this, _transactions, void 0);
        __privateSet(this, _transactions, block.transactions.map((tx) => {
          if (typeof tx !== "string") {
            return new TransactionResponse(tx, provider);
          }
          return tx;
        }));
        (0, index_js_1.defineProperties)(this, {
          provider,
          hash: getValue(block.hash),
          number: block.number,
          timestamp: block.timestamp,
          parentHash: block.parentHash,
          parentBeaconBlockRoot: block.parentBeaconBlockRoot,
          nonce: block.nonce,
          difficulty: block.difficulty,
          gasLimit: block.gasLimit,
          gasUsed: block.gasUsed,
          blobGasUsed: block.blobGasUsed,
          excessBlobGas: block.excessBlobGas,
          miner: block.miner,
          prevRandao: getValue(block.prevRandao),
          extraData: block.extraData,
          baseFeePerGas: getValue(block.baseFeePerGas),
          stateRoot: block.stateRoot,
          receiptsRoot: block.receiptsRoot
        });
      }
      /**
       *  Returns the list of transaction hashes, in the order
       *  they were executed within the block.
       */
      get transactions() {
        return __privateGet(this, _transactions).map((tx) => {
          if (typeof tx === "string") {
            return tx;
          }
          return tx.hash;
        });
      }
      /**
       *  Returns the complete transactions, in the order they
       *  were executed within the block.
       *
       *  This is only available for blocks which prefetched
       *  transactions, by passing ``true`` to %%prefetchTxs%%
       *  into [[Provider-getBlock]].
       */
      get prefetchedTransactions() {
        const txs = __privateGet(this, _transactions).slice();
        if (txs.length === 0) {
          return [];
        }
        (0, index_js_1.assert)(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
          operation: "transactionResponses()"
        });
        return txs;
      }
      /**
       *  Returns a JSON-friendly value.
       */
      toJSON() {
        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, prevRandao, nonce, number, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;
        return {
          _type: "Block",
          baseFeePerGas: toJson(baseFeePerGas),
          difficulty: toJson(difficulty),
          extraData,
          gasLimit: toJson(gasLimit),
          gasUsed: toJson(gasUsed),
          blobGasUsed: toJson(this.blobGasUsed),
          excessBlobGas: toJson(this.excessBlobGas),
          hash,
          miner,
          prevRandao,
          nonce,
          number,
          parentHash,
          timestamp,
          parentBeaconBlockRoot,
          stateRoot,
          receiptsRoot,
          transactions
        };
      }
      [Symbol.iterator]() {
        let index = 0;
        const txs = this.transactions;
        return {
          next: () => {
            if (index < this.length) {
              return {
                value: txs[index++],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The number of transactions in this block.
       */
      get length() {
        return __privateGet(this, _transactions).length;
      }
      /**
       *  The [[link-js-date]] this block was included at.
       */
      get date() {
        if (this.timestamp == null) {
          return null;
        }
        return new Date(this.timestamp * 1e3);
      }
      /**
       *  Get the transaction at %%indexe%% within this block.
       */
      async getTransaction(indexOrHash) {
        let tx = void 0;
        if (typeof indexOrHash === "number") {
          tx = __privateGet(this, _transactions)[indexOrHash];
        } else {
          const hash = indexOrHash.toLowerCase();
          for (const v of __privateGet(this, _transactions)) {
            if (typeof v === "string") {
              if (v !== hash) {
                continue;
              }
              tx = v;
              break;
            } else {
              if (v.hash === hash) {
                continue;
              }
              tx = v;
              break;
            }
          }
        }
        if (tx == null) {
          throw new Error("no such tx");
        }
        if (typeof tx === "string") {
          return await this.provider.getTransaction(tx);
        } else {
          return tx;
        }
      }
      /**
       *  If a **Block** was fetched with a request to include the transactions
       *  this will allow synchronous access to those transactions.
       *
       *  If the transactions were not prefetched, this will throw.
       */
      getPrefetchedTransaction(indexOrHash) {
        const txs = this.prefetchedTransactions;
        if (typeof indexOrHash === "number") {
          return txs[indexOrHash];
        }
        indexOrHash = indexOrHash.toLowerCase();
        for (const tx of txs) {
          if (tx.hash === indexOrHash) {
            return tx;
          }
        }
        (0, index_js_1.assertArgument)(false, "no matching transaction", "indexOrHash", indexOrHash);
      }
      /**
       *  Returns true if this block been mined. This provides a type guard
       *  for all properties on a [[MinedBlock]].
       */
      isMined() {
        return !!this.hash;
      }
      /**
       *  Returns true if this block is an [[link-eip-2930]] block.
       */
      isLondon() {
        return !!this.baseFeePerGas;
      }
      /**
       *  @_ignore:
       */
      orphanedEvent() {
        if (!this.isMined()) {
          throw new Error("");
        }
        return createOrphanedBlockFilter(this);
      }
    };
    _transactions = new WeakMap();
    exports.Block = Block;
    var Log = class {
      /**
       *  @_ignore:
       */
      constructor(log, provider) {
        /**
         *  The provider connected to the log used to fetch additional details
         *  if necessary.
         */
        __publicField(this, "provider");
        /**
         *  The transaction hash of the transaction this log occurred in. Use the
         *  [[Log-getTransaction]] to get the [[TransactionResponse]].
         */
        __publicField(this, "transactionHash");
        /**
         *  The block hash of the block this log occurred in. Use the
         *  [[Log-getBlock]] to get the [[Block]].
         */
        __publicField(this, "blockHash");
        /**
         *  The block number of the block this log occurred in. It is preferred
         *  to use the [[Block-hash]] when fetching the related [[Block]],
         *  since in the case of an orphaned block, the block at that height may
         *  have changed.
         */
        __publicField(this, "blockNumber");
        /**
         *  If the **Log** represents a block that was removed due to an orphaned
         *  block, this will be true.
         *
         *  This can only happen within an orphan event listener.
         */
        __publicField(this, "removed");
        /**
         *  The address of the contract that emitted this log.
         */
        __publicField(this, "address");
        /**
         *  The data included in this log when it was emitted.
         */
        __publicField(this, "data");
        /**
         *  The indexed topics included in this log when it was emitted.
         *
         *  All topics are included in the bloom filters, so they can be
         *  efficiently filtered using the [[Provider-getLogs]] method.
         */
        __publicField(this, "topics");
        /**
         *  The index within the block this log occurred at. This is generally
         *  not useful to developers, but can be used with the various roots
         *  to proof inclusion within a block.
         */
        __publicField(this, "index");
        /**
         *  The index within the transaction of this log.
         */
        __publicField(this, "transactionIndex");
        this.provider = provider;
        const topics = Object.freeze(log.topics.slice());
        (0, index_js_1.defineProperties)(this, {
          transactionHash: log.transactionHash,
          blockHash: log.blockHash,
          blockNumber: log.blockNumber,
          removed: log.removed,
          address: log.address,
          data: log.data,
          topics,
          index: log.index,
          transactionIndex: log.transactionIndex
        });
      }
      /**
       *  Returns a JSON-compatible object.
       */
      toJSON() {
        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
        return {
          _type: "log",
          address,
          blockHash,
          blockNumber,
          data,
          index,
          removed,
          topics,
          transactionHash,
          transactionIndex
        };
      }
      /**
       *  Returns the block that this log occurred in.
       */
      async getBlock() {
        const block = await this.provider.getBlock(this.blockHash);
        (0, index_js_1.assert)(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
        return block;
      }
      /**
       *  Returns the transaction that this log occurred in.
       */
      async getTransaction() {
        const tx = await this.provider.getTransaction(this.transactionHash);
        (0, index_js_1.assert)(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
        return tx;
      }
      /**
       *  Returns the transaction receipt fot the transaction that this
       *  log occurred in.
       */
      async getTransactionReceipt() {
        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
        (0, index_js_1.assert)(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
        return receipt;
      }
      /**
       *  @_ignore:
       */
      removedEvent() {
        return createRemovedLogFilter(this);
      }
    };
    exports.Log = Log;
    var _logs;
    var TransactionReceipt = class {
      /**
       *  @_ignore:
       */
      constructor(tx, provider) {
        /**
         *  The provider connected to the log used to fetch additional details
         *  if necessary.
         */
        __publicField(this, "provider");
        /**
         *  The address the transaction was sent to.
         */
        __publicField(this, "to");
        /**
         *  The sender of the transaction.
         */
        __publicField(this, "from");
        /**
         *  The address of the contract if the transaction was directly
         *  responsible for deploying one.
         *
         *  This is non-null **only** if the ``to`` is empty and the ``data``
         *  was successfully executed as initcode.
         */
        __publicField(this, "contractAddress");
        /**
         *  The transaction hash.
         */
        __publicField(this, "hash");
        /**
         *  The index of this transaction within the block transactions.
         */
        __publicField(this, "index");
        /**
         *  The block hash of the [[Block]] this transaction was included in.
         */
        __publicField(this, "blockHash");
        /**
         *  The block number of the [[Block]] this transaction was included in.
         */
        __publicField(this, "blockNumber");
        /**
         *  The bloom filter bytes that represent all logs that occurred within
         *  this transaction. This is generally not useful for most developers,
         *  but can be used to validate the included logs.
         */
        __publicField(this, "logsBloom");
        /**
         *  The actual amount of gas used by this transaction.
         *
         *  When creating a transaction, the amount of gas that will be used can
         *  only be approximated, but the sender must pay the gas fee for the
         *  entire gas limit. After the transaction, the difference is refunded.
         */
        __publicField(this, "gasUsed");
        /**
         *  The gas used for BLObs. See [[link-eip-4844]].
         */
        __publicField(this, "blobGasUsed");
        /**
         *  The amount of gas used by all transactions within the block for this
         *  and all transactions with a lower ``index``.
         *
         *  This is generally not useful for developers but can be used to
         *  validate certain aspects of execution.
         */
        __publicField(this, "cumulativeGasUsed");
        /**
         *  The actual gas price used during execution.
         *
         *  Due to the complexity of [[link-eip-1559]] this value can only
         *  be caluclated after the transaction has been mined, snce the base
         *  fee is protocol-enforced.
         */
        __publicField(this, "gasPrice");
        /**
         *  The price paid per BLOB in gas. See [[link-eip-4844]].
         */
        __publicField(this, "blobGasPrice");
        /**
         *  The [[link-eip-2718]] transaction type.
         */
        __publicField(this, "type");
        //readonly byzantium!: boolean;
        /**
         *  The status of this transaction, indicating success (i.e. ``1``) or
         *  a revert (i.e. ``0``).
         *
         *  This is available in post-byzantium blocks, but some backends may
         *  backfill this value.
         */
        __publicField(this, "status");
        /**
         *  The root hash of this transaction.
         *
         *  This is no present and was only included in pre-byzantium blocks, but
         *  could be used to validate certain parts of the receipt.
         */
        __publicField(this, "root");
        __privateAdd(this, _logs, void 0);
        __privateSet(this, _logs, Object.freeze(tx.logs.map((log) => {
          return new Log(log, provider);
        })));
        let gasPrice = BN_0;
        if (tx.effectiveGasPrice != null) {
          gasPrice = tx.effectiveGasPrice;
        } else if (tx.gasPrice != null) {
          gasPrice = tx.gasPrice;
        }
        (0, index_js_1.defineProperties)(this, {
          provider,
          to: tx.to,
          from: tx.from,
          contractAddress: tx.contractAddress,
          hash: tx.hash,
          index: tx.index,
          blockHash: tx.blockHash,
          blockNumber: tx.blockNumber,
          logsBloom: tx.logsBloom,
          gasUsed: tx.gasUsed,
          cumulativeGasUsed: tx.cumulativeGasUsed,
          blobGasUsed: tx.blobGasUsed,
          gasPrice,
          blobGasPrice: tx.blobGasPrice,
          type: tx.type,
          //byzantium: tx.byzantium,
          status: tx.status,
          root: tx.root
        });
      }
      /**
       *  The logs for this transaction.
       */
      get logs() {
        return __privateGet(this, _logs);
      }
      /**
       *  Returns a JSON-compatible representation.
       */
      toJSON() {
        const {
          to,
          from,
          contractAddress,
          hash,
          index,
          blockHash,
          blockNumber,
          logsBloom,
          logs,
          //byzantium, 
          status: status2,
          root
        } = this;
        return {
          _type: "TransactionReceipt",
          blockHash,
          blockNumber,
          //byzantium, 
          contractAddress,
          cumulativeGasUsed: toJson(this.cumulativeGasUsed),
          from,
          gasPrice: toJson(this.gasPrice),
          blobGasUsed: toJson(this.blobGasUsed),
          blobGasPrice: toJson(this.blobGasPrice),
          gasUsed: toJson(this.gasUsed),
          hash,
          index,
          logs,
          logsBloom,
          root,
          status: status2,
          to
        };
      }
      /**
       *  @_ignore:
       */
      get length() {
        return this.logs.length;
      }
      [Symbol.iterator]() {
        let index = 0;
        return {
          next: () => {
            if (index < this.length) {
              return { value: this.logs[index++], done: false };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The total fee for this transaction, in wei.
       */
      get fee() {
        return this.gasUsed * this.gasPrice;
      }
      /**
       *  Resolves to the block this transaction occurred in.
       */
      async getBlock() {
        const block = await this.provider.getBlock(this.blockHash);
        if (block == null) {
          throw new Error("TODO");
        }
        return block;
      }
      /**
       *  Resolves to the transaction this transaction occurred in.
       */
      async getTransaction() {
        const tx = await this.provider.getTransaction(this.hash);
        if (tx == null) {
          throw new Error("TODO");
        }
        return tx;
      }
      /**
       *  Resolves to the return value of the execution of this transaction.
       *
       *  Support for this feature is limited, as it requires an archive node
       *  with the ``debug_`` or ``trace_`` API enabled.
       */
      async getResult() {
        return await this.provider.getTransactionResult(this.hash);
      }
      /**
       *  Resolves to the number of confirmations this transaction has.
       */
      async confirmations() {
        return await this.provider.getBlockNumber() - this.blockNumber + 1;
      }
      /**
       *  @_ignore:
       */
      removedEvent() {
        return createRemovedTransactionFilter(this);
      }
      /**
       *  @_ignore:
       */
      reorderedEvent(other) {
        (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
        return createReorderedTransactionFilter(this, other);
      }
    };
    _logs = new WeakMap();
    exports.TransactionReceipt = TransactionReceipt;
    var _startBlock;
    var _TransactionResponse = class _TransactionResponse {
      /**
       *  @_ignore:
       */
      constructor(tx, provider) {
        /**
         *  The provider this is connected to, which will influence how its
         *  methods will resolve its async inspection methods.
         */
        __publicField(this, "provider");
        /**
         *  The block number of the block that this transaction was included in.
         *
         *  This is ``null`` for pending transactions.
         */
        __publicField(this, "blockNumber");
        /**
         *  The blockHash of the block that this transaction was included in.
         *
         *  This is ``null`` for pending transactions.
         */
        __publicField(this, "blockHash");
        /**
         *  The index within the block that this transaction resides at.
         */
        __publicField(this, "index");
        /**
         *  The transaction hash.
         */
        __publicField(this, "hash");
        /**
         *  The [[link-eip-2718]] transaction envelope type. This is
         *  ``0`` for legacy transactions types.
         */
        __publicField(this, "type");
        /**
         *  The receiver of this transaction.
         *
         *  If ``null``, then the transaction is an initcode transaction.
         *  This means the result of executing the [[data]] will be deployed
         *  as a new contract on chain (assuming it does not revert) and the
         *  address may be computed using [[getCreateAddress]].
         */
        __publicField(this, "to");
        /**
         *  The sender of this transaction. It is implicitly computed
         *  from the transaction pre-image hash (as the digest) and the
         *  [[signature]] using ecrecover.
         */
        __publicField(this, "from");
        /**
         *  The nonce, which is used to prevent replay attacks and offer
         *  a method to ensure transactions from a given sender are explicitly
         *  ordered.
         *
         *  When sending a transaction, this must be equal to the number of
         *  transactions ever sent by [[from]].
         */
        __publicField(this, "nonce");
        /**
         *  The maximum units of gas this transaction can consume. If execution
         *  exceeds this, the entries transaction is reverted and the sender
         *  is charged for the full amount, despite not state changes being made.
         */
        __publicField(this, "gasLimit");
        /**
         *  The gas price can have various values, depending on the network.
         *
         *  In modern networks, for transactions that are included this is
         *  the //effective gas price// (the fee per gas that was actually
         *  charged), while for transactions that have not been included yet
         *  is the [[maxFeePerGas]].
         *
         *  For legacy transactions, or transactions on legacy networks, this
         *  is the fee that will be charged per unit of gas the transaction
         *  consumes.
         */
        __publicField(this, "gasPrice");
        /**
         *  The maximum priority fee (per unit of gas) to allow a
         *  validator to charge the sender. This is inclusive of the
         *  [[maxFeeFeePerGas]].
         */
        __publicField(this, "maxPriorityFeePerGas");
        /**
         *  The maximum fee (per unit of gas) to allow this transaction
         *  to charge the sender.
         */
        __publicField(this, "maxFeePerGas");
        /**
         *  The [[link-eip-4844]] max fee per BLOb gas.
         */
        __publicField(this, "maxFeePerBlobGas");
        /**
         *  The data.
         */
        __publicField(this, "data");
        /**
         *  The value, in wei. Use [[formatEther]] to format this value
         *  as ether.
         */
        __publicField(this, "value");
        /**
         *  The chain ID.
         */
        __publicField(this, "chainId");
        /**
         *  The signature.
         */
        __publicField(this, "signature");
        /**
         *  The [[link-eip-2930]] access list for transaction types that
         *  support it, otherwise ``null``.
         */
        __publicField(this, "accessList");
        /**
         *  The [[link-eip-4844]] BLOb versioned hashes.
         */
        __publicField(this, "blobVersionedHashes");
        __privateAdd(this, _startBlock, void 0);
        this.provider = provider;
        this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
        this.blockHash = tx.blockHash != null ? tx.blockHash : null;
        this.hash = tx.hash;
        this.index = tx.index;
        this.type = tx.type;
        this.from = tx.from;
        this.to = tx.to || null;
        this.gasLimit = tx.gasLimit;
        this.nonce = tx.nonce;
        this.data = tx.data;
        this.value = tx.value;
        this.gasPrice = tx.gasPrice;
        this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
        this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
        this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
        this.chainId = tx.chainId;
        this.signature = tx.signature;
        this.accessList = tx.accessList != null ? tx.accessList : null;
        this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
        __privateSet(this, _startBlock, -1);
      }
      /**
       *  Returns a JSON-compatible representation of this transaction.
       */
      toJSON() {
        const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;
        return {
          _type: "TransactionResponse",
          accessList,
          blockNumber,
          blockHash,
          blobVersionedHashes,
          chainId: toJson(this.chainId),
          data,
          from,
          gasLimit: toJson(this.gasLimit),
          gasPrice: toJson(this.gasPrice),
          hash,
          maxFeePerGas: toJson(this.maxFeePerGas),
          maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
          maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
          nonce,
          signature,
          to,
          index,
          type,
          value: toJson(this.value)
        };
      }
      /**
       *  Resolves to the Block that this transaction was included in.
       *
       *  This will return null if the transaction has not been included yet.
       */
      async getBlock() {
        let blockNumber = this.blockNumber;
        if (blockNumber == null) {
          const tx = await this.getTransaction();
          if (tx) {
            blockNumber = tx.blockNumber;
          }
        }
        if (blockNumber == null) {
          return null;
        }
        const block = this.provider.getBlock(blockNumber);
        if (block == null) {
          throw new Error("TODO");
        }
        return block;
      }
      /**
       *  Resolves to this transaction being re-requested from the
       *  provider. This can be used if you have an unmined transaction
       *  and wish to get an up-to-date populated instance.
       */
      async getTransaction() {
        return this.provider.getTransaction(this.hash);
      }
      /**
       *  Resolve to the number of confirmations this transaction has.
       */
      async confirmations() {
        if (this.blockNumber == null) {
          const { tx, blockNumber: blockNumber2 } = await (0, index_js_1.resolveProperties)({
            tx: this.getTransaction(),
            blockNumber: this.provider.getBlockNumber()
          });
          if (tx == null || tx.blockNumber == null) {
            return 0;
          }
          return blockNumber2 - tx.blockNumber + 1;
        }
        const blockNumber = await this.provider.getBlockNumber();
        return blockNumber - this.blockNumber + 1;
      }
      /**
       *  Resolves once this transaction has been mined and has
       *  %%confirms%% blocks including it (default: ``1``) with an
       *  optional %%timeout%%.
       *
       *  This can resolve to ``null`` only if %%confirms%% is ``0``
       *  and the transaction has not been mined, otherwise this will
       *  wait until enough confirmations have completed.
       */
      async wait(_confirms, _timeout) {
        const confirms = _confirms == null ? 1 : _confirms;
        const timeout = _timeout == null ? 0 : _timeout;
        let startBlock = __privateGet(this, _startBlock);
        let nextScan = -1;
        let stopScanning = startBlock === -1 ? true : false;
        const checkReplacement = async () => {
          if (stopScanning) {
            return null;
          }
          const { blockNumber, nonce } = await (0, index_js_1.resolveProperties)({
            blockNumber: this.provider.getBlockNumber(),
            nonce: this.provider.getTransactionCount(this.from)
          });
          if (nonce < this.nonce) {
            startBlock = blockNumber;
            return;
          }
          if (stopScanning) {
            return null;
          }
          const mined = await this.getTransaction();
          if (mined && mined.blockNumber != null) {
            return;
          }
          if (nextScan === -1) {
            nextScan = startBlock - 3;
            if (nextScan < __privateGet(this, _startBlock)) {
              nextScan = __privateGet(this, _startBlock);
            }
          }
          while (nextScan <= blockNumber) {
            if (stopScanning) {
              return null;
            }
            const block = await this.provider.getBlock(nextScan, true);
            if (block == null) {
              return;
            }
            for (const hash of block) {
              if (hash === this.hash) {
                return;
              }
            }
            for (let i = 0; i < block.length; i++) {
              const tx = await block.getTransaction(i);
              if (tx.from === this.from && tx.nonce === this.nonce) {
                if (stopScanning) {
                  return null;
                }
                const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
                if (receipt2 == null) {
                  return;
                }
                if (blockNumber - receipt2.blockNumber + 1 < confirms) {
                  return;
                }
                let reason = "replaced";
                if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
                  reason = "repriced";
                } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_0) {
                  reason = "cancelled";
                }
                (0, index_js_1.assert)(false, "transaction was replaced", "TRANSACTION_REPLACED", {
                  cancelled: reason === "replaced" || reason === "cancelled",
                  reason,
                  replacement: tx.replaceableTransaction(startBlock),
                  hash: tx.hash,
                  receipt: receipt2
                });
              }
            }
            nextScan++;
          }
          return;
        };
        const checkReceipt = (receipt2) => {
          if (receipt2 == null || receipt2.status !== 0) {
            return receipt2;
          }
          (0, index_js_1.assert)(false, "transaction execution reverted", "CALL_EXCEPTION", {
            action: "sendTransaction",
            data: null,
            reason: null,
            invocation: null,
            revert: null,
            transaction: {
              to: receipt2.to,
              from: receipt2.from,
              data: ""
              // @TODO: in v7, split out sendTransaction properties
            },
            receipt: receipt2
          });
        };
        const receipt = await this.provider.getTransactionReceipt(this.hash);
        if (confirms === 0) {
          return checkReceipt(receipt);
        }
        if (receipt) {
          if (await receipt.confirmations() >= confirms) {
            return checkReceipt(receipt);
          }
        } else {
          await checkReplacement();
          if (confirms === 0) {
            return null;
          }
        }
        const waiter = new Promise((resolve, reject) => {
          const cancellers = [];
          const cancel = () => {
            cancellers.forEach((c) => c());
          };
          cancellers.push(() => {
            stopScanning = true;
          });
          if (timeout > 0) {
            const timer = setTimeout(() => {
              cancel();
              reject((0, index_js_1.makeError)("wait for transaction timeout", "TIMEOUT"));
            }, timeout);
            cancellers.push(() => {
              clearTimeout(timer);
            });
          }
          const txListener = async (receipt2) => {
            if (await receipt2.confirmations() >= confirms) {
              cancel();
              try {
                resolve(checkReceipt(receipt2));
              } catch (error) {
                reject(error);
              }
            }
          };
          cancellers.push(() => {
            this.provider.off(this.hash, txListener);
          });
          this.provider.on(this.hash, txListener);
          if (startBlock >= 0) {
            const replaceListener = async () => {
              try {
                await checkReplacement();
              } catch (error) {
                if ((0, index_js_1.isError)(error, "TRANSACTION_REPLACED")) {
                  cancel();
                  reject(error);
                  return;
                }
              }
              if (!stopScanning) {
                this.provider.once("block", replaceListener);
              }
            };
            cancellers.push(() => {
              this.provider.off("block", replaceListener);
            });
            this.provider.once("block", replaceListener);
          }
        });
        return await waiter;
      }
      /**
       *  Returns ``true`` if this transaction has been included.
       *
       *  This is effective only as of the time the TransactionResponse
       *  was instantiated. To get up-to-date information, use
       *  [[getTransaction]].
       *
       *  This provides a Type Guard that this transaction will have
       *  non-null property values for properties that are null for
       *  unmined transactions.
       */
      isMined() {
        return this.blockHash != null;
      }
      /**
       *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
       *  transaction.
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isLegacy() {
        return this.type === 0;
      }
      /**
       *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
       *  transaction. See [[link-eip-2070]].
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isBerlin() {
        return this.type === 1;
      }
      /**
       *  Returns true if the transaction is a London (i.e. ``type == 2``)
       *  transaction. See [[link-eip-1559]].
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isLondon() {
        return this.type === 2;
      }
      /**
       *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
       *  transaction. See [[link-eip-4844]].
       */
      isCancun() {
        return this.type === 3;
      }
      /**
       *  Returns a filter which can be used to listen for orphan events
       *  that evict this transaction.
       */
      removedEvent() {
        (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        return createRemovedTransactionFilter(this);
      }
      /**
       *  Returns a filter which can be used to listen for orphan events
       *  that re-order this event against %%other%%.
       */
      reorderedEvent(other) {
        (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        return createReorderedTransactionFilter(this, other);
      }
      /**
       *  Returns a new TransactionResponse instance which has the ability to
       *  detect (and throw an error) if the transaction is replaced, which
       *  will begin scanning at %%startBlock%%.
       *
       *  This should generally not be used by developers and is intended
       *  primarily for internal use. Setting an incorrect %%startBlock%% can
       *  have devastating performance consequences if used incorrectly.
       */
      replaceableTransaction(startBlock) {
        (0, index_js_1.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
        const tx = new _TransactionResponse(this, this.provider);
        __privateSet(tx, _startBlock, startBlock);
        return tx;
      }
    };
    _startBlock = new WeakMap();
    var TransactionResponse = _TransactionResponse;
    exports.TransactionResponse = TransactionResponse;
    function createOrphanedBlockFilter(block) {
      return { orphan: "drop-block", hash: block.hash, number: block.number };
    }
    function createReorderedTransactionFilter(tx, other) {
      return { orphan: "reorder-transaction", tx, other };
    }
    function createRemovedTransactionFilter(tx) {
      return { orphan: "drop-transaction", tx };
    }
    function createRemovedLogFilter(log) {
      return { orphan: "drop-log", log: {
        transactionHash: log.transactionHash,
        blockHash: log.blockHash,
        blockNumber: log.blockNumber,
        address: log.address,
        data: log.data,
        topics: Object.freeze(log.topics.slice()),
        index: log.index
      } };
    }
  }
});

// node_modules/ethers/lib.commonjs/contract/wrappers.js
var require_wrappers = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/wrappers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContractEventPayload = exports.ContractUnknownEventPayload = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.UndecodedEventLog = exports.EventLog = void 0;
    var provider_js_1 = require_provider();
    var index_js_1 = require_utils3();
    var EventLog = class extends provider_js_1.Log {
      /**
       * @_ignore:
       */
      constructor(log, iface, fragment) {
        super(log, log.provider);
        /**
         *  The Contract Interface.
         */
        __publicField(this, "interface");
        /**
         *  The matching event.
         */
        __publicField(this, "fragment");
        /**
         *  The parsed arguments passed to the event by ``emit``.
         */
        __publicField(this, "args");
        const args = iface.decodeEventLog(fragment, log.data, log.topics);
        (0, index_js_1.defineProperties)(this, { args, fragment, interface: iface });
      }
      /**
       *  The name of the event.
       */
      get eventName() {
        return this.fragment.name;
      }
      /**
       *  The signature of the event.
       */
      get eventSignature() {
        return this.fragment.format();
      }
    };
    exports.EventLog = EventLog;
    var UndecodedEventLog = class extends provider_js_1.Log {
      /**
       * @_ignore:
       */
      constructor(log, error) {
        super(log, log.provider);
        /**
         *  The error encounted when trying to decode the log.
         */
        __publicField(this, "error");
        (0, index_js_1.defineProperties)(this, { error });
      }
    };
    exports.UndecodedEventLog = UndecodedEventLog;
    var _iface;
    var ContractTransactionReceipt = class extends provider_js_1.TransactionReceipt {
      /**
       *  @_ignore:
       */
      constructor(iface, provider, tx) {
        super(tx, provider);
        __privateAdd(this, _iface, void 0);
        __privateSet(this, _iface, iface);
      }
      /**
       *  The parsed logs for any [[Log]] which has a matching event in the
       *  Contract ABI.
       */
      get logs() {
        return super.logs.map((log) => {
          const fragment = log.topics.length ? __privateGet(this, _iface).getEvent(log.topics[0]) : null;
          if (fragment) {
            try {
              return new EventLog(log, __privateGet(this, _iface), fragment);
            } catch (error) {
              return new UndecodedEventLog(log, error);
            }
          }
          return log;
        });
      }
    };
    _iface = new WeakMap();
    exports.ContractTransactionReceipt = ContractTransactionReceipt;
    var _iface2;
    var ContractTransactionResponse = class extends provider_js_1.TransactionResponse {
      /**
       *  @_ignore:
       */
      constructor(iface, provider, tx) {
        super(tx, provider);
        __privateAdd(this, _iface2, void 0);
        __privateSet(this, _iface2, iface);
      }
      /**
       *  Resolves once this transaction has been mined and has
       *  %%confirms%% blocks including it (default: ``1``) with an
       *  optional %%timeout%%.
       *
       *  This can resolve to ``null`` only if %%confirms%% is ``0``
       *  and the transaction has not been mined, otherwise this will
       *  wait until enough confirmations have completed.
       */
      async wait(confirms, timeout) {
        const receipt = await super.wait(confirms, timeout);
        if (receipt == null) {
          return null;
        }
        return new ContractTransactionReceipt(__privateGet(this, _iface2), this.provider, receipt);
      }
    };
    _iface2 = new WeakMap();
    exports.ContractTransactionResponse = ContractTransactionResponse;
    var ContractUnknownEventPayload = class extends index_js_1.EventPayload {
      /**
       *  @_event:
       */
      constructor(contract, listener, filter, log) {
        super(contract, listener, filter);
        /**
         *  The log with no matching events.
         */
        __publicField(this, "log");
        (0, index_js_1.defineProperties)(this, { log });
      }
      /**
       *  Resolves to the block the event occured in.
       */
      async getBlock() {
        return await this.log.getBlock();
      }
      /**
       *  Resolves to the transaction the event occured in.
       */
      async getTransaction() {
        return await this.log.getTransaction();
      }
      /**
       *  Resolves to the transaction receipt the event occured in.
       */
      async getTransactionReceipt() {
        return await this.log.getTransactionReceipt();
      }
    };
    exports.ContractUnknownEventPayload = ContractUnknownEventPayload;
    var ContractEventPayload = class extends ContractUnknownEventPayload {
      /**
       *  @_ignore:
       */
      constructor(contract, listener, filter, fragment, _log) {
        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
        (0, index_js_1.defineProperties)(this, { args, fragment });
      }
      /**
       *  The event name.
       */
      get eventName() {
        return this.fragment.name;
      }
      /**
       *  The event signature.
       */
      get eventSignature() {
        return this.fragment.format();
      }
    };
    exports.ContractEventPayload = ContractEventPayload;
  }
});

// node_modules/ethers/lib.commonjs/contract/contract.js
var require_contract = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = exports.BaseContract = exports.resolveArgs = exports.copyOverrides = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address2();
    var provider_js_1 = require_provider();
    var index_js_3 = require_utils3();
    var wrappers_js_1 = require_wrappers();
    var BN_0 = BigInt(0);
    function canCall(value) {
      return value && typeof value.call === "function";
    }
    function canEstimate(value) {
      return value && typeof value.estimateGas === "function";
    }
    function canResolve(value) {
      return value && typeof value.resolveName === "function";
    }
    function canSend(value) {
      return value && typeof value.sendTransaction === "function";
    }
    function getResolver(value) {
      if (value != null) {
        if (canResolve(value)) {
          return value;
        }
        if (value.provider) {
          return value.provider;
        }
      }
      return void 0;
    }
    var _filter;
    var PreparedTopicFilter = class {
      constructor(contract, fragment, args) {
        __privateAdd(this, _filter, void 0);
        __publicField(this, "fragment");
        (0, index_js_3.defineProperties)(this, { fragment });
        if (fragment.inputs.length < args.length) {
          throw new Error("too many arguments");
        }
        const runner = getRunner(contract.runner, "resolveName");
        const resolver = canResolve(runner) ? runner : null;
        __privateSet(this, _filter, async function() {
          const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
            const arg = args[index];
            if (arg == null) {
              return null;
            }
            return param.walkAsync(args[index], (type, value) => {
              if (type === "address") {
                if (Array.isArray(value)) {
                  return Promise.all(value.map((v) => (0, index_js_2.resolveAddress)(v, resolver)));
                }
                return (0, index_js_2.resolveAddress)(value, resolver);
              }
              return value;
            });
          }));
          return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
        }());
      }
      getTopicFilter() {
        return __privateGet(this, _filter);
      }
    };
    _filter = new WeakMap();
    function getRunner(value, feature) {
      if (value == null) {
        return null;
      }
      if (typeof value[feature] === "function") {
        return value;
      }
      if (value.provider && typeof value.provider[feature] === "function") {
        return value.provider;
      }
      return null;
    }
    function getProvider(value) {
      if (value == null) {
        return null;
      }
      return value.provider || null;
    }
    async function copyOverrides(arg, allowed) {
      const _overrides = index_js_1.Typed.dereference(arg, "overrides");
      (0, index_js_3.assertArgument)(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
      const overrides = (0, provider_js_1.copyRequest)(_overrides);
      (0, index_js_3.assertArgument)(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
      (0, index_js_3.assertArgument)(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
      if (overrides.from) {
        overrides.from = overrides.from;
      }
      return overrides;
    }
    exports.copyOverrides = copyOverrides;
    async function resolveArgs(_runner, inputs, args) {
      const runner = getRunner(_runner, "resolveName");
      const resolver = canResolve(runner) ? runner : null;
      return await Promise.all(inputs.map((param, index) => {
        return param.walkAsync(args[index], (type, value) => {
          value = index_js_1.Typed.dereference(value, type);
          if (type === "address") {
            return (0, index_js_2.resolveAddress)(value, resolver);
          }
          return value;
        });
      }));
    }
    exports.resolveArgs = resolveArgs;
    function buildWrappedFallback(contract) {
      const populateTransaction = async function(overrides) {
        const tx = await copyOverrides(overrides, ["data"]);
        tx.to = await contract.getAddress();
        if (tx.from) {
          tx.from = await (0, index_js_2.resolveAddress)(tx.from, getResolver(contract.runner));
        }
        const iface = contract.interface;
        const noValue = (0, index_js_3.getBigInt)(tx.value || BN_0, "overrides.value") === BN_0;
        const noData = (tx.data || "0x") === "0x";
        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
          (0, index_js_3.assertArgument)(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
        }
        (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
        const payable = iface.receive || iface.fallback && iface.fallback.payable;
        (0, index_js_3.assertArgument)(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
        (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
        return tx;
      };
      const staticCall = async function(overrides) {
        const runner = getRunner(contract.runner, "call");
        (0, index_js_3.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
        const tx = await populateTransaction(overrides);
        try {
          return await runner.call(tx);
        } catch (error) {
          if ((0, index_js_3.isCallException)(error) && error.data) {
            throw contract.interface.makeError(error.data, tx);
          }
          throw error;
        }
      };
      const send = async function(overrides) {
        const runner = contract.runner;
        (0, index_js_3.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
        const tx = await runner.sendTransaction(await populateTransaction(overrides));
        const provider = getProvider(contract.runner);
        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);
      };
      const estimateGas = async function(overrides) {
        const runner = getRunner(contract.runner, "estimateGas");
        (0, index_js_3.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
        return await runner.estimateGas(await populateTransaction(overrides));
      };
      const method = async (overrides) => {
        return await send(overrides);
      };
      (0, index_js_3.defineProperties)(method, {
        _contract: contract,
        estimateGas,
        populateTransaction,
        send,
        staticCall
      });
      return method;
    }
    function buildWrappedMethod(contract, key) {
      const getFragment = function(...args) {
        const fragment = contract.interface.getFunction(key, args);
        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key, args }
        });
        return fragment;
      };
      const populateTransaction = async function(...args) {
        const fragment = getFragment(...args);
        let overrides = {};
        if (fragment.inputs.length + 1 === args.length) {
          overrides = await copyOverrides(args.pop());
          if (overrides.from) {
            overrides.from = await (0, index_js_2.resolveAddress)(overrides.from, getResolver(contract.runner));
          }
        }
        if (fragment.inputs.length !== args.length) {
          throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
        }
        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
        return Object.assign({}, overrides, await (0, index_js_3.resolveProperties)({
          to: contract.getAddress(),
          data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
        }));
      };
      const staticCall = async function(...args) {
        const result = await staticCallResult(...args);
        if (result.length === 1) {
          return result[0];
        }
        return result;
      };
      const send = async function(...args) {
        const runner = contract.runner;
        (0, index_js_3.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
        const tx = await runner.sendTransaction(await populateTransaction(...args));
        const provider = getProvider(contract.runner);
        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);
      };
      const estimateGas = async function(...args) {
        const runner = getRunner(contract.runner, "estimateGas");
        (0, index_js_3.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
        return await runner.estimateGas(await populateTransaction(...args));
      };
      const staticCallResult = async function(...args) {
        const runner = getRunner(contract.runner, "call");
        (0, index_js_3.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
        const tx = await populateTransaction(...args);
        let result = "0x";
        try {
          result = await runner.call(tx);
        } catch (error) {
          if ((0, index_js_3.isCallException)(error) && error.data) {
            throw contract.interface.makeError(error.data, tx);
          }
          throw error;
        }
        const fragment = getFragment(...args);
        return contract.interface.decodeFunctionResult(fragment, result);
      };
      const method = async (...args) => {
        const fragment = getFragment(...args);
        if (fragment.constant) {
          return await staticCall(...args);
        }
        return await send(...args);
      };
      (0, index_js_3.defineProperties)(method, {
        name: contract.interface.getFunctionName(key),
        _contract: contract,
        _key: key,
        getFragment,
        estimateGas,
        populateTransaction,
        send,
        staticCall,
        staticCallResult
      });
      Object.defineProperty(method, "fragment", {
        configurable: false,
        enumerable: true,
        get: () => {
          const fragment = contract.interface.getFunction(key);
          (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
            operation: "fragment",
            info: { key }
          });
          return fragment;
        }
      });
      return method;
    }
    function buildWrappedEvent(contract, key) {
      const getFragment = function(...args) {
        const fragment = contract.interface.getEvent(key, args);
        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key, args }
        });
        return fragment;
      };
      const method = function(...args) {
        return new PreparedTopicFilter(contract, getFragment(...args), args);
      };
      (0, index_js_3.defineProperties)(method, {
        name: contract.interface.getEventName(key),
        _contract: contract,
        _key: key,
        getFragment
      });
      Object.defineProperty(method, "fragment", {
        configurable: false,
        enumerable: true,
        get: () => {
          const fragment = contract.interface.getEvent(key);
          (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
            operation: "fragment",
            info: { key }
          });
          return fragment;
        }
      });
      return method;
    }
    var internal = Symbol.for("_ethersInternal_contract");
    var internalValues = /* @__PURE__ */ new WeakMap();
    function setInternal(contract, values) {
      internalValues.set(contract[internal], values);
    }
    function getInternal(contract) {
      return internalValues.get(contract[internal]);
    }
    function isDeferred(value) {
      return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
    }
    async function getSubInfo(contract, event) {
      let topics;
      let fragment = null;
      if (Array.isArray(event)) {
        const topicHashify = function(name) {
          if ((0, index_js_3.isHexString)(name, 32)) {
            return name;
          }
          const fragment2 = contract.interface.getEvent(name);
          (0, index_js_3.assertArgument)(fragment2, "unknown fragment", "name", name);
          return fragment2.topicHash;
        };
        topics = event.map((e) => {
          if (e == null) {
            return null;
          }
          if (Array.isArray(e)) {
            return e.map(topicHashify);
          }
          return topicHashify(e);
        });
      } else if (event === "*") {
        topics = [null];
      } else if (typeof event === "string") {
        if ((0, index_js_3.isHexString)(event, 32)) {
          topics = [event];
        } else {
          fragment = contract.interface.getEvent(event);
          (0, index_js_3.assertArgument)(fragment, "unknown fragment", "event", event);
          topics = [fragment.topicHash];
        }
      } else if (isDeferred(event)) {
        topics = await event.getTopicFilter();
      } else if ("fragment" in event) {
        fragment = event.fragment;
        topics = [fragment.topicHash];
      } else {
        (0, index_js_3.assertArgument)(false, "unknown event name", "event", event);
      }
      topics = topics.map((t) => {
        if (t == null) {
          return null;
        }
        if (Array.isArray(t)) {
          const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());
          if (items.length === 1) {
            return items[0];
          }
          items.sort();
          return items;
        }
        return t.toLowerCase();
      });
      const tag = topics.map((t) => {
        if (t == null) {
          return "null";
        }
        if (Array.isArray(t)) {
          return t.join("|");
        }
        return t;
      }).join("&");
      return { fragment, tag, topics };
    }
    async function hasSub(contract, event) {
      const { subs } = getInternal(contract);
      return subs.get((await getSubInfo(contract, event)).tag) || null;
    }
    async function getSub(contract, operation, event) {
      const provider = getProvider(contract.runner);
      (0, index_js_3.assert)(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
      const { fragment, tag, topics } = await getSubInfo(contract, event);
      const { addr, subs } = getInternal(contract);
      let sub = subs.get(tag);
      if (!sub) {
        const address = addr ? addr : contract;
        const filter = { address, topics };
        const listener = (log) => {
          let foundFragment = fragment;
          if (foundFragment == null) {
            try {
              foundFragment = contract.interface.getEvent(log.topics[0]);
            } catch (error) {
            }
          }
          if (foundFragment) {
            const _foundFragment = foundFragment;
            const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
            emit(contract, event, args, (listener2) => {
              return new wrappers_js_1.ContractEventPayload(contract, listener2, event, _foundFragment, log);
            });
          } else {
            emit(contract, event, [], (listener2) => {
              return new wrappers_js_1.ContractUnknownEventPayload(contract, listener2, event, log);
            });
          }
        };
        let starting = [];
        const start = () => {
          if (starting.length) {
            return;
          }
          starting.push(provider.on(filter, listener));
        };
        const stop = async () => {
          if (starting.length == 0) {
            return;
          }
          let started = starting;
          starting = [];
          await Promise.all(started);
          provider.off(filter, listener);
        };
        sub = { tag, listeners: [], start, stop };
        subs.set(tag, sub);
      }
      return sub;
    }
    var lastEmit = Promise.resolve();
    async function _emit(contract, event, args, payloadFunc) {
      await lastEmit;
      const sub = await hasSub(contract, event);
      if (!sub) {
        return false;
      }
      const count = sub.listeners.length;
      sub.listeners = sub.listeners.filter(({ listener, once }) => {
        const passArgs = Array.from(args);
        if (payloadFunc) {
          passArgs.push(payloadFunc(once ? null : listener));
        }
        try {
          listener.call(contract, ...passArgs);
        } catch (error) {
        }
        return !once;
      });
      if (sub.listeners.length === 0) {
        sub.stop();
        getInternal(contract).subs.delete(sub.tag);
      }
      return count > 0;
    }
    async function emit(contract, event, args, payloadFunc) {
      try {
        await lastEmit;
      } catch (error) {
      }
      const resultPromise = _emit(contract, event, args, payloadFunc);
      lastEmit = resultPromise;
      return await resultPromise;
    }
    var passProperties = ["then"];
    var _a;
    var _BaseContract = class _BaseContract {
      /**
       *  Creates a new contract connected to %%target%% with the %%abi%% and
       *  optionally connected to a %%runner%% to perform operations on behalf
       *  of.
       */
      constructor(target, abi, runner, _deployTx) {
        /**
         *  The target to connect to.
         *
         *  This can be an address, ENS name or any [[Addressable]], such as
         *  another contract. To get the resovled address, use the ``getAddress``
         *  method.
         */
        __publicField(this, "target");
        /**
         *  The contract Interface.
         */
        __publicField(this, "interface");
        /**
         *  The connected runner. This is generally a [[Provider]] or a
         *  [[Signer]], which dictates what operations are supported.
         *
         *  For example, a **Contract** connected to a [[Provider]] may
         *  only execute read-only operations.
         */
        __publicField(this, "runner");
        /**
         *  All the Events available on this contract.
         */
        __publicField(this, "filters");
        /**
         *  @_ignore:
         */
        __publicField(this, _a);
        /**
         *  The fallback or receive function if any.
         */
        __publicField(this, "fallback");
        (0, index_js_3.assertArgument)(typeof target === "string" || (0, index_js_2.isAddressable)(target), "invalid value for Contract target", "target", target);
        if (runner == null) {
          runner = null;
        }
        const iface = index_js_1.Interface.from(abi);
        (0, index_js_3.defineProperties)(this, { target, runner, interface: iface });
        Object.defineProperty(this, internal, { value: {} });
        let addrPromise;
        let addr = null;
        let deployTx = null;
        if (_deployTx) {
          const provider = getProvider(runner);
          deployTx = new wrappers_js_1.ContractTransactionResponse(this.interface, provider, _deployTx);
        }
        let subs = /* @__PURE__ */ new Map();
        if (typeof target === "string") {
          if ((0, index_js_3.isHexString)(target)) {
            addr = target;
            addrPromise = Promise.resolve(target);
          } else {
            const resolver = getRunner(runner, "resolveName");
            if (!canResolve(resolver)) {
              throw (0, index_js_3.makeError)("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
                operation: "resolveName"
              });
            }
            addrPromise = resolver.resolveName(target).then((addr2) => {
              if (addr2 == null) {
                throw (0, index_js_3.makeError)("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
                  value: target
                });
              }
              getInternal(this).addr = addr2;
              return addr2;
            });
          }
        } else {
          addrPromise = target.getAddress().then((addr2) => {
            if (addr2 == null) {
              throw new Error("TODO");
            }
            getInternal(this).addr = addr2;
            return addr2;
          });
        }
        setInternal(this, { addrPromise, addr, deployTx, subs });
        const filters = new Proxy({}, {
          get: (target2, prop, receiver) => {
            if (typeof prop === "symbol" || passProperties.indexOf(prop) >= 0) {
              return Reflect.get(target2, prop, receiver);
            }
            try {
              return this.getEvent(prop);
            } catch (error) {
              if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                throw error;
              }
            }
            return void 0;
          },
          has: (target2, prop) => {
            if (passProperties.indexOf(prop) >= 0) {
              return Reflect.has(target2, prop);
            }
            return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));
          }
        });
        (0, index_js_3.defineProperties)(this, { filters });
        (0, index_js_3.defineProperties)(this, {
          fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null
        });
        return new Proxy(this, {
          get: (target2, prop, receiver) => {
            if (typeof prop === "symbol" || prop in target2 || passProperties.indexOf(prop) >= 0) {
              return Reflect.get(target2, prop, receiver);
            }
            try {
              return target2.getFunction(prop);
            } catch (error) {
              if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                throw error;
              }
            }
            return void 0;
          },
          has: (target2, prop) => {
            if (typeof prop === "symbol" || prop in target2 || passProperties.indexOf(prop) >= 0) {
              return Reflect.has(target2, prop);
            }
            return target2.interface.hasFunction(prop);
          }
        });
      }
      /**
       *  Return a new Contract instance with the same target and ABI, but
       *  a different %%runner%%.
       */
      connect(runner) {
        return new _BaseContract(this.target, this.interface, runner);
      }
      /**
       *  Return a new Contract instance with the same ABI and runner, but
       *  a different %%target%%.
       */
      attach(target) {
        return new _BaseContract(target, this.interface, this.runner);
      }
      /**
       *  Return the resolved address of this Contract.
       */
      async getAddress() {
        return await getInternal(this).addrPromise;
      }
      /**
       *  Return the deployed bytecode or null if no bytecode is found.
       */
      async getDeployedCode() {
        const provider = getProvider(this.runner);
        (0, index_js_3.assert)(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
        const code = await provider.getCode(await this.getAddress());
        if (code === "0x") {
          return null;
        }
        return code;
      }
      /**
       *  Resolve to this Contract once the bytecode has been deployed, or
       *  resolve immediately if already deployed.
       */
      async waitForDeployment() {
        const deployTx = this.deploymentTransaction();
        if (deployTx) {
          await deployTx.wait();
          return this;
        }
        const code = await this.getDeployedCode();
        if (code != null) {
          return this;
        }
        const provider = getProvider(this.runner);
        (0, index_js_3.assert)(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
        return new Promise((resolve, reject) => {
          const checkCode = async () => {
            try {
              const code2 = await this.getDeployedCode();
              if (code2 != null) {
                return resolve(this);
              }
              provider.once("block", checkCode);
            } catch (error) {
              reject(error);
            }
          };
          checkCode();
        });
      }
      /**
       *  Return the transaction used to deploy this contract.
       *
       *  This is only available if this instance was returned from a
       *  [[ContractFactory]].
       */
      deploymentTransaction() {
        return getInternal(this).deployTx;
      }
      /**
       *  Return the function for a given name. This is useful when a contract
       *  method name conflicts with a JavaScript name such as ``prototype`` or
       *  when using a Contract programatically.
       */
      getFunction(key) {
        if (typeof key !== "string") {
          key = key.format();
        }
        const func = buildWrappedMethod(this, key);
        return func;
      }
      /**
       *  Return the event for a given name. This is useful when a contract
       *  event name conflicts with a JavaScript name such as ``prototype`` or
       *  when using a Contract programatically.
       */
      getEvent(key) {
        if (typeof key !== "string") {
          key = key.format();
        }
        return buildWrappedEvent(this, key);
      }
      /**
       *  @_ignore:
       */
      async queryTransaction(hash) {
        throw new Error("@TODO");
      }
      /*
          // @TODO: this is a non-backwards compatible change, but will be added
          //        in v7 and in a potential SmartContract class in an upcoming
          //        v6 release
          async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
              const provider = getProvider(this.runner);
              assert(provider, "contract runner does not have a provider",
                  "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
      
              const receipt = await provider.getTransactionReceipt(hash);
              if (receipt == null) { return null; }
      
              return new ContractTransactionReceipt(this.interface, provider, receipt);
          }
          */
      /**
       *  Provide historic access to event data for %%event%% in the range
       *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
       *  inclusive.
       */
      async queryFilter(event, fromBlock, toBlock) {
        if (fromBlock == null) {
          fromBlock = 0;
        }
        if (toBlock == null) {
          toBlock = "latest";
        }
        const { addr, addrPromise } = getInternal(this);
        const address = addr ? addr : await addrPromise;
        const { fragment, topics } = await getSubInfo(this, event);
        const filter = { address, topics, fromBlock, toBlock };
        const provider = getProvider(this.runner);
        (0, index_js_3.assert)(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
        return (await provider.getLogs(filter)).map((log) => {
          let foundFragment = fragment;
          if (foundFragment == null) {
            try {
              foundFragment = this.interface.getEvent(log.topics[0]);
            } catch (error) {
            }
          }
          if (foundFragment) {
            try {
              return new wrappers_js_1.EventLog(log, this.interface, foundFragment);
            } catch (error) {
              return new wrappers_js_1.UndecodedEventLog(log, error);
            }
          }
          return new provider_js_1.Log(log, provider);
        });
      }
      /**
       *  Add an event %%listener%% for the %%event%%.
       */
      async on(event, listener) {
        const sub = await getSub(this, "on", event);
        sub.listeners.push({ listener, once: false });
        sub.start();
        return this;
      }
      /**
       *  Add an event %%listener%% for the %%event%%, but remove the listener
       *  after it is fired once.
       */
      async once(event, listener) {
        const sub = await getSub(this, "once", event);
        sub.listeners.push({ listener, once: true });
        sub.start();
        return this;
      }
      /**
       *  Emit an %%event%% calling all listeners with %%args%%.
       *
       *  Resolves to ``true`` if any listeners were called.
       */
      async emit(event, ...args) {
        return await emit(this, event, args, null);
      }
      /**
       *  Resolves to the number of listeners of %%event%% or the total number
       *  of listeners if unspecified.
       */
      async listenerCount(event) {
        if (event) {
          const sub = await hasSub(this, event);
          if (!sub) {
            return 0;
          }
          return sub.listeners.length;
        }
        const { subs } = getInternal(this);
        let total = 0;
        for (const { listeners } of subs.values()) {
          total += listeners.length;
        }
        return total;
      }
      /**
       *  Resolves to the listeners subscribed to %%event%% or all listeners
       *  if unspecified.
       */
      async listeners(event) {
        if (event) {
          const sub = await hasSub(this, event);
          if (!sub) {
            return [];
          }
          return sub.listeners.map(({ listener }) => listener);
        }
        const { subs } = getInternal(this);
        let result = [];
        for (const { listeners } of subs.values()) {
          result = result.concat(listeners.map(({ listener }) => listener));
        }
        return result;
      }
      /**
       *  Remove the %%listener%% from the listeners for %%event%% or remove
       *  all listeners if unspecified.
       */
      async off(event, listener) {
        const sub = await hasSub(this, event);
        if (!sub) {
          return this;
        }
        if (listener) {
          const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
          if (index >= 0) {
            sub.listeners.splice(index, 1);
          }
        }
        if (listener == null || sub.listeners.length === 0) {
          sub.stop();
          getInternal(this).subs.delete(sub.tag);
        }
        return this;
      }
      /**
       *  Remove all the listeners for %%event%% or remove all listeners if
       *  unspecified.
       */
      async removeAllListeners(event) {
        if (event) {
          const sub = await hasSub(this, event);
          if (!sub) {
            return this;
          }
          sub.stop();
          getInternal(this).subs.delete(sub.tag);
        } else {
          const { subs } = getInternal(this);
          for (const { tag, stop } of subs.values()) {
            stop();
            subs.delete(tag);
          }
        }
        return this;
      }
      /**
       *  Alias for [on].
       */
      async addListener(event, listener) {
        return await this.on(event, listener);
      }
      /**
       *  Alias for [off].
       */
      async removeListener(event, listener) {
        return await this.off(event, listener);
      }
      /**
       *  Create a new Class for the %%abi%%.
       */
      static buildClass(abi) {
        class CustomContract extends _BaseContract {
          constructor(address, runner = null) {
            super(address, abi, runner);
          }
        }
        return CustomContract;
      }
      /**
       *  Create a new BaseContract with a specified Interface.
       */
      static from(target, abi, runner) {
        if (runner == null) {
          runner = null;
        }
        const contract = new this(target, abi, runner);
        return contract;
      }
    };
    _a = internal;
    var BaseContract = _BaseContract;
    exports.BaseContract = BaseContract;
    function _ContractBase() {
      return BaseContract;
    }
    var Contract = class extends _ContractBase() {
    };
    exports.Contract = Contract;
  }
});

// node_modules/ethers/lib.commonjs/contract/factory.js
var require_factory = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContractFactory = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address2();
    var index_js_3 = require_utils3();
    var contract_js_1 = require_contract();
    var ContractFactory = class _ContractFactory {
      /**
       *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,
       *  optionally connected to %%runner%%.
       *
       *  The %%bytecode%% may be the ``bytecode`` property within the
       *  standard Solidity JSON output.
       */
      constructor(abi, bytecode, runner) {
        /**
         *  The Contract Interface.
         */
        __publicField(this, "interface");
        /**
         *  The Contract deployment bytecode. Often called the initcode.
         */
        __publicField(this, "bytecode");
        /**
         *  The ContractRunner to deploy the Contract as.
         */
        __publicField(this, "runner");
        const iface = index_js_1.Interface.from(abi);
        if (bytecode instanceof Uint8Array) {
          bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
        } else {
          if (typeof bytecode === "object") {
            bytecode = bytecode.object;
          }
          if (!bytecode.startsWith("0x")) {
            bytecode = "0x" + bytecode;
          }
          bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
        }
        (0, index_js_3.defineProperties)(this, {
          bytecode,
          interface: iface,
          runner: runner || null
        });
      }
      attach(target) {
        return new contract_js_1.BaseContract(target, this.interface, this.runner);
      }
      /**
       *  Resolves to the transaction to deploy the contract, passing %%args%%
       *  into the constructor.
       */
      async getDeployTransaction(...args) {
        let overrides = {};
        const fragment = this.interface.deploy;
        if (fragment.inputs.length + 1 === args.length) {
          overrides = await (0, contract_js_1.copyOverrides)(args.pop());
        }
        if (fragment.inputs.length !== args.length) {
          throw new Error("incorrect number of arguments to constructor");
        }
        const resolvedArgs = await (0, contract_js_1.resolveArgs)(this.runner, fragment.inputs, args);
        const data = (0, index_js_3.concat)([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);
        return Object.assign({}, overrides, { data });
      }
      /**
       *  Resolves to the Contract deployed by passing %%args%% into the
       *  constructor.
       *
       *  This will resolve to the Contract before it has been deployed to the
       *  network, so the [[BaseContract-waitForDeployment]] should be used before
       *  sending any transactions to it.
       */
      async deploy(...args) {
        const tx = await this.getDeployTransaction(...args);
        (0, index_js_3.assert)(this.runner && typeof this.runner.sendTransaction === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
          operation: "sendTransaction"
        });
        const sentTx = await this.runner.sendTransaction(tx);
        const address = (0, index_js_2.getCreateAddress)(sentTx);
        return new contract_js_1.BaseContract(address, this.interface, this.runner, sentTx);
      }
      /**
       *  Return a new **ContractFactory** with the same ABI and bytecode,
       *  but connected to %%runner%%.
       */
      connect(runner) {
        return new _ContractFactory(this.interface, this.bytecode, runner);
      }
      /**
       *  Create a new **ContractFactory** from the standard Solidity JSON output.
       */
      static fromSolidity(output, runner) {
        (0, index_js_3.assertArgument)(output != null, "bad compiler output", "output", output);
        if (typeof output === "string") {
          output = JSON.parse(output);
        }
        const abi = output.abi;
        let bytecode = "";
        if (output.bytecode) {
          bytecode = output.bytecode;
        } else if (output.evm && output.evm.bytecode) {
          bytecode = output.evm.bytecode;
        }
        return new this(abi, bytecode, runner);
      }
    };
    exports.ContractFactory = ContractFactory;
  }
});

// node_modules/ethers/lib.commonjs/contract/index.js
var require_contract2 = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UndecodedEventLog = exports.EventLog = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.ContractUnknownEventPayload = exports.ContractEventPayload = exports.ContractFactory = exports.Contract = exports.BaseContract = void 0;
    var contract_js_1 = require_contract();
    Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function() {
      return contract_js_1.BaseContract;
    } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return contract_js_1.Contract;
    } });
    var factory_js_1 = require_factory();
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function() {
      return factory_js_1.ContractFactory;
    } });
    var wrappers_js_1 = require_wrappers();
    Object.defineProperty(exports, "ContractEventPayload", { enumerable: true, get: function() {
      return wrappers_js_1.ContractEventPayload;
    } });
    Object.defineProperty(exports, "ContractUnknownEventPayload", { enumerable: true, get: function() {
      return wrappers_js_1.ContractUnknownEventPayload;
    } });
    Object.defineProperty(exports, "ContractTransactionReceipt", { enumerable: true, get: function() {
      return wrappers_js_1.ContractTransactionReceipt;
    } });
    Object.defineProperty(exports, "ContractTransactionResponse", { enumerable: true, get: function() {
      return wrappers_js_1.ContractTransactionResponse;
    } });
    Object.defineProperty(exports, "EventLog", { enumerable: true, get: function() {
      return wrappers_js_1.EventLog;
    } });
    Object.defineProperty(exports, "UndecodedEventLog", { enumerable: true, get: function() {
      return wrappers_js_1.UndecodedEventLog;
    } });
  }
});

// node_modules/ethers/lib.commonjs/providers/ens-resolver.js
var require_ens_resolver = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/ens-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnsResolver = exports.BasicMulticoinProviderPlugin = exports.MulticoinProviderPlugin = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_constants();
    var index_js_3 = require_contract2();
    var index_js_4 = require_hash();
    var index_js_5 = require_utils3();
    function getIpfsLink(link) {
      if (link.match(/^ipfs:\/\/ipfs\//i)) {
        link = link.substring(12);
      } else if (link.match(/^ipfs:\/\//i)) {
        link = link.substring(7);
      } else {
        (0, index_js_5.assertArgument)(false, "unsupported IPFS format", "link", link);
      }
      return `https://gateway.ipfs.io/ipfs/${link}`;
    }
    var MulticoinProviderPlugin = class {
      /**
       *  Creates a new **MulticoinProviderPluing** for %%name%%.
       */
      constructor(name) {
        /**
         *  The name.
         */
        __publicField(this, "name");
        (0, index_js_5.defineProperties)(this, { name });
      }
      connect(proivder) {
        return this;
      }
      /**
       *  Returns ``true`` if %%coinType%% is supported by this plugin.
       */
      supportsCoinType(coinType) {
        return false;
      }
      /**
       *  Resolves to the encoded %%address%% for %%coinType%%.
       */
      async encodeAddress(coinType, address) {
        throw new Error("unsupported coin");
      }
      /**
       *  Resolves to the decoded %%data%% for %%coinType%%.
       */
      async decodeAddress(coinType, data) {
        throw new Error("unsupported coin");
      }
    };
    exports.MulticoinProviderPlugin = MulticoinProviderPlugin;
    var BasicMulticoinPluginId = "org.ethers.plugins.provider.BasicMulticoin";
    var BasicMulticoinProviderPlugin = class extends MulticoinProviderPlugin {
      /**
       *  Creates a new **BasicMulticoinProviderPlugin**.
       */
      constructor() {
        super(BasicMulticoinPluginId);
      }
    };
    exports.BasicMulticoinProviderPlugin = BasicMulticoinProviderPlugin;
    var matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
    var matchers = [
      new RegExp("^(https)://(.*)$", "i"),
      new RegExp("^(data):(.*)$", "i"),
      matcherIpfs,
      new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
    ];
    var _supports2544, _resolver, _fetch, fetch_fn, _getResolver, getResolver_fn;
    var _EnsResolver = class _EnsResolver {
      constructor(provider, address, name) {
        __privateAdd(this, _fetch);
        /**
         *  The connected provider.
         */
        __publicField(this, "provider");
        /**
         *  The address of the resolver.
         */
        __publicField(this, "address");
        /**
         *  The name this resolver was resolved against.
         */
        __publicField(this, "name");
        // For EIP-2544 names, the ancestor that provided the resolver
        __privateAdd(this, _supports2544, void 0);
        __privateAdd(this, _resolver, void 0);
        (0, index_js_5.defineProperties)(this, { provider, address, name });
        __privateSet(this, _supports2544, null);
        __privateSet(this, _resolver, new index_js_3.Contract(address, [
          "function supportsInterface(bytes4) view returns (bool)",
          "function resolve(bytes, bytes) view returns (bytes)",
          "function addr(bytes32) view returns (address)",
          "function addr(bytes32, uint) view returns (bytes)",
          "function text(bytes32, string) view returns (string)",
          "function contenthash(bytes32) view returns (bytes)"
        ], provider));
      }
      /**
       *  Resolves to true if the resolver supports wildcard resolution.
       */
      async supportsWildcard() {
        if (__privateGet(this, _supports2544) == null) {
          __privateSet(this, _supports2544, (async () => {
            try {
              return await __privateGet(this, _resolver).supportsInterface("0x9061b923");
            } catch (error) {
              if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
                return false;
              }
              __privateSet(this, _supports2544, null);
              throw error;
            }
          })());
        }
        return await __privateGet(this, _supports2544);
      }
      /**
       *  Resolves to the address for %%coinType%% or null if the
       *  provided %%coinType%% has not been configured.
       */
      async getAddress(coinType) {
        if (coinType == null) {
          coinType = 60;
        }
        if (coinType === 60) {
          try {
            const result = await __privateMethod(this, _fetch, fetch_fn).call(this, "addr(bytes32)");
            if (result == null || result === index_js_2.ZeroAddress) {
              return null;
            }
            return result;
          } catch (error) {
            if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
              return null;
            }
            throw error;
          }
        }
        if (coinType >= 0 && coinType < 2147483648) {
          let ethCoinType = coinType + 2147483648;
          const data2 = await __privateMethod(this, _fetch, fetch_fn).call(this, "addr(bytes32,uint)", [ethCoinType]);
          if ((0, index_js_5.isHexString)(data2, 20)) {
            return (0, index_js_1.getAddress)(data2);
          }
        }
        let coinPlugin = null;
        for (const plugin of this.provider.plugins) {
          if (!(plugin instanceof MulticoinProviderPlugin)) {
            continue;
          }
          if (plugin.supportsCoinType(coinType)) {
            coinPlugin = plugin;
            break;
          }
        }
        if (coinPlugin == null) {
          return null;
        }
        const data = await __privateMethod(this, _fetch, fetch_fn).call(this, "addr(bytes32,uint)", [coinType]);
        if (data == null || data === "0x") {
          return null;
        }
        const address = await coinPlugin.decodeAddress(coinType, data);
        if (address != null) {
          return address;
        }
        (0, index_js_5.assert)(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
          operation: `getAddress(${coinType})`,
          info: { coinType, data }
        });
      }
      /**
       *  Resolves to the EIP-634 text record for %%key%%, or ``null``
       *  if unconfigured.
       */
      async getText(key) {
        const data = await __privateMethod(this, _fetch, fetch_fn).call(this, "text(bytes32,string)", [key]);
        if (data == null || data === "0x") {
          return null;
        }
        return data;
      }
      /**
       *  Rsolves to the content-hash or ``null`` if unconfigured.
       */
      async getContentHash() {
        const data = await __privateMethod(this, _fetch, fetch_fn).call(this, "contenthash(bytes32)");
        if (data == null || data === "0x") {
          return null;
        }
        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
        if (ipfs) {
          const scheme = ipfs[1] === "e3010170" ? "ipfs" : "ipns";
          const length = parseInt(ipfs[4], 16);
          if (ipfs[5].length === length * 2) {
            return `${scheme}://${(0, index_js_5.encodeBase58)("0x" + ipfs[2])}`;
          }
        }
        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
        if (swarm && swarm[1].length === 64) {
          return `bzz://${swarm[1]}`;
        }
        (0, index_js_5.assert)(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
          operation: "getContentHash()",
          info: { data }
        });
      }
      /**
       *  Resolves to the avatar url or ``null`` if the avatar is either
       *  unconfigured or incorrectly configured (e.g. references an NFT
       *  not owned by the address).
       *
       *  If diagnosing issues with configurations, the [[_getAvatar]]
       *  method may be useful.
       */
      async getAvatar() {
        const avatar = await this._getAvatar();
        return avatar.url;
      }
      /**
       *  When resolving an avatar, there are many steps involved, such
       *  fetching metadata and possibly validating ownership of an
       *  NFT.
       *
       *  This method can be used to examine each step and the value it
       *  was working from.
       */
      async _getAvatar() {
        const linkage = [{ type: "name", value: this.name }];
        try {
          const avatar = await this.getText("avatar");
          if (avatar == null) {
            linkage.push({ type: "!avatar", value: "" });
            return { url: null, linkage };
          }
          linkage.push({ type: "avatar", value: avatar });
          for (let i = 0; i < matchers.length; i++) {
            const match = avatar.match(matchers[i]);
            if (match == null) {
              continue;
            }
            const scheme = match[1].toLowerCase();
            switch (scheme) {
              case "https":
              case "data":
                linkage.push({ type: "url", value: avatar });
                return { linkage, url: avatar };
              case "ipfs": {
                const url = getIpfsLink(avatar);
                linkage.push({ type: "ipfs", value: avatar });
                linkage.push({ type: "url", value: url });
                return { linkage, url };
              }
              case "erc721":
              case "erc1155": {
                const selector = scheme === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
                linkage.push({ type: scheme, value: avatar });
                const owner = await this.getAddress();
                if (owner == null) {
                  linkage.push({ type: "!owner", value: "" });
                  return { url: null, linkage };
                }
                const comps = (match[2] || "").split("/");
                if (comps.length !== 2) {
                  linkage.push({ type: `!${scheme}caip`, value: match[2] || "" });
                  return { url: null, linkage };
                }
                const tokenId = comps[1];
                const contract = new index_js_3.Contract(comps[0], [
                  // ERC-721
                  "function tokenURI(uint) view returns (string)",
                  "function ownerOf(uint) view returns (address)",
                  // ERC-1155
                  "function uri(uint) view returns (string)",
                  "function balanceOf(address, uint256) view returns (uint)"
                ], this.provider);
                if (scheme === "erc721") {
                  const tokenOwner = await contract.ownerOf(tokenId);
                  if (owner !== tokenOwner) {
                    linkage.push({ type: "!owner", value: tokenOwner });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "owner", value: tokenOwner });
                } else if (scheme === "erc1155") {
                  const balance = await contract.balanceOf(owner, tokenId);
                  if (!balance) {
                    linkage.push({ type: "!balance", value: "0" });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "balance", value: balance.toString() });
                }
                let metadataUrl = await contract[selector](tokenId);
                if (metadataUrl == null || metadataUrl === "0x") {
                  linkage.push({ type: "!metadata-url", value: "" });
                  return { url: null, linkage };
                }
                linkage.push({ type: "metadata-url-base", value: metadataUrl });
                if (scheme === "erc1155") {
                  metadataUrl = metadataUrl.replace("{id}", (0, index_js_5.toBeHex)(tokenId, 32).substring(2));
                  linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
                }
                if (metadataUrl.match(/^ipfs:/i)) {
                  metadataUrl = getIpfsLink(metadataUrl);
                }
                linkage.push({ type: "metadata-url", value: metadataUrl });
                let metadata = {};
                const response = await new index_js_5.FetchRequest(metadataUrl).send();
                response.assertOk();
                try {
                  metadata = response.bodyJson;
                } catch (error) {
                  try {
                    linkage.push({ type: "!metadata", value: response.bodyText });
                  } catch (error2) {
                    const bytes = response.body;
                    if (bytes) {
                      linkage.push({ type: "!metadata", value: (0, index_js_5.hexlify)(bytes) });
                    }
                    return { url: null, linkage };
                  }
                  return { url: null, linkage };
                }
                if (!metadata) {
                  linkage.push({ type: "!metadata", value: "" });
                  return { url: null, linkage };
                }
                linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
                let imageUrl = metadata.image;
                if (typeof imageUrl !== "string") {
                  linkage.push({ type: "!imageUrl", value: "" });
                  return { url: null, linkage };
                }
                if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                } else {
                  const ipfs = imageUrl.match(matcherIpfs);
                  if (ipfs == null) {
                    linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
                  imageUrl = getIpfsLink(imageUrl);
                }
                linkage.push({ type: "url", value: imageUrl });
                return { linkage, url: imageUrl };
              }
            }
          }
        } catch (error) {
        }
        return { linkage, url: null };
      }
      static async getEnsAddress(provider) {
        const network = await provider.getNetwork();
        const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
        (0, index_js_5.assert)(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
          operation: "getEnsAddress",
          info: { network }
        });
        return ensPlugin.address;
      }
      /**
       *  Resolve to the ENS resolver for %%name%% using %%provider%% or
       *  ``null`` if unconfigured.
       */
      static async fromName(provider, name) {
        var _a;
        let currentName = name;
        while (true) {
          if (currentName === "" || currentName === ".") {
            return null;
          }
          if (name !== "eth" && currentName === "eth") {
            return null;
          }
          const addr = await __privateMethod(_a = _EnsResolver, _getResolver, getResolver_fn).call(_a, provider, currentName);
          if (addr != null) {
            const resolver = new _EnsResolver(provider, addr, name);
            if (currentName !== name && !await resolver.supportsWildcard()) {
              return null;
            }
            return resolver;
          }
          currentName = currentName.split(".").slice(1).join(".");
        }
      }
    };
    _supports2544 = new WeakMap();
    _resolver = new WeakMap();
    _fetch = new WeakSet();
    fetch_fn = async function(funcName, params) {
      params = (params || []).slice();
      const iface = __privateGet(this, _resolver).interface;
      params.unshift((0, index_js_4.namehash)(this.name));
      let fragment = null;
      if (await this.supportsWildcard()) {
        fragment = iface.getFunction(funcName);
        (0, index_js_5.assert)(fragment, "missing fragment", "UNKNOWN_ERROR", {
          info: { funcName }
        });
        params = [
          (0, index_js_4.dnsEncode)(this.name, 255),
          iface.encodeFunctionData(fragment, params)
        ];
        funcName = "resolve(bytes,bytes)";
      }
      params.push({
        enableCcipRead: true
      });
      try {
        const result = await __privateGet(this, _resolver)[funcName](...params);
        if (fragment) {
          return iface.decodeFunctionResult(fragment, result)[0];
        }
        return result;
      } catch (error) {
        if (!(0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
          throw error;
        }
      }
      return null;
    };
    _getResolver = new WeakSet();
    getResolver_fn = async function(provider, name) {
      const ensAddr = await _EnsResolver.getEnsAddress(provider);
      try {
        const contract = new index_js_3.Contract(ensAddr, [
          "function resolver(bytes32) view returns (address)"
        ], provider);
        const addr = await contract.resolver((0, index_js_4.namehash)(name), {
          enableCcipRead: true
        });
        if (addr === index_js_2.ZeroAddress) {
          return null;
        }
        return addr;
      } catch (error) {
        throw error;
      }
      return null;
    };
    __privateAdd(_EnsResolver, _getResolver);
    var EnsResolver = _EnsResolver;
    exports.EnsResolver = EnsResolver;
  }
});

// node_modules/ethers/lib.commonjs/providers/format.js
var require_format = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/format.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatTransactionResponse = exports.formatTransactionReceipt = exports.formatReceiptLog = exports.formatBlock = exports.formatLog = exports.formatUint256 = exports.formatHash = exports.formatData = exports.formatBoolean = exports.object = exports.arrayOf = exports.allowNull = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils3();
    var BN_0 = BigInt(0);
    function allowNull(format, nullValue) {
      return function(value) {
        if (value == null) {
          return nullValue;
        }
        return format(value);
      };
    }
    exports.allowNull = allowNull;
    function arrayOf(format, allowNull2) {
      return (array) => {
        if (allowNull2 && array == null) {
          return null;
        }
        if (!Array.isArray(array)) {
          throw new Error("not an array");
        }
        return array.map((i) => format(i));
      };
    }
    exports.arrayOf = arrayOf;
    function object(format, altNames) {
      return (value) => {
        const result = {};
        for (const key in format) {
          let srcKey = key;
          if (altNames && key in altNames && !(srcKey in value)) {
            for (const altKey of altNames[key]) {
              if (altKey in value) {
                srcKey = altKey;
                break;
              }
            }
          }
          try {
            const nv = format[key](value[srcKey]);
            if (nv !== void 0) {
              result[key] = nv;
            }
          } catch (error) {
            const message = error instanceof Error ? error.message : "not-an-error";
            (0, index_js_4.assert)(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
          }
        }
        return result;
      };
    }
    exports.object = object;
    function formatBoolean(value) {
      switch (value) {
        case true:
        case "true":
          return true;
        case false:
        case "false":
          return false;
      }
      (0, index_js_4.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
    }
    exports.formatBoolean = formatBoolean;
    function formatData(value) {
      (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), "invalid data", "value", value);
      return value;
    }
    exports.formatData = formatData;
    function formatHash(value) {
      (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), "invalid hash", "value", value);
      return value;
    }
    exports.formatHash = formatHash;
    function formatUint256(value) {
      if (!(0, index_js_4.isHexString)(value)) {
        throw new Error("invalid uint256");
      }
      return (0, index_js_4.zeroPadValue)(value, 32);
    }
    exports.formatUint256 = formatUint256;
    var _formatLog = object({
      address: index_js_1.getAddress,
      blockHash: formatHash,
      blockNumber: index_js_4.getNumber,
      data: formatData,
      index: index_js_4.getNumber,
      removed: allowNull(formatBoolean, false),
      topics: arrayOf(formatHash),
      transactionHash: formatHash,
      transactionIndex: index_js_4.getNumber
    }, {
      index: ["logIndex"]
    });
    function formatLog(value) {
      return _formatLog(value);
    }
    exports.formatLog = formatLog;
    var _formatBlock = object({
      hash: allowNull(formatHash),
      parentHash: formatHash,
      parentBeaconBlockRoot: allowNull(formatHash, null),
      number: index_js_4.getNumber,
      timestamp: index_js_4.getNumber,
      nonce: allowNull(formatData),
      difficulty: index_js_4.getBigInt,
      gasLimit: index_js_4.getBigInt,
      gasUsed: index_js_4.getBigInt,
      stateRoot: allowNull(formatHash, null),
      receiptsRoot: allowNull(formatHash, null),
      blobGasUsed: allowNull(index_js_4.getBigInt, null),
      excessBlobGas: allowNull(index_js_4.getBigInt, null),
      miner: allowNull(index_js_1.getAddress),
      prevRandao: allowNull(formatHash, null),
      extraData: formatData,
      baseFeePerGas: allowNull(index_js_4.getBigInt)
    }, {
      prevRandao: ["mixHash"]
    });
    function formatBlock(value) {
      const result = _formatBlock(value);
      result.transactions = value.transactions.map((tx) => {
        if (typeof tx === "string") {
          return tx;
        }
        return formatTransactionResponse(tx);
      });
      return result;
    }
    exports.formatBlock = formatBlock;
    var _formatReceiptLog = object({
      transactionIndex: index_js_4.getNumber,
      blockNumber: index_js_4.getNumber,
      transactionHash: formatHash,
      address: index_js_1.getAddress,
      topics: arrayOf(formatHash),
      data: formatData,
      index: index_js_4.getNumber,
      blockHash: formatHash
    }, {
      index: ["logIndex"]
    });
    function formatReceiptLog(value) {
      return _formatReceiptLog(value);
    }
    exports.formatReceiptLog = formatReceiptLog;
    var _formatTransactionReceipt = object({
      to: allowNull(index_js_1.getAddress, null),
      from: allowNull(index_js_1.getAddress, null),
      contractAddress: allowNull(index_js_1.getAddress, null),
      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
      index: index_js_4.getNumber,
      root: allowNull(index_js_4.hexlify),
      gasUsed: index_js_4.getBigInt,
      blobGasUsed: allowNull(index_js_4.getBigInt, null),
      logsBloom: allowNull(formatData),
      blockHash: formatHash,
      hash: formatHash,
      logs: arrayOf(formatReceiptLog),
      blockNumber: index_js_4.getNumber,
      //confirmations: allowNull(getNumber, null),
      cumulativeGasUsed: index_js_4.getBigInt,
      effectiveGasPrice: allowNull(index_js_4.getBigInt),
      blobGasPrice: allowNull(index_js_4.getBigInt, null),
      status: allowNull(index_js_4.getNumber),
      type: allowNull(index_js_4.getNumber, 0)
    }, {
      effectiveGasPrice: ["gasPrice"],
      hash: ["transactionHash"],
      index: ["transactionIndex"]
    });
    function formatTransactionReceipt(value) {
      return _formatTransactionReceipt(value);
    }
    exports.formatTransactionReceipt = formatTransactionReceipt;
    function formatTransactionResponse(value) {
      if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_0) {
        value.to = "0x0000000000000000000000000000000000000000";
      }
      const result = object({
        hash: formatHash,
        // Some nodes do not return this, usually test nodes (like Ganache)
        index: allowNull(index_js_4.getNumber, void 0),
        type: (value2) => {
          if (value2 === "0x" || value2 == null) {
            return 0;
          }
          return (0, index_js_4.getNumber)(value2);
        },
        accessList: allowNull(index_js_3.accessListify, null),
        blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),
        blockHash: allowNull(formatHash, null),
        blockNumber: allowNull(index_js_4.getNumber, null),
        transactionIndex: allowNull(index_js_4.getNumber, null),
        from: index_js_1.getAddress,
        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
        gasPrice: allowNull(index_js_4.getBigInt),
        maxPriorityFeePerGas: allowNull(index_js_4.getBigInt),
        maxFeePerGas: allowNull(index_js_4.getBigInt),
        maxFeePerBlobGas: allowNull(index_js_4.getBigInt, null),
        gasLimit: index_js_4.getBigInt,
        to: allowNull(index_js_1.getAddress, null),
        value: index_js_4.getBigInt,
        nonce: index_js_4.getNumber,
        data: formatData,
        creates: allowNull(index_js_1.getAddress, null),
        chainId: allowNull(index_js_4.getBigInt, null)
      }, {
        data: ["input"],
        gasLimit: ["gas"],
        index: ["transactionIndex"]
      })(value);
      if (result.to == null && result.creates == null) {
        result.creates = (0, index_js_1.getCreateAddress)(result);
      }
      if ((value.type === 1 || value.type === 2) && value.accessList == null) {
        result.accessList = [];
      }
      if (value.signature) {
        result.signature = index_js_2.Signature.from(value.signature);
      } else {
        result.signature = index_js_2.Signature.from(value);
      }
      if (result.chainId == null) {
        const chainId = result.signature.legacyChainId;
        if (chainId != null) {
          result.chainId = chainId;
        }
      }
      if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_0) {
        result.blockHash = null;
      }
      return result;
    }
    exports.formatTransactionResponse = formatTransactionResponse;
  }
});

// node_modules/ethers/lib.commonjs/providers/plugins-network.js
var require_plugins_network = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/plugins-network.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = exports.EnsPlugin = exports.GasCostPlugin = exports.NetworkPlugin = void 0;
    var properties_js_1 = require_properties();
    var index_js_1 = require_utils3();
    var EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
    var NetworkPlugin = class _NetworkPlugin {
      /**
       *  Creates a new **NetworkPlugin**.
       */
      constructor(name) {
        /**
         *  The name of the plugin.
         *
         *  It is recommended to use reverse-domain-notation, which permits
         *  unique names with a known authority as well as hierarchal entries.
         */
        __publicField(this, "name");
        (0, properties_js_1.defineProperties)(this, { name });
      }
      /**
       *  Creates a copy of this plugin.
       */
      clone() {
        return new _NetworkPlugin(this.name);
      }
    };
    exports.NetworkPlugin = NetworkPlugin;
    var GasCostPlugin = class _GasCostPlugin extends NetworkPlugin {
      /**
       *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
       *  latest block or another GasCostPlugin supercedes that block number,
       *  with the associated %%costs%%.
       */
      constructor(effectiveBlock, costs) {
        if (effectiveBlock == null) {
          effectiveBlock = 0;
        }
        super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);
        /**
         *  The block number to treat these values as valid from.
         *
         *  This allows a hardfork to have updated values included as well as
         *  mulutiple hardforks to be supported.
         */
        __publicField(this, "effectiveBlock");
        /**
         *  The transactions base fee.
         */
        __publicField(this, "txBase");
        /**
         *  The fee for creating a new account.
         */
        __publicField(this, "txCreate");
        /**
         *  The fee per zero-byte in the data.
         */
        __publicField(this, "txDataZero");
        /**
         *  The fee per non-zero-byte in the data.
         */
        __publicField(this, "txDataNonzero");
        /**
         *  The fee per storage key in the [[link-eip-2930]] access list.
         */
        __publicField(this, "txAccessListStorageKey");
        /**
         *  The fee per address in the [[link-eip-2930]] access list.
         */
        __publicField(this, "txAccessListAddress");
        const props = { effectiveBlock };
        function set(name, nullish) {
          let value = (costs || {})[name];
          if (value == null) {
            value = nullish;
          }
          (0, index_js_1.assertArgument)(typeof value === "number", `invalud value for ${name}`, "costs", costs);
          props[name] = value;
        }
        set("txBase", 21e3);
        set("txCreate", 32e3);
        set("txDataZero", 4);
        set("txDataNonzero", 16);
        set("txAccessListStorageKey", 1900);
        set("txAccessListAddress", 2400);
        (0, properties_js_1.defineProperties)(this, props);
      }
      clone() {
        return new _GasCostPlugin(this.effectiveBlock, this);
      }
    };
    exports.GasCostPlugin = GasCostPlugin;
    var EnsPlugin = class _EnsPlugin extends NetworkPlugin {
      /**
       *  Creates a new **EnsPlugin** connected to %%address%% on the
       *  %%targetNetwork%%. The default ENS address and mainnet is used
       *  if unspecified.
       */
      constructor(address, targetNetwork) {
        super("org.ethers.plugins.network.Ens");
        /**
         *  The ENS Registrty Contract address.
         */
        __publicField(this, "address");
        /**
         *  The chain ID that the ENS contract lives on.
         */
        __publicField(this, "targetNetwork");
        (0, properties_js_1.defineProperties)(this, {
          address: address || EnsAddress,
          targetNetwork: targetNetwork == null ? 1 : targetNetwork
        });
      }
      clone() {
        return new _EnsPlugin(this.address, this.targetNetwork);
      }
    };
    exports.EnsPlugin = EnsPlugin;
    var _feeDataFunc;
    var _FeeDataNetworkPlugin = class _FeeDataNetworkPlugin extends NetworkPlugin {
      /**
       *  Creates a new **FeeDataNetworkPlugin**.
       */
      constructor(feeDataFunc) {
        super("org.ethers.plugins.network.FeeData");
        __privateAdd(this, _feeDataFunc, void 0);
        __privateSet(this, _feeDataFunc, feeDataFunc);
      }
      /**
       *  The fee data function provided to the constructor.
       */
      get feeDataFunc() {
        return __privateGet(this, _feeDataFunc);
      }
      /**
       *  Resolves to the fee data.
       */
      async getFeeData(provider) {
        return await __privateGet(this, _feeDataFunc).call(this, provider);
      }
      clone() {
        return new _FeeDataNetworkPlugin(__privateGet(this, _feeDataFunc));
      }
    };
    _feeDataFunc = new WeakMap();
    var FeeDataNetworkPlugin = _FeeDataNetworkPlugin;
    exports.FeeDataNetworkPlugin = FeeDataNetworkPlugin;
    var _url, _processFunc;
    var FetchUrlFeeDataNetworkPlugin = class extends NetworkPlugin {
      /**
       *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
       *  be used when computing the fee data for the network.
       */
      constructor(url, processFunc) {
        super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
        __privateAdd(this, _url, void 0);
        __privateAdd(this, _processFunc, void 0);
        __privateSet(this, _url, url);
        __privateSet(this, _processFunc, processFunc);
      }
      /**
       *  The URL to initialize the FetchRequest with in %%processFunc%%.
       */
      get url() {
        return __privateGet(this, _url);
      }
      /**
       *  The callback to use when computing the FeeData.
       */
      get processFunc() {
        return __privateGet(this, _processFunc);
      }
      // We are immutable, so we can serve as our own clone
      clone() {
        return this;
      }
    };
    _url = new WeakMap();
    _processFunc = new WeakMap();
    exports.FetchUrlFeeDataNetworkPlugin = FetchUrlFeeDataNetworkPlugin;
  }
});

// node_modules/ethers/lib.commonjs/providers/network.js
var require_network = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/network.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Network = void 0;
    var index_js_1 = require_transaction2();
    var index_js_2 = require_utils3();
    var plugins_network_js_1 = require_plugins_network();
    var Networks = /* @__PURE__ */ new Map();
    var _name, _chainId, _plugins;
    var _Network = class _Network {
      /**
       *  Creates a new **Network** for %%name%% and %%chainId%%.
       */
      constructor(name, chainId) {
        __privateAdd(this, _name, void 0);
        __privateAdd(this, _chainId, void 0);
        __privateAdd(this, _plugins, void 0);
        __privateSet(this, _name, name);
        __privateSet(this, _chainId, (0, index_js_2.getBigInt)(chainId));
        __privateSet(this, _plugins, /* @__PURE__ */ new Map());
      }
      /**
       *  Returns a JSON-compatible representation of a Network.
       */
      toJSON() {
        return { name: this.name, chainId: String(this.chainId) };
      }
      /**
       *  The network common name.
       *
       *  This is the canonical name, as networks migh have multiple
       *  names.
       */
      get name() {
        return __privateGet(this, _name);
      }
      set name(value) {
        __privateSet(this, _name, value);
      }
      /**
       *  The network chain ID.
       */
      get chainId() {
        return __privateGet(this, _chainId);
      }
      set chainId(value) {
        __privateSet(this, _chainId, (0, index_js_2.getBigInt)(value, "chainId"));
      }
      /**
       *  Returns true if %%other%% matches this network. Any chain ID
       *  must match, and if no chain ID is present, the name must match.
       *
       *  This method does not currently check for additional properties,
       *  such as ENS address or plug-in compatibility.
       */
      matches(other) {
        if (other == null) {
          return false;
        }
        if (typeof other === "string") {
          try {
            return this.chainId === (0, index_js_2.getBigInt)(other);
          } catch (error) {
          }
          return this.name === other;
        }
        if (typeof other === "number" || typeof other === "bigint") {
          try {
            return this.chainId === (0, index_js_2.getBigInt)(other);
          } catch (error) {
          }
          return false;
        }
        if (typeof other === "object") {
          if (other.chainId != null) {
            try {
              return this.chainId === (0, index_js_2.getBigInt)(other.chainId);
            } catch (error) {
            }
            return false;
          }
          if (other.name != null) {
            return this.name === other.name;
          }
          return false;
        }
        return false;
      }
      /**
       *  Returns the list of plugins currently attached to this Network.
       */
      get plugins() {
        return Array.from(__privateGet(this, _plugins).values());
      }
      /**
       *  Attach a new %%plugin%% to this Network. The network name
       *  must be unique, excluding any fragment.
       */
      attachPlugin(plugin) {
        if (__privateGet(this, _plugins).get(plugin.name)) {
          throw new Error(`cannot replace existing plugin: ${plugin.name} `);
        }
        __privateGet(this, _plugins).set(plugin.name, plugin.clone());
        return this;
      }
      /**
       *  Return the plugin, if any, matching %%name%% exactly. Plugins
       *  with fragments will not be returned unless %%name%% includes
       *  a fragment.
       */
      getPlugin(name) {
        return __privateGet(this, _plugins).get(name) || null;
      }
      /**
       *  Gets a list of all plugins that match %%name%%, with otr without
       *  a fragment.
       */
      getPlugins(basename) {
        return this.plugins.filter((p) => p.name.split("#")[0] === basename);
      }
      /**
       *  Create a copy of this Network.
       */
      clone() {
        const clone = new _Network(this.name, this.chainId);
        this.plugins.forEach((plugin) => {
          clone.attachPlugin(plugin.clone());
        });
        return clone;
      }
      /**
       *  Compute the intrinsic gas required for a transaction.
       *
       *  A GasCostPlugin can be attached to override the default
       *  values.
       */
      computeIntrinsicGas(tx) {
        const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || new plugins_network_js_1.GasCostPlugin();
        let gas = costs.txBase;
        if (tx.to == null) {
          gas += costs.txCreate;
        }
        if (tx.data) {
          for (let i = 2; i < tx.data.length; i += 2) {
            if (tx.data.substring(i, i + 2) === "00") {
              gas += costs.txDataZero;
            } else {
              gas += costs.txDataNonzero;
            }
          }
        }
        if (tx.accessList) {
          const accessList = (0, index_js_1.accessListify)(tx.accessList);
          for (const addr in accessList) {
            gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
          }
        }
        return gas;
      }
      /**
       *  Returns a new Network for the %%network%% name or chainId.
       */
      static from(network) {
        injectCommonNetworks();
        if (network == null) {
          return _Network.from("mainnet");
        }
        if (typeof network === "number") {
          network = BigInt(network);
        }
        if (typeof network === "string" || typeof network === "bigint") {
          const networkFunc = Networks.get(network);
          if (networkFunc) {
            return networkFunc();
          }
          if (typeof network === "bigint") {
            return new _Network("unknown", network);
          }
          (0, index_js_2.assertArgument)(false, "unknown network", "network", network);
        }
        if (typeof network.clone === "function") {
          const clone = network.clone();
          return clone;
        }
        if (typeof network === "object") {
          (0, index_js_2.assertArgument)(typeof network.name === "string" && typeof network.chainId === "number", "invalid network object name or chainId", "network", network);
          const custom = new _Network(network.name, network.chainId);
          if (network.ensAddress || network.ensNetwork != null) {
            custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network.ensAddress, network.ensNetwork));
          }
          return custom;
        }
        (0, index_js_2.assertArgument)(false, "invalid network", "network", network);
      }
      /**
       *  Register %%nameOrChainId%% with a function which returns
       *  an instance of a Network representing that chain.
       */
      static register(nameOrChainId, networkFunc) {
        if (typeof nameOrChainId === "number") {
          nameOrChainId = BigInt(nameOrChainId);
        }
        const existing = Networks.get(nameOrChainId);
        if (existing) {
          (0, index_js_2.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
        }
        Networks.set(nameOrChainId, networkFunc);
      }
    };
    _name = new WeakMap();
    _chainId = new WeakMap();
    _plugins = new WeakMap();
    var Network = _Network;
    exports.Network = Network;
    function parseUnits(_value, decimals) {
      const value = String(_value);
      if (!value.match(/^[0-9.]+$/)) {
        throw new Error(`invalid gwei value: ${_value}`);
      }
      const comps = value.split(".");
      if (comps.length === 1) {
        comps.push("");
      }
      if (comps.length !== 2) {
        throw new Error(`invalid gwei value: ${_value}`);
      }
      while (comps[1].length < decimals) {
        comps[1] += "0";
      }
      if (comps[1].length > 9) {
        let frac = BigInt(comps[1].substring(0, 9));
        if (!comps[1].substring(9).match(/^0+$/)) {
          frac++;
        }
        comps[1] = frac.toString();
      }
      return BigInt(comps[0] + comps[1]);
    }
    function getGasStationPlugin(url) {
      return new plugins_network_js_1.FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {
        request.setHeader("User-Agent", "ethers");
        let response;
        try {
          const [_response, _feeData] = await Promise.all([
            request.send(),
            fetchFeeData()
          ]);
          response = _response;
          const payload = response.bodyJson.standard;
          const feeData = {
            gasPrice: _feeData.gasPrice,
            maxFeePerGas: parseUnits(payload.maxFee, 9),
            maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9)
          };
          return feeData;
        } catch (error) {
          (0, index_js_2.assert)(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, "SERVER_ERROR", { request, response, error });
        }
      });
    }
    var injected = false;
    function injectCommonNetworks() {
      if (injected) {
        return;
      }
      injected = true;
      function registerEth(name, chainId, options) {
        const func = function() {
          const network = new Network(name, chainId);
          if (options.ensNetwork != null) {
            network.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));
          }
          network.attachPlugin(new plugins_network_js_1.GasCostPlugin());
          (options.plugins || []).forEach((plugin) => {
            network.attachPlugin(plugin);
          });
          return network;
        };
        Network.register(name, func);
        Network.register(chainId, func);
        if (options.altNames) {
          options.altNames.forEach((name2) => {
            Network.register(name2, func);
          });
        }
      }
      registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
      registerEth("ropsten", 3, { ensNetwork: 3 });
      registerEth("rinkeby", 4, { ensNetwork: 4 });
      registerEth("goerli", 5, { ensNetwork: 5 });
      registerEth("kovan", 42, { ensNetwork: 42 });
      registerEth("sepolia", 11155111, { ensNetwork: 11155111 });
      registerEth("holesky", 17e3, { ensNetwork: 17e3 });
      registerEth("classic", 61, {});
      registerEth("classicKotti", 6, {});
      registerEth("arbitrum", 42161, {
        ensNetwork: 1
      });
      registerEth("arbitrum-goerli", 421613, {});
      registerEth("arbitrum-sepolia", 421614, {});
      registerEth("base", 8453, { ensNetwork: 1 });
      registerEth("base-goerli", 84531, {});
      registerEth("base-sepolia", 84532, {});
      registerEth("bnb", 56, { ensNetwork: 1 });
      registerEth("bnbt", 97, {});
      registerEth("linea", 59144, { ensNetwork: 1 });
      registerEth("linea-goerli", 59140, {});
      registerEth("linea-sepolia", 59141, {});
      registerEth("matic", 137, {
        ensNetwork: 1,
        plugins: [
          getGasStationPlugin("https://gasstation.polygon.technology/v2")
        ]
      });
      registerEth("matic-amoy", 80002, {});
      registerEth("matic-mumbai", 80001, {
        altNames: ["maticMumbai", "maticmum"],
        plugins: [
          getGasStationPlugin("https://gasstation-testnet.polygon.technology/v2")
        ]
      });
      registerEth("optimism", 10, {
        ensNetwork: 1,
        plugins: []
      });
      registerEth("optimism-goerli", 420, {});
      registerEth("optimism-sepolia", 11155420, {});
      registerEth("xdai", 100, { ensNetwork: 1 });
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/subscriber-polling.js
var require_subscriber_polling = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/subscriber-polling.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PollingEventSubscriber = exports.PollingTransactionSubscriber = exports.PollingOrphanSubscriber = exports.PollingBlockTagSubscriber = exports.OnBlockSubscriber = exports.PollingBlockSubscriber = exports.getPollingSubscriber = void 0;
    var index_js_1 = require_utils3();
    function copy(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    function getPollingSubscriber(provider, event) {
      if (event === "block") {
        return new PollingBlockSubscriber(provider);
      }
      if ((0, index_js_1.isHexString)(event, 32)) {
        return new PollingTransactionSubscriber(provider, event);
      }
      (0, index_js_1.assert)(false, "unsupported polling event", "UNSUPPORTED_OPERATION", {
        operation: "getPollingSubscriber",
        info: { event }
      });
    }
    exports.getPollingSubscriber = getPollingSubscriber;
    var _provider, _poller, _interval, _blockNumber, _poll, poll_fn;
    var PollingBlockSubscriber = class {
      /**
       *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
       */
      constructor(provider) {
        __privateAdd(this, _poll);
        __privateAdd(this, _provider, void 0);
        __privateAdd(this, _poller, void 0);
        __privateAdd(this, _interval, void 0);
        // The most recent block we have scanned for events. The value -2
        // indicates we still need to fetch an initial block number
        __privateAdd(this, _blockNumber, void 0);
        __privateSet(this, _provider, provider);
        __privateSet(this, _poller, null);
        __privateSet(this, _interval, 4e3);
        __privateSet(this, _blockNumber, -2);
      }
      /**
       *  The polling interval.
       */
      get pollingInterval() {
        return __privateGet(this, _interval);
      }
      set pollingInterval(value) {
        __privateSet(this, _interval, value);
      }
      start() {
        if (__privateGet(this, _poller)) {
          return;
        }
        __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _poll, poll_fn).bind(this), __privateGet(this, _interval)));
        __privateMethod(this, _poll, poll_fn).call(this);
      }
      stop() {
        if (!__privateGet(this, _poller)) {
          return;
        }
        __privateGet(this, _provider)._clearTimeout(__privateGet(this, _poller));
        __privateSet(this, _poller, null);
      }
      pause(dropWhilePaused) {
        this.stop();
        if (dropWhilePaused) {
          __privateSet(this, _blockNumber, -2);
        }
      }
      resume() {
        this.start();
      }
    };
    _provider = new WeakMap();
    _poller = new WeakMap();
    _interval = new WeakMap();
    _blockNumber = new WeakMap();
    _poll = new WeakSet();
    poll_fn = async function() {
      try {
        const blockNumber = await __privateGet(this, _provider).getBlockNumber();
        if (__privateGet(this, _blockNumber) === -2) {
          __privateSet(this, _blockNumber, blockNumber);
          return;
        }
        if (blockNumber !== __privateGet(this, _blockNumber)) {
          for (let b = __privateGet(this, _blockNumber) + 1; b <= blockNumber; b++) {
            if (__privateGet(this, _poller) == null) {
              return;
            }
            await __privateGet(this, _provider).emit("block", b);
          }
          __privateSet(this, _blockNumber, blockNumber);
        }
      } catch (error) {
      }
      if (__privateGet(this, _poller) == null) {
        return;
      }
      __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _poll, poll_fn).bind(this), __privateGet(this, _interval)));
    };
    exports.PollingBlockSubscriber = PollingBlockSubscriber;
    var _provider2, _poll2, _running;
    var OnBlockSubscriber = class {
      /**
       *  Create a new **OnBlockSubscriber** attached to %%provider%%.
       */
      constructor(provider) {
        __privateAdd(this, _provider2, void 0);
        __privateAdd(this, _poll2, void 0);
        __privateAdd(this, _running, void 0);
        __privateSet(this, _provider2, provider);
        __privateSet(this, _running, false);
        __privateSet(this, _poll2, (blockNumber) => {
          this._poll(blockNumber, __privateGet(this, _provider2));
        });
      }
      /**
       *  Called on every new block.
       */
      async _poll(blockNumber, provider) {
        throw new Error("sub-classes must override this");
      }
      start() {
        if (__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, true);
        __privateGet(this, _poll2).call(this, -2);
        __privateGet(this, _provider2).on("block", __privateGet(this, _poll2));
      }
      stop() {
        if (!__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, false);
        __privateGet(this, _provider2).off("block", __privateGet(this, _poll2));
      }
      pause(dropWhilePaused) {
        this.stop();
      }
      resume() {
        this.start();
      }
    };
    _provider2 = new WeakMap();
    _poll2 = new WeakMap();
    _running = new WeakMap();
    exports.OnBlockSubscriber = OnBlockSubscriber;
    var _tag, _lastBlock;
    var PollingBlockTagSubscriber = class extends OnBlockSubscriber {
      constructor(provider, tag) {
        super(provider);
        __privateAdd(this, _tag, void 0);
        __privateAdd(this, _lastBlock, void 0);
        __privateSet(this, _tag, tag);
        __privateSet(this, _lastBlock, -2);
      }
      pause(dropWhilePaused) {
        if (dropWhilePaused) {
          __privateSet(this, _lastBlock, -2);
        }
        super.pause(dropWhilePaused);
      }
      async _poll(blockNumber, provider) {
        const block = await provider.getBlock(__privateGet(this, _tag));
        if (block == null) {
          return;
        }
        if (__privateGet(this, _lastBlock) === -2) {
          __privateSet(this, _lastBlock, block.number);
        } else if (block.number > __privateGet(this, _lastBlock)) {
          provider.emit(__privateGet(this, _tag), block.number);
          __privateSet(this, _lastBlock, block.number);
        }
      }
    };
    _tag = new WeakMap();
    _lastBlock = new WeakMap();
    exports.PollingBlockTagSubscriber = PollingBlockTagSubscriber;
    var _filter;
    var PollingOrphanSubscriber = class extends OnBlockSubscriber {
      constructor(provider, filter) {
        super(provider);
        __privateAdd(this, _filter, void 0);
        __privateSet(this, _filter, copy(filter));
      }
      async _poll(blockNumber, provider) {
        throw new Error("@TODO");
        console.log(__privateGet(this, _filter));
      }
    };
    _filter = new WeakMap();
    exports.PollingOrphanSubscriber = PollingOrphanSubscriber;
    var _hash;
    var PollingTransactionSubscriber = class extends OnBlockSubscriber {
      /**
       *  Create a new **PollingTransactionSubscriber** attached to
       *  %%provider%%, listening for %%hash%%.
       */
      constructor(provider, hash) {
        super(provider);
        __privateAdd(this, _hash, void 0);
        __privateSet(this, _hash, hash);
      }
      async _poll(blockNumber, provider) {
        const tx = await provider.getTransactionReceipt(__privateGet(this, _hash));
        if (tx) {
          provider.emit(__privateGet(this, _hash), tx);
        }
      }
    };
    _hash = new WeakMap();
    exports.PollingTransactionSubscriber = PollingTransactionSubscriber;
    var _provider3, _filter2, _poller2, _running2, _blockNumber2, _poll3, poll_fn2;
    var PollingEventSubscriber = class {
      /**
       *  Create a new **PollingTransactionSubscriber** attached to
       *  %%provider%%, listening for %%filter%%.
       */
      constructor(provider, filter) {
        __privateAdd(this, _poll3);
        __privateAdd(this, _provider3, void 0);
        __privateAdd(this, _filter2, void 0);
        __privateAdd(this, _poller2, void 0);
        __privateAdd(this, _running2, void 0);
        // The most recent block we have scanned for events. The value -2
        // indicates we still need to fetch an initial block number
        __privateAdd(this, _blockNumber2, void 0);
        __privateSet(this, _provider3, provider);
        __privateSet(this, _filter2, copy(filter));
        __privateSet(this, _poller2, __privateMethod(this, _poll3, poll_fn2).bind(this));
        __privateSet(this, _running2, false);
        __privateSet(this, _blockNumber2, -2);
      }
      start() {
        if (__privateGet(this, _running2)) {
          return;
        }
        __privateSet(this, _running2, true);
        if (__privateGet(this, _blockNumber2) === -2) {
          __privateGet(this, _provider3).getBlockNumber().then((blockNumber) => {
            __privateSet(this, _blockNumber2, blockNumber);
          });
        }
        __privateGet(this, _provider3).on("block", __privateGet(this, _poller2));
      }
      stop() {
        if (!__privateGet(this, _running2)) {
          return;
        }
        __privateSet(this, _running2, false);
        __privateGet(this, _provider3).off("block", __privateGet(this, _poller2));
      }
      pause(dropWhilePaused) {
        this.stop();
        if (dropWhilePaused) {
          __privateSet(this, _blockNumber2, -2);
        }
      }
      resume() {
        this.start();
      }
    };
    _provider3 = new WeakMap();
    _filter2 = new WeakMap();
    _poller2 = new WeakMap();
    _running2 = new WeakMap();
    _blockNumber2 = new WeakMap();
    _poll3 = new WeakSet();
    poll_fn2 = async function(blockNumber) {
      if (__privateGet(this, _blockNumber2) === -2) {
        return;
      }
      const filter = copy(__privateGet(this, _filter2));
      filter.fromBlock = __privateGet(this, _blockNumber2) + 1;
      filter.toBlock = blockNumber;
      const logs = await __privateGet(this, _provider3).getLogs(filter);
      if (logs.length === 0) {
        if (__privateGet(this, _blockNumber2) < blockNumber - 60) {
          __privateSet(this, _blockNumber2, blockNumber - 60);
        }
        return;
      }
      for (const log of logs) {
        __privateGet(this, _provider3).emit(__privateGet(this, _filter2), log);
        __privateSet(this, _blockNumber2, log.blockNumber);
      }
    };
    exports.PollingEventSubscriber = PollingEventSubscriber;
  }
});

// node_modules/ethers/lib.commonjs/providers/abstract-provider.js
var require_abstract_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/abstract-provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbstractProvider = exports.UnmanagedSubscriber = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_constants();
    var index_js_3 = require_contract2();
    var index_js_4 = require_hash();
    var index_js_5 = require_transaction2();
    var index_js_6 = require_utils3();
    var ens_resolver_js_1 = require_ens_resolver();
    var format_js_1 = require_format();
    var network_js_1 = require_network();
    var provider_js_1 = require_provider();
    var subscriber_polling_js_1 = require_subscriber_polling();
    var BN_2 = BigInt(2);
    var MAX_CCIP_REDIRECTS = 10;
    function isPromise(value) {
      return value && typeof value.then === "function";
    }
    function getTag(prefix, value) {
      return prefix + ":" + JSON.stringify(value, (k, v) => {
        if (v == null) {
          return "null";
        }
        if (typeof v === "bigint") {
          return `bigint:${v.toString()}`;
        }
        if (typeof v === "string") {
          return v.toLowerCase();
        }
        if (typeof v === "object" && !Array.isArray(v)) {
          const keys = Object.keys(v);
          keys.sort();
          return keys.reduce((accum, key) => {
            accum[key] = v[key];
            return accum;
          }, {});
        }
        return v;
      });
    }
    var UnmanagedSubscriber = class {
      /**
       *  Create a new UnmanagedSubscriber with %%name%%.
       */
      constructor(name) {
        /**
         *  The name fof the event.
         */
        __publicField(this, "name");
        (0, index_js_6.defineProperties)(this, { name });
      }
      start() {
      }
      stop() {
      }
      pause(dropWhilePaused) {
      }
      resume() {
      }
    };
    exports.UnmanagedSubscriber = UnmanagedSubscriber;
    function copy(value) {
      return JSON.parse(JSON.stringify(value));
    }
    function concisify(items) {
      items = Array.from(new Set(items).values());
      items.sort();
      return items;
    }
    async function getSubscription(_event, provider) {
      if (_event == null) {
        throw new Error("invalid event");
      }
      if (Array.isArray(_event)) {
        _event = { topics: _event };
      }
      if (typeof _event === "string") {
        switch (_event) {
          case "block":
          case "debug":
          case "error":
          case "finalized":
          case "network":
          case "pending":
          case "safe": {
            return { type: _event, tag: _event };
          }
        }
      }
      if ((0, index_js_6.isHexString)(_event, 32)) {
        const hash = _event.toLowerCase();
        return { type: "transaction", tag: getTag("tx", { hash }), hash };
      }
      if (_event.orphan) {
        const event = _event;
        return { type: "orphan", tag: getTag("orphan", event), filter: copy(event) };
      }
      if (_event.address || _event.topics) {
        const event = _event;
        const filter = {
          topics: (event.topics || []).map((t) => {
            if (t == null) {
              return null;
            }
            if (Array.isArray(t)) {
              return concisify(t.map((t2) => t2.toLowerCase()));
            }
            return t.toLowerCase();
          })
        };
        if (event.address) {
          const addresses = [];
          const promises = [];
          const addAddress = (addr) => {
            if ((0, index_js_6.isHexString)(addr)) {
              addresses.push(addr);
            } else {
              promises.push((async () => {
                addresses.push(await (0, index_js_1.resolveAddress)(addr, provider));
              })());
            }
          };
          if (Array.isArray(event.address)) {
            event.address.forEach(addAddress);
          } else {
            addAddress(event.address);
          }
          if (promises.length) {
            await Promise.all(promises);
          }
          filter.address = concisify(addresses.map((a) => a.toLowerCase()));
        }
        return { filter, tag: getTag("event", filter), type: "event" };
      }
      (0, index_js_6.assertArgument)(false, "unknown ProviderEvent", "event", _event);
    }
    function getTime() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    var defaultOptions = {
      cacheTimeout: 250,
      pollingInterval: 4e3
    };
    var _subs, _plugins, _pausedState, _destroyed, _networkPromise, _anyNetwork, _performCache, _lastBlockNumber, _nextTimer, _timers, _disableCcipRead, _options, _perform, perform_fn, _call, call_fn, _checkNetwork, checkNetwork_fn, _getAccountValue, getAccountValue_fn, _getBlock, getBlock_fn, _hasSub, hasSub_fn, _getSub, getSub_fn;
    var AbstractProvider = class {
      /**
       *  Create a new **AbstractProvider** connected to %%network%%, or
       *  use the various network detection capabilities to discover the
       *  [[Network]] if necessary.
       */
      constructor(_network, options) {
        // Shares multiple identical requests made during the same 250ms
        __privateAdd(this, _perform);
        __privateAdd(this, _call);
        __privateAdd(this, _checkNetwork);
        // Account
        __privateAdd(this, _getAccountValue);
        __privateAdd(this, _getBlock);
        __privateAdd(this, _hasSub);
        __privateAdd(this, _getSub);
        __privateAdd(this, _subs, void 0);
        __privateAdd(this, _plugins, void 0);
        // null=unpaused, true=paused+dropWhilePaused, false=paused
        __privateAdd(this, _pausedState, void 0);
        __privateAdd(this, _destroyed, void 0);
        __privateAdd(this, _networkPromise, void 0);
        __privateAdd(this, _anyNetwork, void 0);
        __privateAdd(this, _performCache, void 0);
        // The most recent block number if running an event or -1 if no "block" event
        __privateAdd(this, _lastBlockNumber, void 0);
        __privateAdd(this, _nextTimer, void 0);
        __privateAdd(this, _timers, void 0);
        __privateAdd(this, _disableCcipRead, void 0);
        __privateAdd(this, _options, void 0);
        __privateSet(this, _options, Object.assign({}, defaultOptions, options || {}));
        if (_network === "any") {
          __privateSet(this, _anyNetwork, true);
          __privateSet(this, _networkPromise, null);
        } else if (_network) {
          const network = network_js_1.Network.from(_network);
          __privateSet(this, _anyNetwork, false);
          __privateSet(this, _networkPromise, Promise.resolve(network));
          setTimeout(() => {
            this.emit("network", network, null);
          }, 0);
        } else {
          __privateSet(this, _anyNetwork, false);
          __privateSet(this, _networkPromise, null);
        }
        __privateSet(this, _lastBlockNumber, -1);
        __privateSet(this, _performCache, /* @__PURE__ */ new Map());
        __privateSet(this, _subs, /* @__PURE__ */ new Map());
        __privateSet(this, _plugins, /* @__PURE__ */ new Map());
        __privateSet(this, _pausedState, null);
        __privateSet(this, _destroyed, false);
        __privateSet(this, _nextTimer, 1);
        __privateSet(this, _timers, /* @__PURE__ */ new Map());
        __privateSet(this, _disableCcipRead, false);
      }
      get pollingInterval() {
        return __privateGet(this, _options).pollingInterval;
      }
      /**
       *  Returns ``this``, to allow an **AbstractProvider** to implement
       *  the [[ContractRunner]] interface.
       */
      get provider() {
        return this;
      }
      /**
       *  Returns all the registered plug-ins.
       */
      get plugins() {
        return Array.from(__privateGet(this, _plugins).values());
      }
      /**
       *  Attach a new plug-in.
       */
      attachPlugin(plugin) {
        if (__privateGet(this, _plugins).get(plugin.name)) {
          throw new Error(`cannot replace existing plugin: ${plugin.name} `);
        }
        __privateGet(this, _plugins).set(plugin.name, plugin.connect(this));
        return this;
      }
      /**
       *  Get a plugin by name.
       */
      getPlugin(name) {
        return __privateGet(this, _plugins).get(name) || null;
      }
      /**
       *  Prevent any CCIP-read operation, regardless of whether requested
       *  in a [[call]] using ``enableCcipRead``.
       */
      get disableCcipRead() {
        return __privateGet(this, _disableCcipRead);
      }
      set disableCcipRead(value) {
        __privateSet(this, _disableCcipRead, !!value);
      }
      /**
       *  Resolves to the data for executing the CCIP-read operations.
       */
      async ccipReadFetch(tx, calldata, urls) {
        if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
          return null;
        }
        const sender = tx.to.toLowerCase();
        const data = calldata.toLowerCase();
        const errorMessages = [];
        for (let i = 0; i < urls.length; i++) {
          const url = urls[i];
          const href = url.replace("{sender}", sender).replace("{data}", data);
          const request = new index_js_6.FetchRequest(href);
          if (url.indexOf("{data}") === -1) {
            request.body = { data, sender };
          }
          this.emit("debug", { action: "sendCcipReadFetchRequest", request, index: i, urls });
          let errorMessage = "unknown error";
          let resp;
          try {
            resp = await request.send();
          } catch (error) {
            errorMessages.push(error.message);
            this.emit("debug", { action: "receiveCcipReadFetchError", request, result: { error } });
            continue;
          }
          try {
            const result = resp.bodyJson;
            if (result.data) {
              this.emit("debug", { action: "receiveCcipReadFetchResult", request, result });
              return result.data;
            }
            if (result.message) {
              errorMessage = result.message;
            }
            this.emit("debug", { action: "receiveCcipReadFetchError", request, result });
          } catch (error) {
          }
          (0, index_js_6.assert)(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
          errorMessages.push(errorMessage);
        }
        (0, index_js_6.assert)(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, "OFFCHAIN_FAULT", {
          reason: "500_SERVER_ERROR",
          transaction: tx,
          info: { urls, errorMessages }
        });
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a block before
       *  returning it, to add additional properties or an alternate
       *  sub-class of [[Block]].
       */
      _wrapBlock(value, network) {
        return new provider_js_1.Block((0, format_js_1.formatBlock)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a log before
       *  returning it, to add additional properties or an alternate
       *  sub-class of [[Log]].
       */
      _wrapLog(value, network) {
        return new provider_js_1.Log((0, format_js_1.formatLog)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a transaction
       *  receipt before returning it, to add additional properties or an
       *  alternate sub-class of [[TransactionReceipt]].
       */
      _wrapTransactionReceipt(value, network) {
        return new provider_js_1.TransactionReceipt((0, format_js_1.formatTransactionReceipt)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a transaction
       *  response before returning it, to add additional properties or an
       *  alternate sub-class of [[TransactionResponse]].
       */
      _wrapTransactionResponse(tx, network) {
        return new provider_js_1.TransactionResponse((0, format_js_1.formatTransactionResponse)(tx), this);
      }
      /**
       *  Resolves to the Network, forcing a network detection using whatever
       *  technique the sub-class requires.
       *
       *  Sub-classes **must** override this.
       */
      _detectNetwork() {
        (0, index_js_6.assert)(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
          operation: "_detectNetwork"
        });
      }
      /**
       *  Sub-classes should use this to perform all built-in operations. All
       *  methods sanitizes and normalizes the values passed into this.
       *
       *  Sub-classes **must** override this.
       */
      async _perform(req) {
        (0, index_js_6.assert)(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
          operation: req.method,
          info: req
        });
      }
      // State
      async getBlockNumber() {
        const blockNumber = (0, index_js_6.getNumber)(await __privateMethod(this, _perform, perform_fn).call(this, { method: "getBlockNumber" }), "%response");
        if (__privateGet(this, _lastBlockNumber) >= 0) {
          __privateSet(this, _lastBlockNumber, blockNumber);
        }
        return blockNumber;
      }
      /**
       *  Returns or resolves to the address for %%address%%, resolving ENS
       *  names and [[Addressable]] objects and returning if already an
       *  address.
       */
      _getAddress(address) {
        return (0, index_js_1.resolveAddress)(address, this);
      }
      /**
       *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
       *  negative values and returning if already a valid block tag.
       */
      _getBlockTag(blockTag) {
        if (blockTag == null) {
          return "latest";
        }
        switch (blockTag) {
          case "earliest":
            return "0x0";
          case "finalized":
          case "latest":
          case "pending":
          case "safe":
            return blockTag;
        }
        if ((0, index_js_6.isHexString)(blockTag)) {
          if ((0, index_js_6.isHexString)(blockTag, 32)) {
            return blockTag;
          }
          return (0, index_js_6.toQuantity)(blockTag);
        }
        if (typeof blockTag === "bigint") {
          blockTag = (0, index_js_6.getNumber)(blockTag, "blockTag");
        }
        if (typeof blockTag === "number") {
          if (blockTag >= 0) {
            return (0, index_js_6.toQuantity)(blockTag);
          }
          if (__privateGet(this, _lastBlockNumber) >= 0) {
            return (0, index_js_6.toQuantity)(__privateGet(this, _lastBlockNumber) + blockTag);
          }
          return this.getBlockNumber().then((b) => (0, index_js_6.toQuantity)(b + blockTag));
        }
        (0, index_js_6.assertArgument)(false, "invalid blockTag", "blockTag", blockTag);
      }
      /**
       *  Returns or resolves to a filter for %%filter%%, resolving any ENS
       *  names or [[Addressable]] object and returning if already a valid
       *  filter.
       */
      _getFilter(filter) {
        const topics = (filter.topics || []).map((t) => {
          if (t == null) {
            return null;
          }
          if (Array.isArray(t)) {
            return concisify(t.map((t2) => t2.toLowerCase()));
          }
          return t.toLowerCase();
        });
        const blockHash = "blockHash" in filter ? filter.blockHash : void 0;
        const resolve = (_address, fromBlock2, toBlock2) => {
          let address2 = void 0;
          switch (_address.length) {
            case 0:
              break;
            case 1:
              address2 = _address[0];
              break;
            default:
              _address.sort();
              address2 = _address;
          }
          if (blockHash) {
            if (fromBlock2 != null || toBlock2 != null) {
              throw new Error("invalid filter");
            }
          }
          const filter2 = {};
          if (address2) {
            filter2.address = address2;
          }
          if (topics.length) {
            filter2.topics = topics;
          }
          if (fromBlock2) {
            filter2.fromBlock = fromBlock2;
          }
          if (toBlock2) {
            filter2.toBlock = toBlock2;
          }
          if (blockHash) {
            filter2.blockHash = blockHash;
          }
          return filter2;
        };
        let address = [];
        if (filter.address) {
          if (Array.isArray(filter.address)) {
            for (const addr of filter.address) {
              address.push(this._getAddress(addr));
            }
          } else {
            address.push(this._getAddress(filter.address));
          }
        }
        let fromBlock = void 0;
        if ("fromBlock" in filter) {
          fromBlock = this._getBlockTag(filter.fromBlock);
        }
        let toBlock = void 0;
        if ("toBlock" in filter) {
          toBlock = this._getBlockTag(filter.toBlock);
        }
        if (address.filter((a) => typeof a !== "string").length || fromBlock != null && typeof fromBlock !== "string" || toBlock != null && typeof toBlock !== "string") {
          return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {
            return resolve(result[0], result[1], result[2]);
          });
        }
        return resolve(address, fromBlock, toBlock);
      }
      /**
       *  Returns or resolves to a transaction for %%request%%, resolving
       *  any ENS names or [[Addressable]] and returning if already a valid
       *  transaction.
       */
      _getTransactionRequest(_request) {
        const request = (0, provider_js_1.copyRequest)(_request);
        const promises = [];
        ["to", "from"].forEach((key) => {
          if (request[key] == null) {
            return;
          }
          const addr = (0, index_js_1.resolveAddress)(request[key], this);
          if (isPromise(addr)) {
            promises.push(async function() {
              request[key] = await addr;
            }());
          } else {
            request[key] = addr;
          }
        });
        if (request.blockTag != null) {
          const blockTag = this._getBlockTag(request.blockTag);
          if (isPromise(blockTag)) {
            promises.push(async function() {
              request.blockTag = await blockTag;
            }());
          } else {
            request.blockTag = blockTag;
          }
        }
        if (promises.length) {
          return async function() {
            await Promise.all(promises);
            return request;
          }();
        }
        return request;
      }
      async getNetwork() {
        if (__privateGet(this, _networkPromise) == null) {
          const detectNetwork = (async () => {
            try {
              const network = await this._detectNetwork();
              this.emit("network", network, null);
              return network;
            } catch (error) {
              if (__privateGet(this, _networkPromise) === detectNetwork) {
                __privateSet(this, _networkPromise, null);
              }
              throw error;
            }
          })();
          __privateSet(this, _networkPromise, detectNetwork);
          return (await detectNetwork).clone();
        }
        const networkPromise = __privateGet(this, _networkPromise);
        const [expected, actual] = await Promise.all([
          networkPromise,
          this._detectNetwork()
          // The actual connected network
        ]);
        if (expected.chainId !== actual.chainId) {
          if (__privateGet(this, _anyNetwork)) {
            this.emit("network", actual, expected);
            if (__privateGet(this, _networkPromise) === networkPromise) {
              __privateSet(this, _networkPromise, Promise.resolve(actual));
            }
          } else {
            (0, index_js_6.assert)(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
              event: "changed"
            });
          }
        }
        return expected.clone();
      }
      async getFeeData() {
        const network = await this.getNetwork();
        const getFeeDataFunc = async () => {
          const { _block, gasPrice, priorityFee } = await (0, index_js_6.resolveProperties)({
            _block: __privateMethod(this, _getBlock, getBlock_fn).call(this, "latest", false),
            gasPrice: (async () => {
              try {
                const value = await __privateMethod(this, _perform, perform_fn).call(this, { method: "getGasPrice" });
                return (0, index_js_6.getBigInt)(value, "%response");
              } catch (error) {
              }
              return null;
            })(),
            priorityFee: (async () => {
              try {
                const value = await __privateMethod(this, _perform, perform_fn).call(this, { method: "getPriorityFee" });
                return (0, index_js_6.getBigInt)(value, "%response");
              } catch (error) {
              }
              return null;
            })()
          });
          let maxFeePerGas = null;
          let maxPriorityFeePerGas = null;
          const block = this._wrapBlock(_block, network);
          if (block && block.baseFeePerGas) {
            maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt("1000000000");
            maxFeePerGas = block.baseFeePerGas * BN_2 + maxPriorityFeePerGas;
          }
          return new provider_js_1.FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
        };
        const plugin = network.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
        if (plugin) {
          const req = new index_js_6.FetchRequest(plugin.url);
          const feeData = await plugin.processFunc(getFeeDataFunc, this, req);
          return new provider_js_1.FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);
        }
        return await getFeeDataFunc();
      }
      async estimateGas(_tx) {
        let tx = this._getTransactionRequest(_tx);
        if (isPromise(tx)) {
          tx = await tx;
        }
        return (0, index_js_6.getBigInt)(await __privateMethod(this, _perform, perform_fn).call(this, {
          method: "estimateGas",
          transaction: tx
        }), "%response");
      }
      async call(_tx) {
        const { tx, blockTag } = await (0, index_js_6.resolveProperties)({
          tx: this._getTransactionRequest(_tx),
          blockTag: this._getBlockTag(_tx.blockTag)
        });
        return await __privateMethod(this, _checkNetwork, checkNetwork_fn).call(this, __privateMethod(this, _call, call_fn).call(this, tx, blockTag, _tx.enableCcipRead ? 0 : -1));
      }
      async getBalance(address, blockTag) {
        return (0, index_js_6.getBigInt)(await __privateMethod(this, _getAccountValue, getAccountValue_fn).call(this, { method: "getBalance" }, address, blockTag), "%response");
      }
      async getTransactionCount(address, blockTag) {
        return (0, index_js_6.getNumber)(await __privateMethod(this, _getAccountValue, getAccountValue_fn).call(this, { method: "getTransactionCount" }, address, blockTag), "%response");
      }
      async getCode(address, blockTag) {
        return (0, index_js_6.hexlify)(await __privateMethod(this, _getAccountValue, getAccountValue_fn).call(this, { method: "getCode" }, address, blockTag));
      }
      async getStorage(address, _position, blockTag) {
        const position = (0, index_js_6.getBigInt)(_position, "position");
        return (0, index_js_6.hexlify)(await __privateMethod(this, _getAccountValue, getAccountValue_fn).call(this, { method: "getStorage", position }, address, blockTag));
      }
      // Write
      async broadcastTransaction(signedTx) {
        const { blockNumber, hash, network } = await (0, index_js_6.resolveProperties)({
          blockNumber: this.getBlockNumber(),
          hash: this._perform({
            method: "broadcastTransaction",
            signedTransaction: signedTx
          }),
          network: this.getNetwork()
        });
        const tx = index_js_5.Transaction.from(signedTx);
        if (tx.hash !== hash) {
          throw new Error("@TODO: the returned hash did not match");
        }
        return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
      }
      // Queries
      async getBlock(block, prefetchTxs) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _getBlock, getBlock_fn).call(this, block, !!prefetchTxs)
        });
        if (params == null) {
          return null;
        }
        return this._wrapBlock(params, network);
      }
      async getTransaction(hash) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _perform, perform_fn).call(this, { method: "getTransaction", hash })
        });
        if (params == null) {
          return null;
        }
        return this._wrapTransactionResponse(params, network);
      }
      async getTransactionReceipt(hash) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _perform, perform_fn).call(this, { method: "getTransactionReceipt", hash })
        });
        if (params == null) {
          return null;
        }
        if (params.gasPrice == null && params.effectiveGasPrice == null) {
          const tx = await __privateMethod(this, _perform, perform_fn).call(this, { method: "getTransaction", hash });
          if (tx == null) {
            throw new Error("report this; could not find tx or effectiveGasPrice");
          }
          params.effectiveGasPrice = tx.gasPrice;
        }
        return this._wrapTransactionReceipt(params, network);
      }
      async getTransactionResult(hash) {
        const { result } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          result: __privateMethod(this, _perform, perform_fn).call(this, { method: "getTransactionResult", hash })
        });
        if (result == null) {
          return null;
        }
        return (0, index_js_6.hexlify)(result);
      }
      // Bloom-filter Queries
      async getLogs(_filter) {
        let filter = this._getFilter(_filter);
        if (isPromise(filter)) {
          filter = await filter;
        }
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _perform, perform_fn).call(this, { method: "getLogs", filter })
        });
        return params.map((p) => this._wrapLog(p, network));
      }
      // ENS
      _getProvider(chainId) {
        (0, index_js_6.assert)(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
          operation: "_getProvider()"
        });
      }
      async getResolver(name) {
        return await ens_resolver_js_1.EnsResolver.fromName(this, name);
      }
      async getAvatar(name) {
        const resolver = await this.getResolver(name);
        if (resolver) {
          return await resolver.getAvatar();
        }
        return null;
      }
      async resolveName(name) {
        const resolver = await this.getResolver(name);
        if (resolver) {
          return await resolver.getAddress();
        }
        return null;
      }
      async lookupAddress(address) {
        address = (0, index_js_1.getAddress)(address);
        const node = (0, index_js_4.namehash)(address.substring(2).toLowerCase() + ".addr.reverse");
        try {
          const ensAddr = await ens_resolver_js_1.EnsResolver.getEnsAddress(this);
          const ensContract = new index_js_3.Contract(ensAddr, [
            "function resolver(bytes32) view returns (address)"
          ], this);
          const resolver = await ensContract.resolver(node);
          if (resolver == null || resolver === index_js_2.ZeroAddress) {
            return null;
          }
          const resolverContract = new index_js_3.Contract(resolver, [
            "function name(bytes32) view returns (string)"
          ], this);
          const name = await resolverContract.name(node);
          const check = await this.resolveName(name);
          if (check !== address) {
            return null;
          }
          return name;
        } catch (error) {
          if ((0, index_js_6.isError)(error, "BAD_DATA") && error.value === "0x") {
            return null;
          }
          if ((0, index_js_6.isError)(error, "CALL_EXCEPTION")) {
            return null;
          }
          throw error;
        }
        return null;
      }
      async waitForTransaction(hash, _confirms, timeout) {
        const confirms = _confirms != null ? _confirms : 1;
        if (confirms === 0) {
          return this.getTransactionReceipt(hash);
        }
        return new Promise(async (resolve, reject) => {
          let timer = null;
          const listener = async (blockNumber) => {
            try {
              const receipt = await this.getTransactionReceipt(hash);
              if (receipt != null) {
                if (blockNumber - receipt.blockNumber + 1 >= confirms) {
                  resolve(receipt);
                  if (timer) {
                    clearTimeout(timer);
                    timer = null;
                  }
                  return;
                }
              }
            } catch (error) {
              console.log("EEE", error);
            }
            this.once("block", listener);
          };
          if (timeout != null) {
            timer = setTimeout(() => {
              if (timer == null) {
                return;
              }
              timer = null;
              this.off("block", listener);
              reject((0, index_js_6.makeError)("timeout", "TIMEOUT", { reason: "timeout" }));
            }, timeout);
          }
          listener(await this.getBlockNumber());
        });
      }
      async waitForBlock(blockTag) {
        (0, index_js_6.assert)(false, "not implemented yet", "NOT_IMPLEMENTED", {
          operation: "waitForBlock"
        });
      }
      /**
       *  Clear a timer created using the [[_setTimeout]] method.
       */
      _clearTimeout(timerId) {
        const timer = __privateGet(this, _timers).get(timerId);
        if (!timer) {
          return;
        }
        if (timer.timer) {
          clearTimeout(timer.timer);
        }
        __privateGet(this, _timers).delete(timerId);
      }
      /**
       *  Create a timer that will execute %%func%% after at least %%timeout%%
       *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
       *  in the next event loop.
       *
       *  [Pausing](AbstractProvider-paused) the provider will pause any
       *  associated timers.
       */
      _setTimeout(_func, timeout) {
        if (timeout == null) {
          timeout = 0;
        }
        const timerId = __privateWrapper(this, _nextTimer)._++;
        const func = () => {
          __privateGet(this, _timers).delete(timerId);
          _func();
        };
        if (this.paused) {
          __privateGet(this, _timers).set(timerId, { timer: null, func, time: timeout });
        } else {
          const timer = setTimeout(func, timeout);
          __privateGet(this, _timers).set(timerId, { timer, func, time: getTime() });
        }
        return timerId;
      }
      /**
       *  Perform %%func%% on each subscriber.
       */
      _forEachSubscriber(func) {
        for (const sub of __privateGet(this, _subs).values()) {
          func(sub.subscriber);
        }
      }
      /**
       *  Sub-classes may override this to customize subscription
       *  implementations.
       */
      _getSubscriber(sub) {
        switch (sub.type) {
          case "debug":
          case "error":
          case "network":
            return new UnmanagedSubscriber(sub.type);
          case "block": {
            const subscriber = new subscriber_polling_js_1.PollingBlockSubscriber(this);
            subscriber.pollingInterval = this.pollingInterval;
            return subscriber;
          }
          case "safe":
          case "finalized":
            return new subscriber_polling_js_1.PollingBlockTagSubscriber(this, sub.type);
          case "event":
            return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
          case "transaction":
            return new subscriber_polling_js_1.PollingTransactionSubscriber(this, sub.hash);
          case "orphan":
            return new subscriber_polling_js_1.PollingOrphanSubscriber(this, sub.filter);
        }
        throw new Error(`unsupported event: ${sub.type}`);
      }
      /**
       *  If a [[Subscriber]] fails and needs to replace itself, this
       *  method may be used.
       *
       *  For example, this is used for providers when using the
       *  ``eth_getFilterChanges`` method, which can return null if state
       *  filters are not supported by the backend, allowing the Subscriber
       *  to swap in a [[PollingEventSubscriber]].
       */
      _recoverSubscriber(oldSub, newSub) {
        for (const sub of __privateGet(this, _subs).values()) {
          if (sub.subscriber === oldSub) {
            if (sub.started) {
              sub.subscriber.stop();
            }
            sub.subscriber = newSub;
            if (sub.started) {
              newSub.start();
            }
            if (__privateGet(this, _pausedState) != null) {
              newSub.pause(__privateGet(this, _pausedState));
            }
            break;
          }
        }
      }
      async on(event, listener) {
        const sub = await __privateMethod(this, _getSub, getSub_fn).call(this, event);
        sub.listeners.push({ listener, once: false });
        if (!sub.started) {
          sub.subscriber.start();
          sub.started = true;
          if (__privateGet(this, _pausedState) != null) {
            sub.subscriber.pause(__privateGet(this, _pausedState));
          }
        }
        return this;
      }
      async once(event, listener) {
        const sub = await __privateMethod(this, _getSub, getSub_fn).call(this, event);
        sub.listeners.push({ listener, once: true });
        if (!sub.started) {
          sub.subscriber.start();
          sub.started = true;
          if (__privateGet(this, _pausedState) != null) {
            sub.subscriber.pause(__privateGet(this, _pausedState));
          }
        }
        return this;
      }
      async emit(event, ...args) {
        const sub = await __privateMethod(this, _hasSub, hasSub_fn).call(this, event, args);
        if (!sub || sub.listeners.length === 0) {
          return false;
        }
        ;
        const count = sub.listeners.length;
        sub.listeners = sub.listeners.filter(({ listener, once }) => {
          const payload = new index_js_6.EventPayload(this, once ? null : listener, event);
          try {
            listener.call(this, ...args, payload);
          } catch (error) {
          }
          return !once;
        });
        if (sub.listeners.length === 0) {
          if (sub.started) {
            sub.subscriber.stop();
          }
          __privateGet(this, _subs).delete(sub.tag);
        }
        return count > 0;
      }
      async listenerCount(event) {
        if (event) {
          const sub = await __privateMethod(this, _hasSub, hasSub_fn).call(this, event);
          if (!sub) {
            return 0;
          }
          return sub.listeners.length;
        }
        let total = 0;
        for (const { listeners } of __privateGet(this, _subs).values()) {
          total += listeners.length;
        }
        return total;
      }
      async listeners(event) {
        if (event) {
          const sub = await __privateMethod(this, _hasSub, hasSub_fn).call(this, event);
          if (!sub) {
            return [];
          }
          return sub.listeners.map(({ listener }) => listener);
        }
        let result = [];
        for (const { listeners } of __privateGet(this, _subs).values()) {
          result = result.concat(listeners.map(({ listener }) => listener));
        }
        return result;
      }
      async off(event, listener) {
        const sub = await __privateMethod(this, _hasSub, hasSub_fn).call(this, event);
        if (!sub) {
          return this;
        }
        if (listener) {
          const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
          if (index >= 0) {
            sub.listeners.splice(index, 1);
          }
        }
        if (!listener || sub.listeners.length === 0) {
          if (sub.started) {
            sub.subscriber.stop();
          }
          __privateGet(this, _subs).delete(sub.tag);
        }
        return this;
      }
      async removeAllListeners(event) {
        if (event) {
          const { tag, started, subscriber } = await __privateMethod(this, _getSub, getSub_fn).call(this, event);
          if (started) {
            subscriber.stop();
          }
          __privateGet(this, _subs).delete(tag);
        } else {
          for (const [tag, { started, subscriber }] of __privateGet(this, _subs)) {
            if (started) {
              subscriber.stop();
            }
            __privateGet(this, _subs).delete(tag);
          }
        }
        return this;
      }
      // Alias for "on"
      async addListener(event, listener) {
        return await this.on(event, listener);
      }
      // Alias for "off"
      async removeListener(event, listener) {
        return this.off(event, listener);
      }
      /**
       *  If this provider has been destroyed using the [[destroy]] method.
       *
       *  Once destroyed, all resources are reclaimed, internal event loops
       *  and timers are cleaned up and no further requests may be sent to
       *  the provider.
       */
      get destroyed() {
        return __privateGet(this, _destroyed);
      }
      /**
       *  Sub-classes may use this to shutdown any sockets or release their
       *  resources and reject any pending requests.
       *
       *  Sub-classes **must** call ``super.destroy()``.
       */
      destroy() {
        this.removeAllListeners();
        for (const timerId of __privateGet(this, _timers).keys()) {
          this._clearTimeout(timerId);
        }
        __privateSet(this, _destroyed, true);
      }
      /**
       *  Whether the provider is currently paused.
       *
       *  A paused provider will not emit any events, and generally should
       *  not make any requests to the network, but that is up to sub-classes
       *  to manage.
       *
       *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
       *  which will buffer any events that occur while paused until the
       *  provider is unpaused.
       */
      get paused() {
        return __privateGet(this, _pausedState) != null;
      }
      set paused(pause) {
        if (!!pause === this.paused) {
          return;
        }
        if (this.paused) {
          this.resume();
        } else {
          this.pause(false);
        }
      }
      /**
       *  Pause the provider. If %%dropWhilePaused%%, any events that occur
       *  while paused are dropped, otherwise all events will be emitted once
       *  the provider is unpaused.
       */
      pause(dropWhilePaused) {
        __privateSet(this, _lastBlockNumber, -1);
        if (__privateGet(this, _pausedState) != null) {
          if (__privateGet(this, _pausedState) == !!dropWhilePaused) {
            return;
          }
          (0, index_js_6.assert)(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
            operation: "pause"
          });
        }
        this._forEachSubscriber((s) => s.pause(dropWhilePaused));
        __privateSet(this, _pausedState, !!dropWhilePaused);
        for (const timer of __privateGet(this, _timers).values()) {
          if (timer.timer) {
            clearTimeout(timer.timer);
          }
          timer.time = getTime() - timer.time;
        }
      }
      /**
       *  Resume the provider.
       */
      resume() {
        if (__privateGet(this, _pausedState) == null) {
          return;
        }
        this._forEachSubscriber((s) => s.resume());
        __privateSet(this, _pausedState, null);
        for (const timer of __privateGet(this, _timers).values()) {
          let timeout = timer.time;
          if (timeout < 0) {
            timeout = 0;
          }
          timer.time = getTime();
          setTimeout(timer.func, timeout);
        }
      }
    };
    _subs = new WeakMap();
    _plugins = new WeakMap();
    _pausedState = new WeakMap();
    _destroyed = new WeakMap();
    _networkPromise = new WeakMap();
    _anyNetwork = new WeakMap();
    _performCache = new WeakMap();
    _lastBlockNumber = new WeakMap();
    _nextTimer = new WeakMap();
    _timers = new WeakMap();
    _disableCcipRead = new WeakMap();
    _options = new WeakMap();
    _perform = new WeakSet();
    perform_fn = async function(req) {
      const timeout = __privateGet(this, _options).cacheTimeout;
      if (timeout < 0) {
        return await this._perform(req);
      }
      const tag = getTag(req.method, req);
      let perform = __privateGet(this, _performCache).get(tag);
      if (!perform) {
        perform = this._perform(req);
        __privateGet(this, _performCache).set(tag, perform);
        setTimeout(() => {
          if (__privateGet(this, _performCache).get(tag) === perform) {
            __privateGet(this, _performCache).delete(tag);
          }
        }, timeout);
      }
      return await perform;
    };
    _call = new WeakSet();
    call_fn = async function(tx, blockTag, attempt) {
      (0, index_js_6.assert)(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
        reason: "TOO_MANY_REDIRECTS",
        transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
      });
      const transaction = (0, provider_js_1.copyRequest)(tx);
      try {
        return (0, index_js_6.hexlify)(await this._perform({ method: "call", transaction, blockTag }));
      } catch (error) {
        if (!this.disableCcipRead && (0, index_js_6.isCallException)(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && (0, index_js_6.dataSlice)(error.data, 0, 4) === "0x556f1830") {
          const data = error.data;
          const txSender = await (0, index_js_1.resolveAddress)(transaction.to, this);
          let ccipArgs;
          try {
            ccipArgs = parseOffchainLookup((0, index_js_6.dataSlice)(error.data, 4));
          } catch (error2) {
            (0, index_js_6.assert)(false, error2.message, "OFFCHAIN_FAULT", {
              reason: "BAD_DATA",
              transaction,
              info: { data }
            });
          }
          (0, index_js_6.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
            action: "call",
            data,
            reason: "OffchainLookup",
            transaction,
            invocation: null,
            revert: {
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              name: "OffchainLookup",
              args: ccipArgs.errorArgs
            }
          });
          const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
          (0, index_js_6.assert)(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
            reason: "FETCH_FAILED",
            transaction,
            info: { data: error.data, errorArgs: ccipArgs.errorArgs }
          });
          const tx2 = {
            to: txSender,
            data: (0, index_js_6.concat)([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
          };
          this.emit("debug", { action: "sendCcipReadCall", transaction: tx2 });
          try {
            const result = await __privateMethod(this, _call, call_fn).call(this, tx2, blockTag, attempt + 1);
            this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx2), result });
            return result;
          } catch (error2) {
            this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx2), error: error2 });
            throw error2;
          }
        }
        throw error;
      }
    };
    _checkNetwork = new WeakSet();
    checkNetwork_fn = async function(promise) {
      const { value } = await (0, index_js_6.resolveProperties)({
        network: this.getNetwork(),
        value: promise
      });
      return value;
    };
    _getAccountValue = new WeakSet();
    getAccountValue_fn = async function(request, _address, _blockTag) {
      let address = this._getAddress(_address);
      let blockTag = this._getBlockTag(_blockTag);
      if (typeof address !== "string" || typeof blockTag !== "string") {
        [address, blockTag] = await Promise.all([address, blockTag]);
      }
      return await __privateMethod(this, _checkNetwork, checkNetwork_fn).call(this, __privateMethod(this, _perform, perform_fn).call(this, Object.assign(request, { address, blockTag })));
    };
    _getBlock = new WeakSet();
    getBlock_fn = async function(block, includeTransactions) {
      if ((0, index_js_6.isHexString)(block, 32)) {
        return await __privateMethod(this, _perform, perform_fn).call(this, {
          method: "getBlock",
          blockHash: block,
          includeTransactions
        });
      }
      let blockTag = this._getBlockTag(block);
      if (typeof blockTag !== "string") {
        blockTag = await blockTag;
      }
      return await __privateMethod(this, _perform, perform_fn).call(this, {
        method: "getBlock",
        blockTag,
        includeTransactions
      });
    };
    _hasSub = new WeakSet();
    hasSub_fn = async function(event, emitArgs) {
      let sub = await getSubscription(event, this);
      if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
        sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
      }
      return __privateGet(this, _subs).get(sub.tag) || null;
    };
    _getSub = new WeakSet();
    getSub_fn = async function(event) {
      const subscription = await getSubscription(event, this);
      const tag = subscription.tag;
      let sub = __privateGet(this, _subs).get(tag);
      if (!sub) {
        const subscriber = this._getSubscriber(subscription);
        const addressableMap = /* @__PURE__ */ new WeakMap();
        const nameMap = /* @__PURE__ */ new Map();
        sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
        __privateGet(this, _subs).set(tag, sub);
      }
      return sub;
    };
    exports.AbstractProvider = AbstractProvider;
    function _parseString(result, start) {
      try {
        const bytes = _parseBytes(result, start);
        if (bytes) {
          return (0, index_js_6.toUtf8String)(bytes);
        }
      } catch (error) {
      }
      return null;
    }
    function _parseBytes(result, start) {
      if (result === "0x") {
        return null;
      }
      try {
        const offset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, start, start + 32));
        const length = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, offset, offset + 32));
        return (0, index_js_6.dataSlice)(result, offset + 32, offset + 32 + length);
      } catch (error) {
      }
      return null;
    }
    function numPad(value) {
      const result = (0, index_js_6.toBeArray)(value);
      if (result.length > 32) {
        throw new Error("internal; should not happen");
      }
      const padded = new Uint8Array(32);
      padded.set(result, 32 - result.length);
      return padded;
    }
    function bytesPad(value) {
      if (value.length % 32 === 0) {
        return value;
      }
      const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
      result.set(value);
      return result;
    }
    var empty = new Uint8Array([]);
    function encodeBytes(datas) {
      const result = [];
      let byteCount = 0;
      for (let i = 0; i < datas.length; i++) {
        result.push(empty);
        byteCount += 32;
      }
      for (let i = 0; i < datas.length; i++) {
        const data = (0, index_js_6.getBytes)(datas[i]);
        result[i] = numPad(byteCount);
        result.push(numPad(data.length));
        result.push(bytesPad(data));
        byteCount += 32 + Math.ceil(data.length / 32) * 32;
      }
      return (0, index_js_6.concat)(result);
    }
    var zeros = "0x0000000000000000000000000000000000000000000000000000000000000000";
    function parseOffchainLookup(data) {
      const result = {
        sender: "",
        urls: [],
        calldata: "",
        selector: "",
        extraData: "",
        errorArgs: []
      };
      (0, index_js_6.assert)((0, index_js_6.dataLength)(data) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
        reason: "insufficient OffchainLookup data"
      });
      const sender = (0, index_js_6.dataSlice)(data, 0, 32);
      (0, index_js_6.assert)((0, index_js_6.dataSlice)(sender, 0, 12) === (0, index_js_6.dataSlice)(zeros, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup sender"
      });
      result.sender = (0, index_js_6.dataSlice)(sender, 12);
      try {
        const urls = [];
        const urlsOffset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, 32, 64));
        const urlsLength = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, urlsOffset, urlsOffset + 32));
        const urlsData = (0, index_js_6.dataSlice)(data, urlsOffset + 32);
        for (let u = 0; u < urlsLength; u++) {
          const url = _parseString(urlsData, u * 32);
          if (url == null) {
            throw new Error("abort");
          }
          urls.push(url);
        }
        result.urls = urls;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup urls"
        });
      }
      try {
        const calldata = _parseBytes(data, 64);
        if (calldata == null) {
          throw new Error("abort");
        }
        result.calldata = calldata;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup calldata"
        });
      }
      (0, index_js_6.assert)((0, index_js_6.dataSlice)(data, 100, 128) === (0, index_js_6.dataSlice)(zeros, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup callbaackSelector"
      });
      result.selector = (0, index_js_6.dataSlice)(data, 96, 100);
      try {
        const extraData = _parseBytes(data, 128);
        if (extraData == null) {
          throw new Error("abort");
        }
        result.extraData = extraData;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup extraData"
        });
      }
      result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k) => result[k]);
      return result;
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/abstract-signer.js
var require_abstract_signer = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/abstract-signer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VoidSigner = exports.AbstractSigner = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_transaction2();
    var index_js_3 = require_utils3();
    var provider_js_1 = require_provider();
    function checkProvider(signer, operation) {
      if (signer.provider) {
        return signer.provider;
      }
      (0, index_js_3.assert)(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
    }
    async function populate(signer, tx) {
      let pop = (0, provider_js_1.copyRequest)(tx);
      if (pop.to != null) {
        pop.to = (0, index_js_1.resolveAddress)(pop.to, signer);
      }
      if (pop.from != null) {
        const from = pop.from;
        pop.from = Promise.all([
          signer.getAddress(),
          (0, index_js_1.resolveAddress)(from, signer)
        ]).then(([address, from2]) => {
          (0, index_js_3.assertArgument)(address.toLowerCase() === from2.toLowerCase(), "transaction from mismatch", "tx.from", from2);
          return address;
        });
      } else {
        pop.from = signer.getAddress();
      }
      return await (0, index_js_3.resolveProperties)(pop);
    }
    var AbstractSigner = class {
      /**
       *  Creates a new Signer connected to %%provider%%.
       */
      constructor(provider) {
        /**
         *  The provider this signer is connected to.
         */
        __publicField(this, "provider");
        (0, index_js_3.defineProperties)(this, { provider: provider || null });
      }
      async getNonce(blockTag) {
        return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
      }
      async populateCall(tx) {
        const pop = await populate(this, tx);
        return pop;
      }
      async populateTransaction(tx) {
        const provider = checkProvider(this, "populateTransaction");
        const pop = await populate(this, tx);
        if (pop.nonce == null) {
          pop.nonce = await this.getNonce("pending");
        }
        if (pop.gasLimit == null) {
          pop.gasLimit = await this.estimateGas(pop);
        }
        const network = await this.provider.getNetwork();
        if (pop.chainId != null) {
          const chainId = (0, index_js_3.getBigInt)(pop.chainId);
          (0, index_js_3.assertArgument)(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
        } else {
          pop.chainId = network.chainId;
        }
        const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;
        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
          (0, index_js_3.assertArgument)(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
        } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
          (0, index_js_3.assertArgument)(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
        }
        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
          pop.type = 2;
        } else if (pop.type === 0 || pop.type === 1) {
          const feeData = await provider.getFeeData();
          (0, index_js_3.assert)(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
            operation: "getGasPrice"
          });
          if (pop.gasPrice == null) {
            pop.gasPrice = feeData.gasPrice;
          }
        } else {
          const feeData = await provider.getFeeData();
          if (pop.type == null) {
            if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
              pop.type = 2;
              if (pop.gasPrice != null) {
                const gasPrice = pop.gasPrice;
                delete pop.gasPrice;
                pop.maxFeePerGas = gasPrice;
                pop.maxPriorityFeePerGas = gasPrice;
              } else {
                if (pop.maxFeePerGas == null) {
                  pop.maxFeePerGas = feeData.maxFeePerGas;
                }
                if (pop.maxPriorityFeePerGas == null) {
                  pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                }
              }
            } else if (feeData.gasPrice != null) {
              (0, index_js_3.assert)(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
                operation: "populateTransaction"
              });
              if (pop.gasPrice == null) {
                pop.gasPrice = feeData.gasPrice;
              }
              pop.type = 0;
            } else {
              (0, index_js_3.assert)(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
                operation: "signer.getFeeData"
              });
            }
          } else if (pop.type === 2 || pop.type === 3) {
            if (pop.maxFeePerGas == null) {
              pop.maxFeePerGas = feeData.maxFeePerGas;
            }
            if (pop.maxPriorityFeePerGas == null) {
              pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
            }
          }
        }
        return await (0, index_js_3.resolveProperties)(pop);
      }
      async estimateGas(tx) {
        return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
      }
      async call(tx) {
        return checkProvider(this, "call").call(await this.populateCall(tx));
      }
      async resolveName(name) {
        const provider = checkProvider(this, "resolveName");
        return await provider.resolveName(name);
      }
      async sendTransaction(tx) {
        const provider = checkProvider(this, "sendTransaction");
        const pop = await this.populateTransaction(tx);
        delete pop.from;
        const txObj = index_js_2.Transaction.from(pop);
        return await provider.broadcastTransaction(await this.signTransaction(txObj));
      }
    };
    exports.AbstractSigner = AbstractSigner;
    var _throwUnsupported, throwUnsupported_fn;
    var _VoidSigner = class _VoidSigner extends AbstractSigner {
      /**
       *  Creates a new **VoidSigner** with %%address%% attached to
       *  %%provider%%.
       */
      constructor(address, provider) {
        super(provider);
        __privateAdd(this, _throwUnsupported);
        /**
         *  The signer address.
         */
        __publicField(this, "address");
        (0, index_js_3.defineProperties)(this, { address });
      }
      async getAddress() {
        return this.address;
      }
      connect(provider) {
        return new _VoidSigner(this.address, provider);
      }
      async signTransaction(tx) {
        __privateMethod(this, _throwUnsupported, throwUnsupported_fn).call(this, "transactions", "signTransaction");
      }
      async signMessage(message) {
        __privateMethod(this, _throwUnsupported, throwUnsupported_fn).call(this, "messages", "signMessage");
      }
      async signTypedData(domain, types, value) {
        __privateMethod(this, _throwUnsupported, throwUnsupported_fn).call(this, "typed-data", "signTypedData");
      }
    };
    _throwUnsupported = new WeakSet();
    throwUnsupported_fn = function(suffix, operation) {
      (0, index_js_3.assert)(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
    };
    var VoidSigner = _VoidSigner;
    exports.VoidSigner = VoidSigner;
  }
});

// node_modules/ethers/lib.commonjs/providers/community.js
var require_community = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/community.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.showThrottleMessage = void 0;
    var shown = /* @__PURE__ */ new Set();
    function showThrottleMessage(service) {
      if (shown.has(service)) {
        return;
      }
      shown.add(service);
      console.log("========= NOTICE =========");
      console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
      console.log("");
      console.log("The default API keys for each service are provided as a highly-throttled,");
      console.log("community resource for low-traffic projects and early prototyping.");
      console.log("");
      console.log("While your application will continue to function, we highly recommended");
      console.log("signing up for your own API keys to improve performance, increase your");
      console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
      console.log("");
      console.log("For more details: https://docs.ethers.org/api-keys/");
      console.log("==========================");
    }
    exports.showThrottleMessage = showThrottleMessage;
  }
});

// node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js
var require_subscriber_filterid = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilterIdPendingSubscriber = exports.FilterIdEventSubscriber = exports.FilterIdSubscriber = void 0;
    var index_js_1 = require_utils3();
    var subscriber_polling_js_1 = require_subscriber_polling();
    function copy(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    var _provider, _filterIdPromise, _poller, _running, _network, _hault, _poll, poll_fn, _teardown, teardown_fn;
    var FilterIdSubscriber = class {
      /**
       *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
       *  and [[_emitResults]] to setup the subscription and provide the event
       *  to the %%provider%%.
       */
      constructor(provider) {
        __privateAdd(this, _poll);
        __privateAdd(this, _teardown);
        __privateAdd(this, _provider, void 0);
        __privateAdd(this, _filterIdPromise, void 0);
        __privateAdd(this, _poller, void 0);
        __privateAdd(this, _running, void 0);
        __privateAdd(this, _network, void 0);
        __privateAdd(this, _hault, void 0);
        __privateSet(this, _provider, provider);
        __privateSet(this, _filterIdPromise, null);
        __privateSet(this, _poller, __privateMethod(this, _poll, poll_fn).bind(this));
        __privateSet(this, _running, false);
        __privateSet(this, _network, null);
        __privateSet(this, _hault, false);
      }
      /**
       *  Sub-classes **must** override this to begin the subscription.
       */
      _subscribe(provider) {
        throw new Error("subclasses must override this");
      }
      /**
       *  Sub-classes **must** override this handle the events.
       */
      _emitResults(provider, result) {
        throw new Error("subclasses must override this");
      }
      /**
       *  Sub-classes **must** override this handle recovery on errors.
       */
      _recover(provider) {
        throw new Error("subclasses must override this");
      }
      start() {
        if (__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, true);
        __privateMethod(this, _poll, poll_fn).call(this, -2);
      }
      stop() {
        if (!__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, false);
        __privateSet(this, _hault, true);
        __privateMethod(this, _teardown, teardown_fn).call(this);
        __privateGet(this, _provider).off("block", __privateGet(this, _poller));
      }
      pause(dropWhilePaused) {
        if (dropWhilePaused) {
          __privateMethod(this, _teardown, teardown_fn).call(this);
        }
        __privateGet(this, _provider).off("block", __privateGet(this, _poller));
      }
      resume() {
        this.start();
      }
    };
    _provider = new WeakMap();
    _filterIdPromise = new WeakMap();
    _poller = new WeakMap();
    _running = new WeakMap();
    _network = new WeakMap();
    _hault = new WeakMap();
    _poll = new WeakSet();
    poll_fn = async function(blockNumber) {
      try {
        if (__privateGet(this, _filterIdPromise) == null) {
          __privateSet(this, _filterIdPromise, this._subscribe(__privateGet(this, _provider)));
        }
        let filterId = null;
        try {
          filterId = await __privateGet(this, _filterIdPromise);
        } catch (error) {
          if (!(0, index_js_1.isError)(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") {
            throw error;
          }
        }
        if (filterId == null) {
          __privateSet(this, _filterIdPromise, null);
          __privateGet(this, _provider)._recoverSubscriber(this, this._recover(__privateGet(this, _provider)));
          return;
        }
        const network = await __privateGet(this, _provider).getNetwork();
        if (!__privateGet(this, _network)) {
          __privateSet(this, _network, network);
        }
        if (__privateGet(this, _network).chainId !== network.chainId) {
          throw new Error("chaid changed");
        }
        if (__privateGet(this, _hault)) {
          return;
        }
        const result = await __privateGet(this, _provider).send("eth_getFilterChanges", [filterId]);
        await this._emitResults(__privateGet(this, _provider), result);
      } catch (error) {
        console.log("@TODO", error);
      }
      __privateGet(this, _provider).once("block", __privateGet(this, _poller));
    };
    _teardown = new WeakSet();
    teardown_fn = function() {
      const filterIdPromise = __privateGet(this, _filterIdPromise);
      if (filterIdPromise) {
        __privateSet(this, _filterIdPromise, null);
        filterIdPromise.then((filterId) => {
          if (__privateGet(this, _provider).destroyed) {
            return;
          }
          __privateGet(this, _provider).send("eth_uninstallFilter", [filterId]);
        });
      }
    };
    exports.FilterIdSubscriber = FilterIdSubscriber;
    var _event;
    var FilterIdEventSubscriber = class extends FilterIdSubscriber {
      /**
       *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
       *  listening for %%filter%%.
       */
      constructor(provider, filter) {
        super(provider);
        __privateAdd(this, _event, void 0);
        __privateSet(this, _event, copy(filter));
      }
      _recover(provider) {
        return new subscriber_polling_js_1.PollingEventSubscriber(provider, __privateGet(this, _event));
      }
      async _subscribe(provider) {
        const filterId = await provider.send("eth_newFilter", [__privateGet(this, _event)]);
        return filterId;
      }
      async _emitResults(provider, results) {
        for (const result of results) {
          provider.emit(__privateGet(this, _event), provider._wrapLog(result, provider._network));
        }
      }
    };
    _event = new WeakMap();
    exports.FilterIdEventSubscriber = FilterIdEventSubscriber;
    var FilterIdPendingSubscriber = class extends FilterIdSubscriber {
      async _subscribe(provider) {
        return await provider.send("eth_newPendingTransactionFilter", []);
      }
      async _emitResults(provider, results) {
        for (const result of results) {
          provider.emit("pending", result);
        }
      }
    };
    exports.FilterIdPendingSubscriber = FilterIdPendingSubscriber;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js
var require_provider_jsonrpc = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonRpcProvider = exports.JsonRpcApiPollingProvider = exports.JsonRpcApiProvider = exports.JsonRpcSigner = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address2();
    var index_js_3 = require_hash();
    var index_js_4 = require_transaction2();
    var index_js_5 = require_utils3();
    var abstract_provider_js_1 = require_abstract_provider();
    var abstract_signer_js_1 = require_abstract_signer();
    var network_js_1 = require_network();
    var subscriber_filterid_js_1 = require_subscriber_filterid();
    var subscriber_polling_js_1 = require_subscriber_polling();
    var Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
    function deepCopy(value) {
      if (value == null || Primitive.indexOf(typeof value) >= 0) {
        return value;
      }
      if (typeof value.getAddress === "function") {
        return value;
      }
      if (Array.isArray(value)) {
        return value.map(deepCopy);
      }
      if (typeof value === "object") {
        return Object.keys(value).reduce((accum, key) => {
          accum[key] = value[key];
          return accum;
        }, {});
      }
      throw new Error(`should not happen: ${value} (${typeof value})`);
    }
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(resolve, duration);
      });
    }
    function getLowerCase(value) {
      if (value) {
        return value.toLowerCase();
      }
      return value;
    }
    function isPollable(value) {
      return value && typeof value.pollingInterval === "number";
    }
    var defaultOptions = {
      polling: false,
      staticNetwork: null,
      batchStallTime: 10,
      batchMaxSize: 1 << 20,
      batchMaxCount: 100,
      cacheTimeout: 250,
      pollingInterval: 4e3
    };
    var JsonRpcSigner = class extends abstract_signer_js_1.AbstractSigner {
      constructor(provider, address) {
        super(provider);
        __publicField(this, "address");
        address = (0, index_js_2.getAddress)(address);
        (0, index_js_5.defineProperties)(this, { address });
      }
      connect(provider) {
        (0, index_js_5.assert)(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
          operation: "signer.connect"
        });
      }
      async getAddress() {
        return this.address;
      }
      // JSON-RPC will automatially fill in nonce, etc. so we just check from
      async populateTransaction(tx) {
        return await this.populateCall(tx);
      }
      // Returns just the hash of the transaction after sent, which is what
      // the bare JSON-RPC API does;
      async sendUncheckedTransaction(_tx) {
        const tx = deepCopy(_tx);
        const promises = [];
        if (tx.from) {
          const _from = tx.from;
          promises.push((async () => {
            const from = await (0, index_js_2.resolveAddress)(_from, this.provider);
            (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
            tx.from = from;
          })());
        } else {
          tx.from = this.address;
        }
        if (tx.gasLimit == null) {
          promises.push((async () => {
            tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
          })());
        }
        if (tx.to != null) {
          const _to = tx.to;
          promises.push((async () => {
            tx.to = await (0, index_js_2.resolveAddress)(_to, this.provider);
          })());
        }
        if (promises.length) {
          await Promise.all(promises);
        }
        const hexTx = this.provider.getRpcTransaction(tx);
        return this.provider.send("eth_sendTransaction", [hexTx]);
      }
      async sendTransaction(tx) {
        const blockNumber = await this.provider.getBlockNumber();
        const hash = await this.sendUncheckedTransaction(tx);
        return await new Promise((resolve, reject) => {
          const timeouts = [1e3, 100];
          let invalids = 0;
          const checkTx = async () => {
            try {
              const tx2 = await this.provider.getTransaction(hash);
              if (tx2 != null) {
                resolve(tx2.replaceableTransaction(blockNumber));
                return;
              }
            } catch (error) {
              if ((0, index_js_5.isError)(error, "CANCELLED") || (0, index_js_5.isError)(error, "BAD_DATA") || (0, index_js_5.isError)(error, "NETWORK_ERROR") || (0, index_js_5.isError)(error, "UNSUPPORTED_OPERATION")) {
                if (error.info == null) {
                  error.info = {};
                }
                error.info.sendTransactionHash = hash;
                reject(error);
                return;
              }
              if ((0, index_js_5.isError)(error, "INVALID_ARGUMENT")) {
                invalids++;
                if (error.info == null) {
                  error.info = {};
                }
                error.info.sendTransactionHash = hash;
                if (invalids > 10) {
                  reject(error);
                  return;
                }
              }
              this.provider.emit("error", (0, index_js_5.makeError)("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error }));
            }
            this.provider._setTimeout(() => {
              checkTx();
            }, timeouts.pop() || 4e3);
          };
          checkTx();
        });
      }
      async signTransaction(_tx) {
        const tx = deepCopy(_tx);
        if (tx.from) {
          const from = await (0, index_js_2.resolveAddress)(tx.from, this.provider);
          (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
          tx.from = from;
        } else {
          tx.from = this.address;
        }
        const hexTx = this.provider.getRpcTransaction(tx);
        return await this.provider.send("eth_signTransaction", [hexTx]);
      }
      async signMessage(_message) {
        const message = typeof _message === "string" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;
        return await this.provider.send("personal_sign", [
          (0, index_js_5.hexlify)(message),
          this.address.toLowerCase()
        ]);
      }
      async signTypedData(domain, types, _value) {
        const value = deepCopy(_value);
        const populated = await index_js_3.TypedDataEncoder.resolveNames(domain, types, value, async (value2) => {
          const address = await (0, index_js_2.resolveAddress)(value2);
          (0, index_js_5.assertArgument)(address != null, "TypedData does not support null address", "value", value2);
          return address;
        });
        return await this.provider.send("eth_signTypedData_v4", [
          this.address.toLowerCase(),
          JSON.stringify(index_js_3.TypedDataEncoder.getPayload(populated.domain, types, populated.value))
        ]);
      }
      async unlock(password) {
        return this.provider.send("personal_unlockAccount", [
          this.address.toLowerCase(),
          password,
          null
        ]);
      }
      // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
      async _legacySignMessage(_message) {
        const message = typeof _message === "string" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;
        return await this.provider.send("eth_sign", [
          this.address.toLowerCase(),
          (0, index_js_5.hexlify)(message)
        ]);
      }
    };
    exports.JsonRpcSigner = JsonRpcSigner;
    var _options, _nextId, _payloads, _drainTimer, _notReady, _network, _pendingDetectNetwork, _scheduleDrain, scheduleDrain_fn;
    var JsonRpcApiProvider = class extends abstract_provider_js_1.AbstractProvider {
      constructor(network, options) {
        super(network, options);
        __privateAdd(this, _scheduleDrain);
        __privateAdd(this, _options, void 0);
        // The next ID to use for the JSON-RPC ID field
        __privateAdd(this, _nextId, void 0);
        // Payloads are queued and triggered in batches using the drainTimer
        __privateAdd(this, _payloads, void 0);
        __privateAdd(this, _drainTimer, void 0);
        __privateAdd(this, _notReady, void 0);
        __privateAdd(this, _network, void 0);
        __privateAdd(this, _pendingDetectNetwork, void 0);
        __privateSet(this, _nextId, 1);
        __privateSet(this, _options, Object.assign({}, defaultOptions, options || {}));
        __privateSet(this, _payloads, []);
        __privateSet(this, _drainTimer, null);
        __privateSet(this, _network, null);
        __privateSet(this, _pendingDetectNetwork, null);
        {
          let resolve = null;
          const promise = new Promise((_resolve) => {
            resolve = _resolve;
          });
          __privateSet(this, _notReady, { promise, resolve });
        }
        const staticNetwork = this._getOption("staticNetwork");
        if (typeof staticNetwork === "boolean") {
          (0, index_js_5.assertArgument)(!staticNetwork || network !== "any", "staticNetwork cannot be used on special network 'any'", "options", options);
          if (staticNetwork && network != null) {
            __privateSet(this, _network, network_js_1.Network.from(network));
          }
        } else if (staticNetwork) {
          (0, index_js_5.assertArgument)(network == null || staticNetwork.matches(network), "staticNetwork MUST match network object", "options", options);
          __privateSet(this, _network, staticNetwork);
        }
      }
      /**
       *  Returns the value associated with the option %%key%%.
       *
       *  Sub-classes can use this to inquire about configuration options.
       */
      _getOption(key) {
        return __privateGet(this, _options)[key];
      }
      /**
       *  Gets the [[Network]] this provider has committed to. On each call, the network
       *  is detected, and if it has changed, the call will reject.
       */
      get _network() {
        (0, index_js_5.assert)(__privateGet(this, _network), "network is not available yet", "NETWORK_ERROR");
        return __privateGet(this, _network);
      }
      /**
       *  Resolves to the non-normalized value by performing %%req%%.
       *
       *  Sub-classes may override this to modify behavior of actions,
       *  and should generally call ``super._perform`` as a fallback.
       */
      async _perform(req) {
        if (req.method === "call" || req.method === "estimateGas") {
          let tx = req.transaction;
          if (tx && tx.type != null && (0, index_js_5.getBigInt)(tx.type)) {
            if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
              const feeData = await this.getFeeData();
              if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                req = Object.assign({}, req, {
                  transaction: Object.assign({}, tx, { type: void 0 })
                });
              }
            }
          }
        }
        const request = this.getRpcRequest(req);
        if (request != null) {
          return await this.send(request.method, request.args);
        }
        return super._perform(req);
      }
      /**
       *  Sub-classes may override this; it detects the *actual* network that
       *  we are **currently** connected to.
       *
       *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
       *  _send primitive must be used instead.
       */
      async _detectNetwork() {
        const network = this._getOption("staticNetwork");
        if (network) {
          if (network === true) {
            if (__privateGet(this, _network)) {
              return __privateGet(this, _network);
            }
          } else {
            return network;
          }
        }
        if (__privateGet(this, _pendingDetectNetwork)) {
          return await __privateGet(this, _pendingDetectNetwork);
        }
        if (this.ready) {
          __privateSet(this, _pendingDetectNetwork, (async () => {
            try {
              const result = network_js_1.Network.from((0, index_js_5.getBigInt)(await this.send("eth_chainId", [])));
              __privateSet(this, _pendingDetectNetwork, null);
              return result;
            } catch (error) {
              __privateSet(this, _pendingDetectNetwork, null);
              throw error;
            }
          })());
          return await __privateGet(this, _pendingDetectNetwork);
        }
        __privateSet(this, _pendingDetectNetwork, (async () => {
          const payload = {
            id: __privateWrapper(this, _nextId)._++,
            method: "eth_chainId",
            params: [],
            jsonrpc: "2.0"
          };
          this.emit("debug", { action: "sendRpcPayload", payload });
          let result;
          try {
            result = (await this._send(payload))[0];
            __privateSet(this, _pendingDetectNetwork, null);
          } catch (error) {
            __privateSet(this, _pendingDetectNetwork, null);
            this.emit("debug", { action: "receiveRpcError", error });
            throw error;
          }
          this.emit("debug", { action: "receiveRpcResult", result });
          if ("result" in result) {
            return network_js_1.Network.from((0, index_js_5.getBigInt)(result.result));
          }
          throw this.getRpcError(payload, result);
        })());
        return await __privateGet(this, _pendingDetectNetwork);
      }
      /**
       *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
       *  will be passed to [[_send]] from [[send]]. If it is overridden, then
       *  ``super._start()`` **MUST** be called.
       *
       *  Calling it multiple times is safe and has no effect.
       */
      _start() {
        if (__privateGet(this, _notReady) == null || __privateGet(this, _notReady).resolve == null) {
          return;
        }
        __privateGet(this, _notReady).resolve();
        __privateSet(this, _notReady, null);
        (async () => {
          while (__privateGet(this, _network) == null && !this.destroyed) {
            try {
              __privateSet(this, _network, await this._detectNetwork());
            } catch (error) {
              if (this.destroyed) {
                break;
              }
              console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)");
              this.emit("error", (0, index_js_5.makeError)("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error } }));
              await stall(1e3);
            }
          }
          __privateMethod(this, _scheduleDrain, scheduleDrain_fn).call(this);
        })();
      }
      /**
       *  Resolves once the [[_start]] has been called. This can be used in
       *  sub-classes to defer sending data until the connection has been
       *  established.
       */
      async _waitUntilReady() {
        if (__privateGet(this, _notReady) == null) {
          return;
        }
        return await __privateGet(this, _notReady).promise;
      }
      /**
       *  Return a Subscriber that will manage the %%sub%%.
       *
       *  Sub-classes may override this to modify the behavior of
       *  subscription management.
       */
      _getSubscriber(sub) {
        if (sub.type === "pending") {
          return new subscriber_filterid_js_1.FilterIdPendingSubscriber(this);
        }
        if (sub.type === "event") {
          if (this._getOption("polling")) {
            return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
          }
          return new subscriber_filterid_js_1.FilterIdEventSubscriber(this, sub.filter);
        }
        if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
          return new abstract_provider_js_1.UnmanagedSubscriber("orphan");
        }
        return super._getSubscriber(sub);
      }
      /**
       *  Returns true only if the [[_start]] has been called.
       */
      get ready() {
        return __privateGet(this, _notReady) == null;
      }
      /**
       *  Returns %%tx%% as a normalized JSON-RPC transaction request,
       *  which has all values hexlified and any numeric values converted
       *  to Quantity values.
       */
      getRpcTransaction(tx) {
        const result = {};
        ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
          if (tx[key] == null) {
            return;
          }
          let dstKey = key;
          if (key === "gasLimit") {
            dstKey = "gas";
          }
          result[dstKey] = (0, index_js_5.toQuantity)((0, index_js_5.getBigInt)(tx[key], `tx.${key}`));
        });
        ["from", "to", "data"].forEach((key) => {
          if (tx[key] == null) {
            return;
          }
          result[key] = (0, index_js_5.hexlify)(tx[key]);
        });
        if (tx.accessList) {
          result["accessList"] = (0, index_js_4.accessListify)(tx.accessList);
        }
        if (tx.blobVersionedHashes) {
          result["blobVersionedHashes"] = tx.blobVersionedHashes.map((h) => h.toLowerCase());
        }
        return result;
      }
      /**
       *  Returns the request method and arguments required to perform
       *  %%req%%.
       */
      getRpcRequest(req) {
        switch (req.method) {
          case "chainId":
            return { method: "eth_chainId", args: [] };
          case "getBlockNumber":
            return { method: "eth_blockNumber", args: [] };
          case "getGasPrice":
            return { method: "eth_gasPrice", args: [] };
          case "getPriorityFee":
            return { method: "eth_maxPriorityFeePerGas", args: [] };
          case "getBalance":
            return {
              method: "eth_getBalance",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getTransactionCount":
            return {
              method: "eth_getTransactionCount",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getCode":
            return {
              method: "eth_getCode",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getStorage":
            return {
              method: "eth_getStorageAt",
              args: [
                getLowerCase(req.address),
                "0x" + req.position.toString(16),
                req.blockTag
              ]
            };
          case "broadcastTransaction":
            return {
              method: "eth_sendRawTransaction",
              args: [req.signedTransaction]
            };
          case "getBlock":
            if ("blockTag" in req) {
              return {
                method: "eth_getBlockByNumber",
                args: [req.blockTag, !!req.includeTransactions]
              };
            } else if ("blockHash" in req) {
              return {
                method: "eth_getBlockByHash",
                args: [req.blockHash, !!req.includeTransactions]
              };
            }
            break;
          case "getTransaction":
            return {
              method: "eth_getTransactionByHash",
              args: [req.hash]
            };
          case "getTransactionReceipt":
            return {
              method: "eth_getTransactionReceipt",
              args: [req.hash]
            };
          case "call":
            return {
              method: "eth_call",
              args: [this.getRpcTransaction(req.transaction), req.blockTag]
            };
          case "estimateGas": {
            return {
              method: "eth_estimateGas",
              args: [this.getRpcTransaction(req.transaction)]
            };
          }
          case "getLogs":
            if (req.filter && req.filter.address != null) {
              if (Array.isArray(req.filter.address)) {
                req.filter.address = req.filter.address.map(getLowerCase);
              } else {
                req.filter.address = getLowerCase(req.filter.address);
              }
            }
            return { method: "eth_getLogs", args: [req.filter] };
        }
        return null;
      }
      /**
       *  Returns an ethers-style Error for the given JSON-RPC error
       *  %%payload%%, coalescing the various strings and error shapes
       *  that different nodes return, coercing them into a machine-readable
       *  standardized error.
       */
      getRpcError(payload, _error) {
        const { method } = payload;
        const { error } = _error;
        if (method === "eth_estimateGas" && error.message) {
          const msg = error.message;
          if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
            return (0, index_js_5.makeError)("insufficient funds", "INSUFFICIENT_FUNDS", {
              transaction: payload.params[0],
              info: { payload, error }
            });
          }
        }
        if (method === "eth_call" || method === "eth_estimateGas") {
          const result = spelunkData(error);
          const e = index_js_1.AbiCoder.getBuiltinCallException(method === "eth_call" ? "call" : "estimateGas", payload.params[0], result ? result.data : null);
          e.info = { error, payload };
          return e;
        }
        const message = JSON.stringify(spelunkMessage(error));
        if (typeof error.message === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
          const actionMap = {
            eth_sign: "signMessage",
            personal_sign: "signMessage",
            eth_signTypedData_v4: "signTypedData",
            eth_signTransaction: "signTransaction",
            eth_sendTransaction: "sendTransaction",
            eth_requestAccounts: "requestAccess",
            wallet_requestAccounts: "requestAccess"
          };
          return (0, index_js_5.makeError)(`user rejected action`, "ACTION_REJECTED", {
            action: actionMap[method] || "unknown",
            reason: "rejected",
            info: { payload, error }
          });
        }
        if (method === "eth_sendRawTransaction" || method === "eth_sendTransaction") {
          const transaction = payload.params[0];
          if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
            return (0, index_js_5.makeError)("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
              transaction,
              info: { error }
            });
          }
          if (message.match(/nonce/i) && message.match(/too low/i)) {
            return (0, index_js_5.makeError)("nonce has already been used", "NONCE_EXPIRED", { transaction, info: { error } });
          }
          if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {
            return (0, index_js_5.makeError)("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction, info: { error } });
          }
          if (message.match(/only replay-protected/i)) {
            return (0, index_js_5.makeError)("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
              operation: method,
              info: { transaction, info: { error } }
            });
          }
        }
        let unsupported = !!message.match(/the method .* does not exist/i);
        if (!unsupported) {
          if (error && error.details && error.details.startsWith("Unauthorized method:")) {
            unsupported = true;
          }
        }
        if (unsupported) {
          return (0, index_js_5.makeError)("unsupported operation", "UNSUPPORTED_OPERATION", {
            operation: payload.method,
            info: { error, payload }
          });
        }
        return (0, index_js_5.makeError)("could not coalesce error", "UNKNOWN_ERROR", { error, payload });
      }
      /**
       *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
       *  over the underlying channel. This can be used to call methods
       *  on the backend that do not have a high-level API within the Provider
       *  API.
       *
       *  This method queues requests according to the batch constraints
       *  in the options, assigns the request a unique ID.
       *
       *  **Do NOT override** this method in sub-classes; instead
       *  override [[_send]] or force the options values in the
       *  call to the constructor to modify this method's behavior.
       */
      send(method, params) {
        if (this.destroyed) {
          return Promise.reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: method }));
        }
        const id = __privateWrapper(this, _nextId)._++;
        const promise = new Promise((resolve, reject) => {
          __privateGet(this, _payloads).push({
            resolve,
            reject,
            payload: { method, params, id, jsonrpc: "2.0" }
          });
        });
        __privateMethod(this, _scheduleDrain, scheduleDrain_fn).call(this);
        return promise;
      }
      /**
       *  Resolves to the [[Signer]] account for  %%address%% managed by
       *  the client.
       *
       *  If the %%address%% is a number, it is used as an index in the
       *  the accounts from [[listAccounts]].
       *
       *  This can only be used on clients which manage accounts (such as
       *  Geth with imported account or MetaMask).
       *
       *  Throws if the account doesn't exist.
       */
      async getSigner(address) {
        if (address == null) {
          address = 0;
        }
        const accountsPromise = this.send("eth_accounts", []);
        if (typeof address === "number") {
          const accounts2 = await accountsPromise;
          if (address >= accounts2.length) {
            throw new Error("no such account");
          }
          return new JsonRpcSigner(this, accounts2[address]);
        }
        const { accounts } = await (0, index_js_5.resolveProperties)({
          network: this.getNetwork(),
          accounts: accountsPromise
        });
        address = (0, index_js_2.getAddress)(address);
        for (const account of accounts) {
          if ((0, index_js_2.getAddress)(account) === address) {
            return new JsonRpcSigner(this, address);
          }
        }
        throw new Error("invalid account");
      }
      async listAccounts() {
        const accounts = await this.send("eth_accounts", []);
        return accounts.map((a) => new JsonRpcSigner(this, a));
      }
      destroy() {
        if (__privateGet(this, _drainTimer)) {
          clearTimeout(__privateGet(this, _drainTimer));
          __privateSet(this, _drainTimer, null);
        }
        for (const { payload, reject } of __privateGet(this, _payloads)) {
          reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
        }
        __privateSet(this, _payloads, []);
        super.destroy();
      }
    };
    _options = new WeakMap();
    _nextId = new WeakMap();
    _payloads = new WeakMap();
    _drainTimer = new WeakMap();
    _notReady = new WeakMap();
    _network = new WeakMap();
    _pendingDetectNetwork = new WeakMap();
    _scheduleDrain = new WeakSet();
    scheduleDrain_fn = function() {
      if (__privateGet(this, _drainTimer)) {
        return;
      }
      const stallTime = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
      __privateSet(this, _drainTimer, setTimeout(() => {
        __privateSet(this, _drainTimer, null);
        const payloads = __privateGet(this, _payloads);
        __privateSet(this, _payloads, []);
        while (payloads.length) {
          const batch = [payloads.shift()];
          while (payloads.length) {
            if (batch.length === __privateGet(this, _options).batchMaxCount) {
              break;
            }
            batch.push(payloads.shift());
            const bytes = JSON.stringify(batch.map((p) => p.payload));
            if (bytes.length > __privateGet(this, _options).batchMaxSize) {
              payloads.unshift(batch.pop());
              break;
            }
          }
          (async () => {
            const payload = batch.length === 1 ? batch[0].payload : batch.map((p) => p.payload);
            this.emit("debug", { action: "sendRpcPayload", payload });
            try {
              const result = await this._send(payload);
              this.emit("debug", { action: "receiveRpcResult", result });
              for (const { resolve, reject, payload: payload2 } of batch) {
                if (this.destroyed) {
                  reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload2.method }));
                  continue;
                }
                const resp = result.filter((r) => r.id === payload2.id)[0];
                if (resp == null) {
                  const error = (0, index_js_5.makeError)("missing response for request", "BAD_DATA", {
                    value: result,
                    info: { payload: payload2 }
                  });
                  this.emit("error", error);
                  reject(error);
                  continue;
                }
                if ("error" in resp) {
                  reject(this.getRpcError(payload2, resp));
                  continue;
                }
                resolve(resp.result);
              }
            } catch (error) {
              this.emit("debug", { action: "receiveRpcError", error });
              for (const { reject } of batch) {
                reject(error);
              }
            }
          })();
        }
      }, stallTime));
    };
    exports.JsonRpcApiProvider = JsonRpcApiProvider;
    var _pollingInterval;
    var JsonRpcApiPollingProvider = class extends JsonRpcApiProvider {
      constructor(network, options) {
        super(network, options);
        __privateAdd(this, _pollingInterval, void 0);
        let pollingInterval = this._getOption("pollingInterval");
        if (pollingInterval == null) {
          pollingInterval = defaultOptions.pollingInterval;
        }
        __privateSet(this, _pollingInterval, pollingInterval);
      }
      _getSubscriber(sub) {
        const subscriber = super._getSubscriber(sub);
        if (isPollable(subscriber)) {
          subscriber.pollingInterval = __privateGet(this, _pollingInterval);
        }
        return subscriber;
      }
      /**
       *  The polling interval (default: 4000 ms)
       */
      get pollingInterval() {
        return __privateGet(this, _pollingInterval);
      }
      set pollingInterval(value) {
        if (!Number.isInteger(value) || value < 0) {
          throw new Error("invalid interval");
        }
        __privateSet(this, _pollingInterval, value);
        this._forEachSubscriber((sub) => {
          if (isPollable(sub)) {
            sub.pollingInterval = __privateGet(this, _pollingInterval);
          }
        });
      }
    };
    _pollingInterval = new WeakMap();
    exports.JsonRpcApiPollingProvider = JsonRpcApiPollingProvider;
    var _connect;
    var JsonRpcProvider = class extends JsonRpcApiPollingProvider {
      constructor(url, network, options) {
        if (url == null) {
          url = "http://localhost:8545";
        }
        super(network, options);
        __privateAdd(this, _connect, void 0);
        if (typeof url === "string") {
          __privateSet(this, _connect, new index_js_5.FetchRequest(url));
        } else {
          __privateSet(this, _connect, url.clone());
        }
      }
      _getConnection() {
        return __privateGet(this, _connect).clone();
      }
      async send(method, params) {
        await this._start();
        return await super.send(method, params);
      }
      async _send(payload) {
        const request = this._getConnection();
        request.body = JSON.stringify(payload);
        request.setHeader("content-type", "application/json");
        const response = await request.send();
        response.assertOk();
        let resp = response.bodyJson;
        if (!Array.isArray(resp)) {
          resp = [resp];
        }
        return resp;
      }
    };
    _connect = new WeakMap();
    exports.JsonRpcProvider = JsonRpcProvider;
    function spelunkData(value) {
      if (value == null) {
        return null;
      }
      if (typeof value.message === "string" && value.message.match(/revert/i) && (0, index_js_5.isHexString)(value.data)) {
        return { message: value.message, data: value.data };
      }
      if (typeof value === "object") {
        for (const key in value) {
          const result = spelunkData(value[key]);
          if (result) {
            return result;
          }
        }
        return null;
      }
      if (typeof value === "string") {
        try {
          return spelunkData(JSON.parse(value));
        } catch (error) {
        }
      }
      return null;
    }
    function _spelunkMessage(value, result) {
      if (value == null) {
        return;
      }
      if (typeof value.message === "string") {
        result.push(value.message);
      }
      if (typeof value === "object") {
        for (const key in value) {
          _spelunkMessage(value[key], result);
        }
      }
      if (typeof value === "string") {
        try {
          return _spelunkMessage(JSON.parse(value), result);
        } catch (error) {
        }
      }
    }
    function spelunkMessage(value) {
      const result = [];
      _spelunkMessage(value, result);
      return result;
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-ankr.js
var require_provider_ankr = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-ankr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnkrProvider = void 0;
    var index_js_1 = require_utils3();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "rpc.ankr.com/eth";
        case "goerli":
          return "rpc.ankr.com/eth_goerli";
        case "sepolia":
          return "rpc.ankr.com/eth_sepolia";
        case "arbitrum":
          return "rpc.ankr.com/arbitrum";
        case "base":
          return "rpc.ankr.com/base";
        case "base-goerli":
          return "rpc.ankr.com/base_goerli";
        case "base-sepolia":
          return "rpc.ankr.com/base_sepolia";
        case "bnb":
          return "rpc.ankr.com/bsc";
        case "bnbt":
          return "rpc.ankr.com/bsc_testnet_chapel";
        case "matic":
          return "rpc.ankr.com/polygon";
        case "matic-mumbai":
          return "rpc.ankr.com/polygon_mumbai";
        case "optimism":
          return "rpc.ankr.com/optimism";
        case "optimism-goerli":
          return "rpc.ankr.com/optimism_testnet";
        case "optimism-sepolia":
          return "rpc.ankr.com/optimism_sepolia";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var AnkrProvider = class _AnkrProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Create a new **AnkrProvider**.
       *
       *  By default connecting to ``mainnet`` with a highly throttled
       *  API key.
       */
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const options = { polling: true, staticNetwork: network };
        const request = _AnkrProvider.getRequest(network, apiKey);
        super(request, network, options);
        /**
         *  The API key for the Ankr connection.
         */
        __publicField(this, "apiKey");
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _AnkrProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%% with
       *  %%apiKey%%.
       */
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === defaultApiKey) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("AnkrProvider");
            return true;
          };
        }
        return request;
      }
      getRpcError(payload, error) {
        if (payload.method === "eth_sendRawTransaction") {
          if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") {
            error.error.message = "replacement transaction underpriced";
          }
        }
        return super.getRpcError(payload, error);
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
    };
    exports.AnkrProvider = AnkrProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-alchemy.js
var require_provider_alchemy = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-alchemy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AlchemyProvider = void 0;
    var index_js_1 = require_utils3();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "eth-mainnet.alchemyapi.io";
        case "goerli":
          return "eth-goerli.g.alchemy.com";
        case "sepolia":
          return "eth-sepolia.g.alchemy.com";
        case "arbitrum":
          return "arb-mainnet.g.alchemy.com";
        case "arbitrum-goerli":
          return "arb-goerli.g.alchemy.com";
        case "arbitrum-sepolia":
          return "arb-sepolia.g.alchemy.com";
        case "base":
          return "base-mainnet.g.alchemy.com";
        case "base-goerli":
          return "base-goerli.g.alchemy.com";
        case "base-sepolia":
          return "base-sepolia.g.alchemy.com";
        case "matic":
          return "polygon-mainnet.g.alchemy.com";
        case "matic-amoy":
          return "polygon-amoy.g.alchemy.com";
        case "matic-mumbai":
          return "polygon-mumbai.g.alchemy.com";
        case "optimism":
          return "opt-mainnet.g.alchemy.com";
        case "optimism-goerli":
          return "opt-goerli.g.alchemy.com";
        case "optimism-sepolia":
          return "opt-sepolia.g.alchemy.com";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var AlchemyProvider = class _AlchemyProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = _AlchemyProvider.getRequest(network, apiKey);
        super(request, network, { staticNetwork: network });
        __publicField(this, "apiKey");
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _AlchemyProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      async _perform(req) {
        if (req.method === "getTransactionResult") {
          const { trace, tx } = await (0, index_js_1.resolveProperties)({
            trace: this.send("trace_transaction", [req.hash]),
            tx: this.getTransaction(req.hash)
          });
          if (trace == null || tx == null) {
            return null;
          }
          let data;
          let error = false;
          try {
            data = trace[0].result.output;
            error = trace[0].error === "Reverted";
          } catch (error2) {
          }
          if (data) {
            (0, index_js_1.assert)(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
              action: "getTransactionResult",
              data,
              reason: null,
              transaction: tx,
              invocation: null,
              revert: null
              // @TODO
            });
            return data;
          }
          (0, index_js_1.assert)(false, "could not parse trace result", "BAD_DATA", { value: trace });
        }
        return await super._perform(req);
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v2/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === defaultApiKey) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("alchemy");
            return true;
          };
        }
        return request;
      }
    };
    exports.AlchemyProvider = AlchemyProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-chainstack.js
var require_provider_chainstack = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-chainstack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChainstackProvider = void 0;
    var index_js_1 = require_utils3();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    function getApiKey(name) {
      switch (name) {
        case "mainnet":
          return "39f1d67cedf8b7831010a665328c9197";
        case "arbitrum":
          return "0550c209db33c3abf4cc927e1e18cea1";
        case "bnb":
          return "98b5a77e531614387366f6fc5da097f8";
        case "matic":
          return "cd9d4d70377471aa7c142ec4a4205249";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "ethereum-mainnet.core.chainstack.com";
        case "arbitrum":
          return "arbitrum-mainnet.core.chainstack.com";
        case "bnb":
          return "bsc-mainnet.core.chainstack.com";
        case "matic":
          return "polygon-mainnet.core.chainstack.com";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var ChainstackProvider = class _ChainstackProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Creates a new **ChainstackProvider**.
       */
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = getApiKey(network.name);
        }
        const request = _ChainstackProvider.getRequest(network, apiKey);
        super(request, network, { staticNetwork: network });
        /**
         *  The API key for the Chainstack connection.
         */
        __publicField(this, "apiKey");
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _ChainstackProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.apiKey === getApiKey(this._network.name);
      }
      /**
       *  Returns a prepared request for connecting to %%network%%
       *  with %%apiKey%% and %%projectSecret%%.
       */
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = getApiKey(network.name);
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === getApiKey(network.name)) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("ChainstackProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports.ChainstackProvider = ChainstackProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js
var require_provider_cloudflare = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CloudflareProvider = void 0;
    var index_js_1 = require_utils3();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var CloudflareProvider = class extends provider_jsonrpc_js_1.JsonRpcProvider {
      constructor(_network) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        (0, index_js_1.assertArgument)(network.name === "mainnet", "unsupported network", "network", _network);
        super("https://cloudflare-eth.com/", network, { staticNetwork: network });
      }
    };
    exports.CloudflareProvider = CloudflareProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-etherscan.js
var require_provider_etherscan = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-etherscan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EtherscanProvider = exports.EtherscanPlugin = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_contract2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils3();
    var abstract_provider_js_1 = require_abstract_provider();
    var network_js_1 = require_network();
    var plugins_network_js_1 = require_plugins_network();
    var community_js_1 = require_community();
    var THROTTLE = 2e3;
    function isPromise(value) {
      return value && typeof value.then === "function";
    }
    var EtherscanPluginId = "org.ethers.plugins.provider.Etherscan";
    var EtherscanPlugin = class _EtherscanPlugin extends plugins_network_js_1.NetworkPlugin {
      /**
       *  Creates a new **EtherscanProvider** which will use
       *  %%baseUrl%%.
       */
      constructor(baseUrl) {
        super(EtherscanPluginId);
        /**
         *  The Etherscan API base URL.
         */
        __publicField(this, "baseUrl");
        (0, index_js_4.defineProperties)(this, { baseUrl });
      }
      clone() {
        return new _EtherscanPlugin(this.baseUrl);
      }
    };
    exports.EtherscanPlugin = EtherscanPlugin;
    var skipKeys = ["enableCcipRead"];
    var nextId = 1;
    var _plugin;
    var EtherscanProvider = class extends abstract_provider_js_1.AbstractProvider {
      /**
       *  Creates a new **EtherscanBaseProvider**.
       */
      constructor(_network, _apiKey) {
        const apiKey = _apiKey != null ? _apiKey : null;
        super();
        /**
         *  The connected network.
         */
        __publicField(this, "network");
        /**
         *  The API key or null if using the community provided bandwidth.
         */
        __publicField(this, "apiKey");
        __privateAdd(this, _plugin, void 0);
        const network = network_js_1.Network.from(_network);
        __privateSet(this, _plugin, network.getPlugin(EtherscanPluginId));
        (0, index_js_4.defineProperties)(this, { apiKey, network });
        this.getBaseUrl();
      }
      /**
       *  Returns the base URL.
       *
       *  If an [[EtherscanPlugin]] is configured on the
       *  [[EtherscanBaseProvider_network]], returns the plugin's
       *  baseUrl.
       */
      getBaseUrl() {
        if (__privateGet(this, _plugin)) {
          return __privateGet(this, _plugin).baseUrl;
        }
        switch (this.network.name) {
          case "mainnet":
            return "https://api.etherscan.io";
          case "goerli":
            return "https://api-goerli.etherscan.io";
          case "sepolia":
            return "https://api-sepolia.etherscan.io";
          case "holesky":
            return "https://api-holesky.etherscan.io";
          case "arbitrum":
            return "https://api.arbiscan.io";
          case "arbitrum-goerli":
            return "https://api-goerli.arbiscan.io";
          case "base":
            return "https://api.basescan.org";
          case "base-sepolia":
            return "https://api-sepolia.basescan.org";
          case "bnb":
            return "https://api.bscscan.com";
          case "bnbt":
            return "https://api-testnet.bscscan.com";
          case "matic":
            return "https://api.polygonscan.com";
          case "matic-amoy":
            return "https://api-amoy.polygonscan.com";
          case "matic-mumbai":
            return "https://api-testnet.polygonscan.com";
          case "optimism":
            return "https://api-optimistic.etherscan.io";
          case "optimism-goerli":
            return "https://api-goerli-optimistic.etherscan.io";
          default:
        }
        (0, index_js_4.assertArgument)(false, "unsupported network", "network", this.network);
      }
      /**
       *  Returns the URL for the %%module%% and %%params%%.
       */
      getUrl(module2, params) {
        const query = Object.keys(params).reduce((accum, key) => {
          const value = params[key];
          if (value != null) {
            accum += `&${key}=${value}`;
          }
          return accum;
        }, "");
        const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
        return `${this.getBaseUrl()}/api?module=${module2}${query}${apiKey}`;
      }
      /**
       *  Returns the URL for using POST requests.
       */
      getPostUrl() {
        return `${this.getBaseUrl()}/api`;
      }
      /**
       *  Returns the parameters for using POST requests.
       */
      getPostData(module2, params) {
        params.module = module2;
        params.apikey = this.apiKey;
        return params;
      }
      async detectNetwork() {
        return this.network;
      }
      /**
       *  Resolves to the result of calling %%module%% with %%params%%.
       *
       *  If %%post%%, the request is made as a POST request.
       */
      async fetch(module2, params, post2) {
        const id = nextId++;
        const url = post2 ? this.getPostUrl() : this.getUrl(module2, params);
        const payload = post2 ? this.getPostData(module2, params) : null;
        this.emit("debug", { action: "sendRequest", id, url, payload });
        const request = new index_js_4.FetchRequest(url);
        request.setThrottleParams({ slotInterval: 1e3 });
        request.retryFunc = (req, resp, attempt) => {
          if (this.isCommunityResource()) {
            (0, community_js_1.showThrottleMessage)("Etherscan");
          }
          return Promise.resolve(true);
        };
        request.processFunc = async (request2, response2) => {
          const result2 = response2.hasBody() ? JSON.parse((0, index_js_4.toUtf8String)(response2.body)) : {};
          const throttle = (typeof result2.result === "string" ? result2.result : "").toLowerCase().indexOf("rate limit") >= 0;
          if (module2 === "proxy") {
            if (result2 && result2.status == 0 && result2.message == "NOTOK" && throttle) {
              this.emit("debug", { action: "receiveError", id, reason: "proxy-NOTOK", error: result2 });
              response2.throwThrottleError(result2.result, THROTTLE);
            }
          } else {
            if (throttle) {
              this.emit("debug", { action: "receiveError", id, reason: "null result", error: result2.result });
              response2.throwThrottleError(result2.result, THROTTLE);
            }
          }
          return response2;
        };
        if (payload) {
          request.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
          request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join("&");
        }
        const response = await request.send();
        try {
          response.assertOk();
        } catch (error) {
          this.emit("debug", { action: "receiveError", id, error, reason: "assertOk" });
          (0, index_js_4.assert)(false, "response error", "SERVER_ERROR", { request, response });
        }
        if (!response.hasBody()) {
          this.emit("debug", { action: "receiveError", id, error: "missing body", reason: "null body" });
          (0, index_js_4.assert)(false, "missing response", "SERVER_ERROR", { request, response });
        }
        const result = JSON.parse((0, index_js_4.toUtf8String)(response.body));
        if (module2 === "proxy") {
          if (result.jsonrpc != "2.0") {
            this.emit("debug", { action: "receiveError", id, result, reason: "invalid JSON-RPC" });
            (0, index_js_4.assert)(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", { request, response, info: { result } });
          }
          if (result.error) {
            this.emit("debug", { action: "receiveError", id, result, reason: "JSON-RPC error" });
            (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
          }
          this.emit("debug", { action: "receiveRequest", id, result });
          return result.result;
        } else {
          if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
            this.emit("debug", { action: "receiveRequest", id, result });
            return result.result;
          }
          if (result.status != 1 || typeof result.message === "string" && !result.message.match(/^OK/)) {
            this.emit("debug", { action: "receiveError", id, result });
            (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
          }
          this.emit("debug", { action: "receiveRequest", id, result });
          return result.result;
        }
      }
      /**
       *  Returns %%transaction%% normalized for the Etherscan API.
       */
      _getTransactionPostData(transaction) {
        const result = {};
        for (let key in transaction) {
          if (skipKeys.indexOf(key) >= 0) {
            continue;
          }
          if (transaction[key] == null) {
            continue;
          }
          let value = transaction[key];
          if (key === "type" && value === 0) {
            continue;
          }
          if (key === "blockTag" && value === "latest") {
            continue;
          }
          if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
            value = (0, index_js_4.toQuantity)(value);
          } else if (key === "accessList") {
            value = "[" + (0, index_js_3.accessListify)(value).map((set) => {
              return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
            }).join(",") + "]";
          } else if (key === "blobVersionedHashes") {
            if (value.length === 0) {
              continue;
            }
            (0, index_js_4.assert)(false, "Etherscan API does not support blobVersionedHashes", "UNSUPPORTED_OPERATION", {
              operation: "_getTransactionPostData",
              info: { transaction }
            });
          } else {
            value = (0, index_js_4.hexlify)(value);
          }
          result[key] = value;
        }
        return result;
      }
      /**
       *  Throws the normalized Etherscan error.
       */
      _checkError(req, error, transaction) {
        let message = "";
        if ((0, index_js_4.isError)(error, "SERVER_ERROR")) {
          try {
            message = error.info.result.error.message;
          } catch (e) {
          }
          if (!message) {
            try {
              message = error.info.message;
            } catch (e) {
            }
          }
        }
        if (req.method === "estimateGas") {
          if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {
            (0, index_js_4.assert)(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
              transaction: req.transaction
            });
          }
        }
        if (req.method === "call" || req.method === "estimateGas") {
          if (message.match(/execution reverted/i)) {
            let data = "";
            try {
              data = error.info.result.error.data;
            } catch (error2) {
            }
            const e = index_js_1.AbiCoder.getBuiltinCallException(req.method, req.transaction, data);
            e.info = { request: req, error };
            throw e;
          }
        }
        if (message) {
          if (req.method === "broadcastTransaction") {
            const transaction2 = index_js_3.Transaction.from(req.signedTransaction);
            if (message.match(/replacement/i) && message.match(/underpriced/i)) {
              (0, index_js_4.assert)(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
                transaction: transaction2
              });
            }
            if (message.match(/insufficient funds/)) {
              (0, index_js_4.assert)(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
                transaction: transaction2
              });
            }
            if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
              (0, index_js_4.assert)(false, "nonce has already been used", "NONCE_EXPIRED", {
                transaction: transaction2
              });
            }
          }
        }
        throw error;
      }
      async _detectNetwork() {
        return this.network;
      }
      async _perform(req) {
        switch (req.method) {
          case "chainId":
            return this.network.chainId;
          case "getBlockNumber":
            return this.fetch("proxy", { action: "eth_blockNumber" });
          case "getGasPrice":
            return this.fetch("proxy", { action: "eth_gasPrice" });
          case "getPriorityFee":
            if (this.network.name === "mainnet") {
              return "1000000000";
            } else if (this.network.name === "optimism") {
              return "1000000";
            } else {
              throw new Error("fallback onto the AbstractProvider default");
            }
          case "getBalance":
            return this.fetch("account", {
              action: "balance",
              address: req.address,
              tag: req.blockTag
            });
          case "getTransactionCount":
            return this.fetch("proxy", {
              action: "eth_getTransactionCount",
              address: req.address,
              tag: req.blockTag
            });
          case "getCode":
            return this.fetch("proxy", {
              action: "eth_getCode",
              address: req.address,
              tag: req.blockTag
            });
          case "getStorage":
            return this.fetch("proxy", {
              action: "eth_getStorageAt",
              address: req.address,
              position: req.position,
              tag: req.blockTag
            });
          case "broadcastTransaction":
            return this.fetch("proxy", {
              action: "eth_sendRawTransaction",
              hex: req.signedTransaction
            }, true).catch((error) => {
              return this._checkError(req, error, req.signedTransaction);
            });
          case "getBlock":
            if ("blockTag" in req) {
              return this.fetch("proxy", {
                action: "eth_getBlockByNumber",
                tag: req.blockTag,
                boolean: req.includeTransactions ? "true" : "false"
              });
            }
            (0, index_js_4.assert)(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
              operation: "getBlock(blockHash)"
            });
          case "getTransaction":
            return this.fetch("proxy", {
              action: "eth_getTransactionByHash",
              txhash: req.hash
            });
          case "getTransactionReceipt":
            return this.fetch("proxy", {
              action: "eth_getTransactionReceipt",
              txhash: req.hash
            });
          case "call": {
            if (req.blockTag !== "latest") {
              throw new Error("EtherscanProvider does not support blockTag for call");
            }
            const postData = this._getTransactionPostData(req.transaction);
            postData.module = "proxy";
            postData.action = "eth_call";
            try {
              return await this.fetch("proxy", postData, true);
            } catch (error) {
              return this._checkError(req, error, req.transaction);
            }
          }
          case "estimateGas": {
            const postData = this._getTransactionPostData(req.transaction);
            postData.module = "proxy";
            postData.action = "eth_estimateGas";
            try {
              return await this.fetch("proxy", postData, true);
            } catch (error) {
              return this._checkError(req, error, req.transaction);
            }
          }
          default:
            break;
        }
        return super._perform(req);
      }
      async getNetwork() {
        return this.network;
      }
      /**
       *  Resolves to the current price of ether.
       *
       *  This returns ``0`` on any network other than ``mainnet``.
       */
      async getEtherPrice() {
        if (this.network.name !== "mainnet") {
          return 0;
        }
        return parseFloat((await this.fetch("stats", { action: "ethprice" })).ethusd);
      }
      /**
       *  Resolves to a [Contract]] for %%address%%, using the
       *  Etherscan API to retreive the Contract ABI.
       */
      async getContract(_address) {
        let address = this._getAddress(_address);
        if (isPromise(address)) {
          address = await address;
        }
        try {
          const resp = await this.fetch("contract", {
            action: "getabi",
            address
          });
          const abi = JSON.parse(resp);
          return new index_js_2.Contract(address, abi, this);
        } catch (error) {
          return null;
        }
      }
      isCommunityResource() {
        return this.apiKey == null;
      }
    };
    _plugin = new WeakMap();
    exports.EtherscanProvider = EtherscanProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/ws-browser.js
var require_ws_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/ws-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebSocket = void 0;
    function getGlobal() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    }
    var _WebSocket = getGlobal().WebSocket;
    exports.WebSocket = _WebSocket;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-socket.js
var require_provider_socket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-socket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SocketProvider = exports.SocketEventSubscriber = exports.SocketPendingSubscriber = exports.SocketBlockSubscriber = exports.SocketSubscriber = void 0;
    var abstract_provider_js_1 = require_abstract_provider();
    var index_js_1 = require_utils3();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var _provider, _filter, _filterId, _paused, _emitPromise;
    var SocketSubscriber = class {
      /**
       *  Creates a new **SocketSubscriber** attached to %%provider%% listening
       *  to %%filter%%.
       */
      constructor(provider, filter) {
        __privateAdd(this, _provider, void 0);
        __privateAdd(this, _filter, void 0);
        __privateAdd(this, _filterId, void 0);
        __privateAdd(this, _paused, void 0);
        __privateAdd(this, _emitPromise, void 0);
        __privateSet(this, _provider, provider);
        __privateSet(this, _filter, JSON.stringify(filter));
        __privateSet(this, _filterId, null);
        __privateSet(this, _paused, null);
        __privateSet(this, _emitPromise, null);
      }
      /**
       *  The filter.
       */
      get filter() {
        return JSON.parse(__privateGet(this, _filter));
      }
      start() {
        __privateSet(this, _filterId, __privateGet(this, _provider).send("eth_subscribe", this.filter).then((filterId) => {
          ;
          __privateGet(this, _provider)._register(filterId, this);
          return filterId;
        }));
      }
      stop() {
        __privateGet(this, _filterId).then((filterId) => {
          if (__privateGet(this, _provider).destroyed) {
            return;
          }
          __privateGet(this, _provider).send("eth_unsubscribe", [filterId]);
        });
        __privateSet(this, _filterId, null);
      }
      // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs
      //        and resume
      pause(dropWhilePaused) {
        (0, index_js_1.assert)(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", { operation: "pause(false)" });
        __privateSet(this, _paused, !!dropWhilePaused);
      }
      resume() {
        __privateSet(this, _paused, null);
      }
      /**
       *  @_ignore:
       */
      _handleMessage(message) {
        if (__privateGet(this, _filterId) == null) {
          return;
        }
        if (__privateGet(this, _paused) === null) {
          let emitPromise = __privateGet(this, _emitPromise);
          if (emitPromise == null) {
            emitPromise = this._emit(__privateGet(this, _provider), message);
          } else {
            emitPromise = emitPromise.then(async () => {
              await this._emit(__privateGet(this, _provider), message);
            });
          }
          __privateSet(this, _emitPromise, emitPromise.then(() => {
            if (__privateGet(this, _emitPromise) === emitPromise) {
              __privateSet(this, _emitPromise, null);
            }
          }));
        }
      }
      /**
       *  Sub-classes **must** override this to emit the events on the
       *  provider.
       */
      async _emit(provider, message) {
        throw new Error("sub-classes must implemente this; _emit");
      }
    };
    _provider = new WeakMap();
    _filter = new WeakMap();
    _filterId = new WeakMap();
    _paused = new WeakMap();
    _emitPromise = new WeakMap();
    exports.SocketSubscriber = SocketSubscriber;
    var SocketBlockSubscriber = class extends SocketSubscriber {
      /**
       *  @_ignore:
       */
      constructor(provider) {
        super(provider, ["newHeads"]);
      }
      async _emit(provider, message) {
        provider.emit("block", parseInt(message.number));
      }
    };
    exports.SocketBlockSubscriber = SocketBlockSubscriber;
    var SocketPendingSubscriber = class extends SocketSubscriber {
      /**
       *  @_ignore:
       */
      constructor(provider) {
        super(provider, ["newPendingTransactions"]);
      }
      async _emit(provider, message) {
        provider.emit("pending", message);
      }
    };
    exports.SocketPendingSubscriber = SocketPendingSubscriber;
    var _logFilter;
    var SocketEventSubscriber = class extends SocketSubscriber {
      /**
       *  @_ignore:
       */
      constructor(provider, filter) {
        super(provider, ["logs", filter]);
        __privateAdd(this, _logFilter, void 0);
        __privateSet(this, _logFilter, JSON.stringify(filter));
      }
      /**
       *  The filter.
       */
      get logFilter() {
        return JSON.parse(__privateGet(this, _logFilter));
      }
      async _emit(provider, message) {
        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));
      }
    };
    _logFilter = new WeakMap();
    exports.SocketEventSubscriber = SocketEventSubscriber;
    var _callbacks, _subs, _pending;
    var SocketProvider = class extends provider_jsonrpc_js_1.JsonRpcApiProvider {
      /**
       *  Creates a new **SocketProvider** connected to %%network%%.
       *
       *  If unspecified, the network will be discovered.
       */
      constructor(network, _options) {
        const options = Object.assign({}, _options != null ? _options : {});
        (0, index_js_1.assertArgument)(options.batchMaxCount == null || options.batchMaxCount === 1, "sockets-based providers do not support batches", "options.batchMaxCount", _options);
        options.batchMaxCount = 1;
        if (options.staticNetwork == null) {
          options.staticNetwork = true;
        }
        super(network, options);
        __privateAdd(this, _callbacks, void 0);
        // Maps each filterId to its subscriber
        __privateAdd(this, _subs, void 0);
        // If any events come in before a subscriber has finished
        // registering, queue them
        __privateAdd(this, _pending, void 0);
        __privateSet(this, _callbacks, /* @__PURE__ */ new Map());
        __privateSet(this, _subs, /* @__PURE__ */ new Map());
        __privateSet(this, _pending, /* @__PURE__ */ new Map());
      }
      // This value is only valid after _start has been called
      /*
      get _network(): Network {
          if (this.#network == null) {
              throw new Error("this shouldn't happen");
          }
          return this.#network.clone();
      }
      */
      _getSubscriber(sub) {
        switch (sub.type) {
          case "close":
            return new abstract_provider_js_1.UnmanagedSubscriber("close");
          case "block":
            return new SocketBlockSubscriber(this);
          case "pending":
            return new SocketPendingSubscriber(this);
          case "event":
            return new SocketEventSubscriber(this, sub.filter);
          case "orphan":
            if (sub.filter.orphan === "drop-log") {
              return new abstract_provider_js_1.UnmanagedSubscriber("drop-log");
            }
        }
        return super._getSubscriber(sub);
      }
      /**
       *  Register a new subscriber. This is used internalled by Subscribers
       *  and generally is unecessary unless extending capabilities.
       */
      _register(filterId, subscriber) {
        __privateGet(this, _subs).set(filterId, subscriber);
        const pending = __privateGet(this, _pending).get(filterId);
        if (pending) {
          for (const message of pending) {
            subscriber._handleMessage(message);
          }
          __privateGet(this, _pending).delete(filterId);
        }
      }
      async _send(payload) {
        (0, index_js_1.assertArgument)(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
        const promise = new Promise((resolve, reject) => {
          __privateGet(this, _callbacks).set(payload.id, { payload, resolve, reject });
        });
        await this._waitUntilReady();
        await this._write(JSON.stringify(payload));
        return [await promise];
      }
      // Sub-classes must call this once they are connected
      /*
          async _start(): Promise<void> {
              if (this.#ready) { return; }
      
              for (const { payload } of this.#callbacks.values()) {
                  await this._write(JSON.stringify(payload));
              }
      
              this.#ready = (async function() {
                  await super._start();
              })();
          }
          */
      /**
       *  Sub-classes **must** call this with messages received over their
       *  transport to be processed and dispatched.
       */
      async _processMessage(message) {
        const result = JSON.parse(message);
        if (result && typeof result === "object" && "id" in result) {
          const callback = __privateGet(this, _callbacks).get(result.id);
          if (callback == null) {
            this.emit("error", (0, index_js_1.makeError)("received result for unknown id", "UNKNOWN_ERROR", {
              reasonCode: "UNKNOWN_ID",
              result
            }));
            return;
          }
          __privateGet(this, _callbacks).delete(result.id);
          callback.resolve(result);
        } else if (result && result.method === "eth_subscription") {
          const filterId = result.params.subscription;
          const subscriber = __privateGet(this, _subs).get(filterId);
          if (subscriber) {
            subscriber._handleMessage(result.params.result);
          } else {
            let pending = __privateGet(this, _pending).get(filterId);
            if (pending == null) {
              pending = [];
              __privateGet(this, _pending).set(filterId, pending);
            }
            pending.push(result.params.result);
          }
        } else {
          this.emit("error", (0, index_js_1.makeError)("received unexpected message", "UNKNOWN_ERROR", {
            reasonCode: "UNEXPECTED_MESSAGE",
            result
          }));
          return;
        }
      }
      /**
       *  Sub-classes **must** override this to send %%message%% over their
       *  transport.
       */
      async _write(message) {
        throw new Error("sub-classes must override this");
      }
    };
    _callbacks = new WeakMap();
    _subs = new WeakMap();
    _pending = new WeakMap();
    exports.SocketProvider = SocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-websocket.js
var require_provider_websocket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-websocket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebSocketProvider = void 0;
    var ws_js_1 = require_ws_browser();
    var provider_socket_js_1 = require_provider_socket();
    var _connect, _websocket;
    var WebSocketProvider = class extends provider_socket_js_1.SocketProvider {
      constructor(url, network, options) {
        super(network, options);
        __privateAdd(this, _connect, void 0);
        __privateAdd(this, _websocket, void 0);
        if (typeof url === "string") {
          __privateSet(this, _connect, () => {
            return new ws_js_1.WebSocket(url);
          });
          __privateSet(this, _websocket, __privateGet(this, _connect).call(this));
        } else if (typeof url === "function") {
          __privateSet(this, _connect, url);
          __privateSet(this, _websocket, url());
        } else {
          __privateSet(this, _connect, null);
          __privateSet(this, _websocket, url);
        }
        this.websocket.onopen = async () => {
          try {
            await this._start();
            this.resume();
          } catch (error) {
            console.log("failed to start WebsocketProvider", error);
          }
        };
        this.websocket.onmessage = (message) => {
          this._processMessage(message.data);
        };
      }
      get websocket() {
        if (__privateGet(this, _websocket) == null) {
          throw new Error("websocket closed");
        }
        return __privateGet(this, _websocket);
      }
      async _write(message) {
        this.websocket.send(message);
      }
      async destroy() {
        if (__privateGet(this, _websocket) != null) {
          __privateGet(this, _websocket).close();
          __privateSet(this, _websocket, null);
        }
        super.destroy();
      }
    };
    _connect = new WeakMap();
    _websocket = new WeakMap();
    exports.WebSocketProvider = WebSocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-infura.js
var require_provider_infura = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-infura.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InfuraProvider = exports.InfuraWebSocketProvider = void 0;
    var index_js_1 = require_utils3();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var provider_websocket_js_1 = require_provider_websocket();
    var defaultProjectId = "84842078b09946638c03157f83405213";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "mainnet.infura.io";
        case "goerli":
          return "goerli.infura.io";
        case "sepolia":
          return "sepolia.infura.io";
        case "arbitrum":
          return "arbitrum-mainnet.infura.io";
        case "arbitrum-goerli":
          return "arbitrum-goerli.infura.io";
        case "arbitrum-sepolia":
          return "arbitrum-sepolia.infura.io";
        case "base":
          return "base-mainnet.infura.io";
        case "base-goerlia":
          return "base-goerli.infura.io";
        case "base-sepolia":
          return "base-sepolia.infura.io";
        case "bnb":
          return "bnbsmartchain-mainnet.infura.io";
        case "bnbt":
          return "bnbsmartchain-testnet.infura.io";
        case "linea":
          return "linea-mainnet.infura.io";
        case "linea-goerli":
          return "linea-goerli.infura.io";
        case "linea-sepolia":
          return "linea-sepolia.infura.io";
        case "matic":
          return "polygon-mainnet.infura.io";
        case "matic-amoy":
          return "polygon-amoy.infura.io";
        case "matic-mumbai":
          return "polygon-mumbai.infura.io";
        case "optimism":
          return "optimism-mainnet.infura.io";
        case "optimism-goerli":
          return "optimism-goerli.infura.io";
        case "optimism-sepolia":
          return "optimism-sepolia.infura.io";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var InfuraWebSocketProvider = class extends provider_websocket_js_1.WebSocketProvider {
      /**
       *  Creates a new **InfuraWebSocketProvider**.
       */
      constructor(network, projectId) {
        const provider = new InfuraProvider(network, projectId);
        const req = provider._getConnection();
        (0, index_js_1.assert)(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", { operation: "InfuraProvider.getWebSocketProvider()" });
        const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
        super(url, provider._network);
        /**
         *  The Project ID for the INFURA connection.
         */
        __publicField(this, "projectId");
        /**
         *  The Project Secret.
         *
         *  If null, no authenticated requests are made. This should not
         *  be used outside of private contexts.
         */
        __publicField(this, "projectSecret");
        (0, index_js_1.defineProperties)(this, {
          projectId: provider.projectId,
          projectSecret: provider.projectSecret
        });
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
    };
    exports.InfuraWebSocketProvider = InfuraWebSocketProvider;
    var InfuraProvider = class _InfuraProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Creates a new **InfuraProvider**.
       */
      constructor(_network, projectId, projectSecret) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (projectId == null) {
          projectId = defaultProjectId;
        }
        if (projectSecret == null) {
          projectSecret = null;
        }
        const request = _InfuraProvider.getRequest(network, projectId, projectSecret);
        super(request, network, { staticNetwork: network });
        /**
         *  The Project ID for the INFURA connection.
         */
        __publicField(this, "projectId");
        /**
         *  The Project Secret.
         *
         *  If null, no authenticated requests are made. This should not
         *  be used outside of private contexts.
         */
        __publicField(this, "projectSecret");
        (0, index_js_1.defineProperties)(this, { projectId, projectSecret });
      }
      _getProvider(chainId) {
        try {
          return new _InfuraProvider(chainId, this.projectId, this.projectSecret);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
      /**
       *  Creates a new **InfuraWebSocketProvider**.
       */
      static getWebSocketProvider(network, projectId) {
        return new InfuraWebSocketProvider(network, projectId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%%
       *  with %%projectId%% and %%projectSecret%%.
       */
      static getRequest(network, projectId, projectSecret) {
        if (projectId == null) {
          projectId = defaultProjectId;
        }
        if (projectSecret == null) {
          projectSecret = null;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v3/${projectId}`);
        request.allowGzip = true;
        if (projectSecret) {
          request.setCredentials("", projectSecret);
        }
        if (projectId === defaultProjectId) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("InfuraProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports.InfuraProvider = InfuraProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-quicknode.js
var require_provider_quicknode = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-quicknode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuickNodeProvider = void 0;
    var index_js_1 = require_utils3();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "ethers.quiknode.pro";
        case "goerli":
          return "ethers.ethereum-goerli.quiknode.pro";
        case "sepolia":
          return "ethers.ethereum-sepolia.quiknode.pro";
        case "holesky":
          return "ethers.ethereum-holesky.quiknode.pro";
        case "arbitrum":
          return "ethers.arbitrum-mainnet.quiknode.pro";
        case "arbitrum-goerli":
          return "ethers.arbitrum-goerli.quiknode.pro";
        case "arbitrum-sepolia":
          return "ethers.arbitrum-sepolia.quiknode.pro";
        case "base":
          return "ethers.base-mainnet.quiknode.pro";
        case "base-goerli":
          return "ethers.base-goerli.quiknode.pro";
        case "base-spolia":
          return "ethers.base-sepolia.quiknode.pro";
        case "bnb":
          return "ethers.bsc.quiknode.pro";
        case "bnbt":
          return "ethers.bsc-testnet.quiknode.pro";
        case "matic":
          return "ethers.matic.quiknode.pro";
        case "matic-mumbai":
          return "ethers.matic-testnet.quiknode.pro";
        case "optimism":
          return "ethers.optimism.quiknode.pro";
        case "optimism-goerli":
          return "ethers.optimism-goerli.quiknode.pro";
        case "optimism-sepolia":
          return "ethers.optimism-sepolia.quiknode.pro";
        case "xdai":
          return "ethers.xdai.quiknode.pro";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var QuickNodeProvider = class _QuickNodeProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Creates a new **QuickNodeProvider**.
       */
      constructor(_network, token) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (token == null) {
          token = defaultToken;
        }
        const request = _QuickNodeProvider.getRequest(network, token);
        super(request, network, { staticNetwork: network });
        /**
         *  The API token.
         */
        __publicField(this, "token");
        (0, index_js_1.defineProperties)(this, { token });
      }
      _getProvider(chainId) {
        try {
          return new _QuickNodeProvider(chainId, this.token);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.token === defaultToken;
      }
      /**
       *  Returns a new request prepared for %%network%% and the
       *  %%token%%.
       */
      static getRequest(network, token) {
        if (token == null) {
          token = defaultToken;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${token}`);
        request.allowGzip = true;
        if (token === defaultToken) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("QuickNodeProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports.QuickNodeProvider = QuickNodeProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-fallback.js
var require_provider_fallback = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-fallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FallbackProvider = void 0;
    var index_js_1 = require_utils3();
    var abstract_provider_js_1 = require_abstract_provider();
    var network_js_1 = require_network();
    var BN_1 = BigInt("1");
    var BN_2 = BigInt("2");
    function shuffle(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j2 = Math.floor(Math.random() * (i + 1));
        const tmp = array[i];
        array[i] = array[j2];
        array[j2] = tmp;
      }
    }
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(resolve, duration);
      });
    }
    function getTime() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    function stringify(value) {
      return JSON.stringify(value, (key, value2) => {
        if (typeof value2 === "bigint") {
          return { type: "bigint", value: value2.toString() };
        }
        return value2;
      });
    }
    var defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };
    var defaultState = {
      blockNumber: -2,
      requests: 0,
      lateResponses: 0,
      errorResponses: 0,
      outOfSync: -1,
      unsupportedEvents: 0,
      rollingDuration: 0,
      score: 0,
      _network: null,
      _updateNumber: null,
      _totalTime: 0,
      _lastFatalError: null,
      _lastFatalErrorTimestamp: 0
    };
    async function waitForSync(config, blockNumber) {
      while (config.blockNumber < 0 || config.blockNumber < blockNumber) {
        if (!config._updateNumber) {
          config._updateNumber = (async () => {
            try {
              const blockNumber2 = await config.provider.getBlockNumber();
              if (blockNumber2 > config.blockNumber) {
                config.blockNumber = blockNumber2;
              }
            } catch (error) {
              config.blockNumber = -2;
              config._lastFatalError = error;
              config._lastFatalErrorTimestamp = getTime();
            }
            config._updateNumber = null;
          })();
        }
        await config._updateNumber;
        config.outOfSync++;
        if (config._lastFatalError) {
          break;
        }
      }
    }
    function _normalize(value) {
      if (value == null) {
        return "null";
      }
      if (Array.isArray(value)) {
        return "[" + value.map(_normalize).join(",") + "]";
      }
      if (typeof value === "object" && typeof value.toJSON === "function") {
        return _normalize(value.toJSON());
      }
      switch (typeof value) {
        case "boolean":
        case "symbol":
          return value.toString();
        case "bigint":
        case "number":
          return BigInt(value).toString();
        case "string":
          return JSON.stringify(value);
        case "object": {
          const keys = Object.keys(value);
          keys.sort();
          return "{" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
        }
      }
      console.log("Could not serialize", value);
      throw new Error("Hmm...");
    }
    function normalizeResult(value) {
      if ("error" in value) {
        const error = value.error;
        return { tag: _normalize(error), value: error };
      }
      const result = value.result;
      return { tag: _normalize(result), value: result };
    }
    function checkQuorum(quorum, results) {
      const tally = /* @__PURE__ */ new Map();
      for (const { value, tag, weight } of results) {
        const t = tally.get(tag) || { value, weight: 0 };
        t.weight += weight;
        tally.set(tag, t);
      }
      let best = null;
      for (const r of tally.values()) {
        if (r.weight >= quorum && (!best || r.weight > best.weight)) {
          best = r;
        }
      }
      if (best) {
        return best.value;
      }
      return void 0;
    }
    function getMedian(quorum, results) {
      let resultWeight = 0;
      const errorMap = /* @__PURE__ */ new Map();
      let bestError = null;
      const values = [];
      for (const { value, tag, weight } of results) {
        if (value instanceof Error) {
          const e = errorMap.get(tag) || { value, weight: 0 };
          e.weight += weight;
          errorMap.set(tag, e);
          if (bestError == null || e.weight > bestError.weight) {
            bestError = e;
          }
        } else {
          values.push(BigInt(value));
          resultWeight += weight;
        }
      }
      if (resultWeight < quorum) {
        if (bestError && bestError.weight >= quorum) {
          return bestError.value;
        }
        return void 0;
      }
      values.sort((a, b) => a < b ? -1 : b > a ? 1 : 0);
      const mid = Math.floor(values.length / 2);
      if (values.length % 2) {
        return values[mid];
      }
      return (values[mid - 1] + values[mid] + BN_1) / BN_2;
    }
    function getAnyResult(quorum, results) {
      const result = checkQuorum(quorum, results);
      if (result !== void 0) {
        return result;
      }
      for (const r of results) {
        if (r.value) {
          return r.value;
        }
      }
      return void 0;
    }
    function getFuzzyMode(quorum, results) {
      if (quorum === 1) {
        return (0, index_js_1.getNumber)(getMedian(quorum, results), "%internal");
      }
      const tally = /* @__PURE__ */ new Map();
      const add = (result, weight) => {
        const t = tally.get(result) || { result, weight: 0 };
        t.weight += weight;
        tally.set(result, t);
      };
      for (const { weight, value } of results) {
        const r = (0, index_js_1.getNumber)(value);
        add(r - 1, weight);
        add(r, weight);
        add(r + 1, weight);
      }
      let bestWeight = 0;
      let bestResult = void 0;
      for (const { weight, result } of tally.values()) {
        if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {
          bestWeight = weight;
          bestResult = result;
        }
      }
      return bestResult;
    }
    var _configs, _height, _initialSyncPromise, _getNextConfig, getNextConfig_fn, _addRunner, addRunner_fn, _initialSync, initialSync_fn, _checkQuorum, checkQuorum_fn, _waitForQuorum, waitForQuorum_fn;
    var FallbackProvider = class extends abstract_provider_js_1.AbstractProvider {
      /**
       *  Creates a new **FallbackProvider** with %%providers%% connected to
       *  %%network%%.
       *
       *  If a [[Provider]] is included in %%providers%%, defaults are used
       *  for the configuration.
       */
      constructor(providers, network, options) {
        super(network, options);
        // Grab the next (random) config that is not already part of
        // the running set
        __privateAdd(this, _getNextConfig);
        // Adds a new runner (if available) to running.
        __privateAdd(this, _addRunner);
        // Initializes the blockNumber and network for each runner and
        // blocks until initialized
        __privateAdd(this, _initialSync);
        __privateAdd(this, _checkQuorum);
        __privateAdd(this, _waitForQuorum);
        /**
         *  The number of backends that must agree on a value before it is
         *  accpeted.
         */
        __publicField(this, "quorum");
        /**
         *  @_ignore:
         */
        __publicField(this, "eventQuorum");
        /**
         *  @_ignore:
         */
        __publicField(this, "eventWorkers");
        __privateAdd(this, _configs, void 0);
        __privateAdd(this, _height, void 0);
        __privateAdd(this, _initialSyncPromise, void 0);
        __privateSet(this, _configs, providers.map((p) => {
          if (p instanceof abstract_provider_js_1.AbstractProvider) {
            return Object.assign({ provider: p }, defaultConfig, defaultState);
          } else {
            return Object.assign({}, defaultConfig, p, defaultState);
          }
        }));
        __privateSet(this, _height, -2);
        __privateSet(this, _initialSyncPromise, null);
        if (options && options.quorum != null) {
          this.quorum = options.quorum;
        } else {
          this.quorum = Math.ceil(__privateGet(this, _configs).reduce((accum, config) => {
            accum += config.weight;
            return accum;
          }, 0) / 2);
        }
        this.eventQuorum = 1;
        this.eventWorkers = 1;
        (0, index_js_1.assertArgument)(this.quorum <= __privateGet(this, _configs).reduce((a, c) => a + c.weight, 0), "quorum exceed provider weight", "quorum", this.quorum);
      }
      get providerConfigs() {
        return __privateGet(this, _configs).map((c) => {
          const result = Object.assign({}, c);
          for (const key in result) {
            if (key[0] === "_") {
              delete result[key];
            }
          }
          return result;
        });
      }
      async _detectNetwork() {
        return network_js_1.Network.from((0, index_js_1.getBigInt)(await this._perform({ method: "chainId" })));
      }
      // @TODO: Add support to select providers to be the event subscriber
      //_getSubscriber(sub: Subscription): Subscriber {
      //    throw new Error("@TODO");
      //}
      /**
       *  Transforms a %%req%% into the correct method call on %%provider%%.
       */
      async _translatePerform(provider, req) {
        switch (req.method) {
          case "broadcastTransaction":
            return await provider.broadcastTransaction(req.signedTransaction);
          case "call":
            return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));
          case "chainId":
            return (await provider.getNetwork()).chainId;
          case "estimateGas":
            return await provider.estimateGas(req.transaction);
          case "getBalance":
            return await provider.getBalance(req.address, req.blockTag);
          case "getBlock": {
            const block = "blockHash" in req ? req.blockHash : req.blockTag;
            return await provider.getBlock(block, req.includeTransactions);
          }
          case "getBlockNumber":
            return await provider.getBlockNumber();
          case "getCode":
            return await provider.getCode(req.address, req.blockTag);
          case "getGasPrice":
            return (await provider.getFeeData()).gasPrice;
          case "getPriorityFee":
            return (await provider.getFeeData()).maxPriorityFeePerGas;
          case "getLogs":
            return await provider.getLogs(req.filter);
          case "getStorage":
            return await provider.getStorage(req.address, req.position, req.blockTag);
          case "getTransaction":
            return await provider.getTransaction(req.hash);
          case "getTransactionCount":
            return await provider.getTransactionCount(req.address, req.blockTag);
          case "getTransactionReceipt":
            return await provider.getTransactionReceipt(req.hash);
          case "getTransactionResult":
            return await provider.getTransactionResult(req.hash);
        }
      }
      async _perform(req) {
        if (req.method === "broadcastTransaction") {
          const results = __privateGet(this, _configs).map((c) => null);
          const broadcasts = __privateGet(this, _configs).map(async ({ provider, weight }, index) => {
            try {
              const result3 = await provider._perform(req);
              results[index] = Object.assign(normalizeResult({ result: result3 }), { weight });
            } catch (error) {
              results[index] = Object.assign(normalizeResult({ error }), { weight });
            }
          });
          while (true) {
            const done = results.filter((r) => r != null);
            for (const { value } of done) {
              if (!(value instanceof Error)) {
                return value;
              }
            }
            const result3 = checkQuorum(this.quorum, results.filter((r) => r != null));
            if ((0, index_js_1.isError)(result3, "INSUFFICIENT_FUNDS")) {
              throw result3;
            }
            const waiting = broadcasts.filter((b, i) => results[i] == null);
            if (waiting.length === 0) {
              break;
            }
            await Promise.race(waiting);
          }
          const result2 = getAnyResult(this.quorum, results);
          (0, index_js_1.assert)(result2 !== void 0, "problem multi-broadcasting", "SERVER_ERROR", {
            request: "%sub-requests",
            info: { request: req, results: results.map(stringify) }
          });
          if (result2 instanceof Error) {
            throw result2;
          }
          return result2;
        }
        await __privateMethod(this, _initialSync, initialSync_fn).call(this);
        const running = /* @__PURE__ */ new Set();
        let inflightQuorum = 0;
        while (true) {
          const runner = __privateMethod(this, _addRunner, addRunner_fn).call(this, running, req);
          if (runner == null) {
            break;
          }
          inflightQuorum += runner.config.weight;
          if (inflightQuorum >= this.quorum) {
            break;
          }
        }
        const result = await __privateMethod(this, _waitForQuorum, waitForQuorum_fn).call(this, running, req);
        for (const runner of running) {
          if (runner.perform && runner.result == null) {
            runner.config.lateResponses++;
          }
        }
        return result;
      }
      async destroy() {
        for (const { provider } of __privateGet(this, _configs)) {
          provider.destroy();
        }
        super.destroy();
      }
    };
    _configs = new WeakMap();
    _height = new WeakMap();
    _initialSyncPromise = new WeakMap();
    _getNextConfig = new WeakSet();
    getNextConfig_fn = function(running) {
      const configs = Array.from(running).map((r) => r.config);
      const allConfigs = __privateGet(this, _configs).slice();
      shuffle(allConfigs);
      allConfigs.sort((a, b) => a.priority - b.priority);
      for (const config of allConfigs) {
        if (config._lastFatalError) {
          continue;
        }
        if (configs.indexOf(config) === -1) {
          return config;
        }
      }
      return null;
    };
    _addRunner = new WeakSet();
    addRunner_fn = function(running, req) {
      const config = __privateMethod(this, _getNextConfig, getNextConfig_fn).call(this, running);
      if (config == null) {
        return null;
      }
      const runner = {
        config,
        result: null,
        didBump: false,
        perform: null,
        staller: null
      };
      const now = getTime();
      runner.perform = (async () => {
        try {
          config.requests++;
          const result = await this._translatePerform(config.provider, req);
          runner.result = { result };
        } catch (error) {
          config.errorResponses++;
          runner.result = { error };
        }
        const dt2 = getTime() - now;
        config._totalTime += dt2;
        config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt2;
        runner.perform = null;
      })();
      runner.staller = (async () => {
        await stall(config.stallTimeout);
        runner.staller = null;
      })();
      running.add(runner);
      return runner;
    };
    _initialSync = new WeakSet();
    initialSync_fn = async function() {
      let initialSync = __privateGet(this, _initialSyncPromise);
      if (!initialSync) {
        const promises = [];
        __privateGet(this, _configs).forEach((config) => {
          promises.push((async () => {
            await waitForSync(config, 0);
            if (!config._lastFatalError) {
              config._network = await config.provider.getNetwork();
            }
          })());
        });
        __privateSet(this, _initialSyncPromise, initialSync = (async () => {
          await Promise.all(promises);
          let chainId = null;
          for (const config of __privateGet(this, _configs)) {
            if (config._lastFatalError) {
              continue;
            }
            const network = config._network;
            if (chainId == null) {
              chainId = network.chainId;
            } else if (network.chainId !== chainId) {
              (0, index_js_1.assert)(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
                operation: "new FallbackProvider"
              });
            }
          }
        })());
      }
      await initialSync;
    };
    _checkQuorum = new WeakSet();
    checkQuorum_fn = async function(running, req) {
      const results = [];
      for (const runner of running) {
        if (runner.result != null) {
          const { tag, value } = normalizeResult(runner.result);
          results.push({ tag, value, weight: runner.config.weight });
        }
      }
      if (results.reduce((a, r) => a + r.weight, 0) < this.quorum) {
        return void 0;
      }
      switch (req.method) {
        case "getBlockNumber": {
          if (__privateGet(this, _height) === -2) {
            __privateSet(this, _height, Math.ceil((0, index_js_1.getNumber)(getMedian(this.quorum, __privateGet(this, _configs).filter((c) => !c._lastFatalError).map((c) => ({
              value: c.blockNumber,
              tag: (0, index_js_1.getNumber)(c.blockNumber).toString(),
              weight: c.weight
            }))))));
          }
          const mode = getFuzzyMode(this.quorum, results);
          if (mode === void 0) {
            return void 0;
          }
          if (mode > __privateGet(this, _height)) {
            __privateSet(this, _height, mode);
          }
          return __privateGet(this, _height);
        }
        case "getGasPrice":
        case "getPriorityFee":
        case "estimateGas":
          return getMedian(this.quorum, results);
        case "getBlock":
          if ("blockTag" in req && req.blockTag === "pending") {
            return getAnyResult(this.quorum, results);
          }
          return checkQuorum(this.quorum, results);
        case "call":
        case "chainId":
        case "getBalance":
        case "getTransactionCount":
        case "getCode":
        case "getStorage":
        case "getTransaction":
        case "getTransactionReceipt":
        case "getLogs":
          return checkQuorum(this.quorum, results);
        case "broadcastTransaction":
          return getAnyResult(this.quorum, results);
      }
      (0, index_js_1.assert)(false, "unsupported method", "UNSUPPORTED_OPERATION", {
        operation: `_perform(${stringify(req.method)})`
      });
    };
    _waitForQuorum = new WeakSet();
    waitForQuorum_fn = async function(running, req) {
      if (running.size === 0) {
        throw new Error("no runners?!");
      }
      const interesting = [];
      let newRunners = 0;
      for (const runner of running) {
        if (runner.perform) {
          interesting.push(runner.perform);
        }
        if (runner.staller) {
          interesting.push(runner.staller);
          continue;
        }
        if (runner.didBump) {
          continue;
        }
        runner.didBump = true;
        newRunners++;
      }
      const value = await __privateMethod(this, _checkQuorum, checkQuorum_fn).call(this, running, req);
      if (value !== void 0) {
        if (value instanceof Error) {
          throw value;
        }
        return value;
      }
      for (let i = 0; i < newRunners; i++) {
        __privateMethod(this, _addRunner, addRunner_fn).call(this, running, req);
      }
      (0, index_js_1.assert)(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
        request: "%sub-requests",
        info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }
      });
      await Promise.race(interesting);
      return await __privateMethod(this, _waitForQuorum, waitForQuorum_fn).call(this, running, req);
    };
    exports.FallbackProvider = FallbackProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/default-provider.js
var require_default_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/default-provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultProvider = void 0;
    var index_js_1 = require_utils3();
    var provider_ankr_js_1 = require_provider_ankr();
    var provider_alchemy_js_1 = require_provider_alchemy();
    var provider_chainstack_js_1 = require_provider_chainstack();
    var provider_cloudflare_js_1 = require_provider_cloudflare();
    var provider_etherscan_js_1 = require_provider_etherscan();
    var provider_infura_js_1 = require_provider_infura();
    var provider_quicknode_js_1 = require_provider_quicknode();
    var provider_fallback_js_1 = require_provider_fallback();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var network_js_1 = require_network();
    var provider_websocket_js_1 = require_provider_websocket();
    function isWebSocketLike(value) {
      return value && typeof value.send === "function" && typeof value.close === "function";
    }
    var Testnets = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");
    function getDefaultProvider(network, options) {
      if (options == null) {
        options = {};
      }
      const allowService = (name) => {
        if (options[name] === "-") {
          return false;
        }
        if (typeof options.exclusive === "string") {
          return name === options.exclusive;
        }
        if (Array.isArray(options.exclusive)) {
          return options.exclusive.indexOf(name) !== -1;
        }
        return true;
      };
      if (typeof network === "string" && network.match(/^https?:/)) {
        return new provider_jsonrpc_js_1.JsonRpcProvider(network);
      }
      if (typeof network === "string" && network.match(/^wss?:/) || isWebSocketLike(network)) {
        return new provider_websocket_js_1.WebSocketProvider(network);
      }
      let staticNetwork = null;
      try {
        staticNetwork = network_js_1.Network.from(network);
      } catch (error) {
      }
      const providers = [];
      if (allowService("publicPolygon") && staticNetwork) {
        if (staticNetwork.name === "matic") {
          providers.push(new provider_jsonrpc_js_1.JsonRpcProvider("https://polygon-rpc.com/", staticNetwork, { staticNetwork }));
        } else if (staticNetwork.name === "matic-amoy") {
          providers.push(new provider_jsonrpc_js_1.JsonRpcProvider("https://rpc-amoy.polygon.technology/", staticNetwork, { staticNetwork }));
        }
      }
      if (allowService("alchemy")) {
        try {
          providers.push(new provider_alchemy_js_1.AlchemyProvider(network, options.alchemy));
        } catch (error) {
        }
      }
      if (allowService("ankr") && options.ankr != null) {
        try {
          providers.push(new provider_ankr_js_1.AnkrProvider(network, options.ankr));
        } catch (error) {
        }
      }
      if (allowService("chainstack")) {
        try {
          providers.push(new provider_chainstack_js_1.ChainstackProvider(network, options.chainstack));
        } catch (error) {
        }
      }
      if (allowService("cloudflare")) {
        try {
          providers.push(new provider_cloudflare_js_1.CloudflareProvider(network));
        } catch (error) {
        }
      }
      if (allowService("etherscan")) {
        try {
          providers.push(new provider_etherscan_js_1.EtherscanProvider(network, options.etherscan));
        } catch (error) {
        }
      }
      if (allowService("infura")) {
        try {
          let projectId = options.infura;
          let projectSecret = void 0;
          if (typeof projectId === "object") {
            projectSecret = projectId.projectSecret;
            projectId = projectId.projectId;
          }
          providers.push(new provider_infura_js_1.InfuraProvider(network, projectId, projectSecret));
        } catch (error) {
        }
      }
      if (allowService("quicknode")) {
        try {
          let token = options.quicknode;
          providers.push(new provider_quicknode_js_1.QuickNodeProvider(network, token));
        } catch (error) {
        }
      }
      (0, index_js_1.assert)(providers.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
        operation: "getDefaultProvider"
      });
      if (providers.length === 1) {
        return providers[0];
      }
      let quorum = Math.floor(providers.length / 2);
      if (quorum > 2) {
        quorum = 2;
      }
      if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {
        quorum = 1;
      }
      if (options && options.quorum) {
        quorum = options.quorum;
      }
      return new provider_fallback_js_1.FallbackProvider(providers, void 0, { quorum });
    }
    exports.getDefaultProvider = getDefaultProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js
var require_signer_noncemanager = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NonceManager = void 0;
    var index_js_1 = require_utils3();
    var abstract_signer_js_1 = require_abstract_signer();
    var _noncePromise, _delta;
    var _NonceManager = class _NonceManager extends abstract_signer_js_1.AbstractSigner {
      /**
       *  Creates a new **NonceManager** to manage %%signer%%.
       */
      constructor(signer) {
        super(signer.provider);
        /**
         *  The Signer being managed.
         */
        __publicField(this, "signer");
        __privateAdd(this, _noncePromise, void 0);
        __privateAdd(this, _delta, void 0);
        (0, index_js_1.defineProperties)(this, { signer });
        __privateSet(this, _noncePromise, null);
        __privateSet(this, _delta, 0);
      }
      async getAddress() {
        return this.signer.getAddress();
      }
      connect(provider) {
        return new _NonceManager(this.signer.connect(provider));
      }
      async getNonce(blockTag) {
        if (blockTag === "pending") {
          if (__privateGet(this, _noncePromise) == null) {
            __privateSet(this, _noncePromise, super.getNonce("pending"));
          }
          const delta = __privateGet(this, _delta);
          return await __privateGet(this, _noncePromise) + delta;
        }
        return super.getNonce(blockTag);
      }
      /**
       *  Manually increment the nonce. This may be useful when managng
       *  offline transactions.
       */
      increment() {
        __privateWrapper(this, _delta)._++;
      }
      /**
       *  Resets the nonce, causing the **NonceManager** to reload the current
       *  nonce from the blockchain on the next transaction.
       */
      reset() {
        __privateSet(this, _delta, 0);
        __privateSet(this, _noncePromise, null);
      }
      async sendTransaction(tx) {
        const noncePromise = this.getNonce("pending");
        this.increment();
        tx = await this.signer.populateTransaction(tx);
        tx.nonce = await noncePromise;
        return await this.signer.sendTransaction(tx);
      }
      signTransaction(tx) {
        return this.signer.signTransaction(tx);
      }
      signMessage(message) {
        return this.signer.signMessage(message);
      }
      signTypedData(domain, types, value) {
        return this.signer.signTypedData(domain, types, value);
      }
    };
    _noncePromise = new WeakMap();
    _delta = new WeakMap();
    var NonceManager = _NonceManager;
    exports.NonceManager = NonceManager;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-browser.js
var require_provider_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserProvider = void 0;
    var index_js_1 = require_utils3();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var _request;
    var BrowserProvider = class extends provider_jsonrpc_js_1.JsonRpcApiPollingProvider {
      /**
       *  Connnect to the %%ethereum%% provider, optionally forcing the
       *  %%network%%.
       */
      constructor(ethereum, network, _options) {
        const options = Object.assign({}, _options != null ? _options : {}, { batchMaxCount: 1 });
        (0, index_js_1.assertArgument)(ethereum && ethereum.request, "invalid EIP-1193 provider", "ethereum", ethereum);
        super(network, options);
        __privateAdd(this, _request, void 0);
        __privateSet(this, _request, async (method, params) => {
          const payload = { method, params };
          this.emit("debug", { action: "sendEip1193Request", payload });
          try {
            const result = await ethereum.request(payload);
            this.emit("debug", { action: "receiveEip1193Result", result });
            return result;
          } catch (e) {
            const error = new Error(e.message);
            error.code = e.code;
            error.data = e.data;
            error.payload = payload;
            this.emit("debug", { action: "receiveEip1193Error", error });
            throw error;
          }
        });
      }
      async send(method, params) {
        await this._start();
        return await super.send(method, params);
      }
      async _send(payload) {
        (0, index_js_1.assertArgument)(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
        try {
          const result = await __privateGet(this, _request).call(this, payload.method, payload.params || []);
          return [{ id: payload.id, result }];
        } catch (e) {
          return [{
            id: payload.id,
            error: { code: e.code, data: e.data, message: e.message }
          }];
        }
      }
      getRpcError(payload, error) {
        error = JSON.parse(JSON.stringify(error));
        switch (error.error.code || -1) {
          case 4001:
            error.error.message = `ethers-user-denied: ${error.error.message}`;
            break;
          case 4200:
            error.error.message = `ethers-unsupported: ${error.error.message}`;
            break;
        }
        return super.getRpcError(payload, error);
      }
      /**
       *  Resolves to ``true`` if the provider manages the %%address%%.
       */
      async hasSigner(address) {
        if (address == null) {
          address = 0;
        }
        const accounts = await this.send("eth_accounts", []);
        if (typeof address === "number") {
          return accounts.length > address;
        }
        address = address.toLowerCase();
        return accounts.filter((a) => a.toLowerCase() === address).length !== 0;
      }
      async getSigner(address) {
        if (address == null) {
          address = 0;
        }
        if (!await this.hasSigner(address)) {
          try {
            await __privateGet(this, _request).call(this, "eth_requestAccounts", []);
          } catch (error) {
            const payload = error.payload;
            throw this.getRpcError(payload, { id: payload.id, error });
          }
        }
        return await super.getSigner(address);
      }
    };
    _request = new WeakMap();
    exports.BrowserProvider = BrowserProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-pocket.js
var require_provider_pocket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-pocket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PocketProvider = void 0;
    var index_js_1 = require_utils3();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "eth-mainnet.gateway.pokt.network";
        case "goerli":
          return "eth-goerli.gateway.pokt.network";
        case "matic":
          return "poly-mainnet.gateway.pokt.network";
        case "matic-mumbai":
          return "polygon-mumbai-rpc.gateway.pokt.network";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var PocketProvider = class _PocketProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Create a new **PocketProvider**.
       *
       *  By default connecting to ``mainnet`` with a highly throttled
       *  API key.
       */
      constructor(_network, applicationId, applicationSecret) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (applicationId == null) {
          applicationId = defaultApplicationId;
        }
        if (applicationSecret == null) {
          applicationSecret = null;
        }
        const options = { staticNetwork: network };
        const request = _PocketProvider.getRequest(network, applicationId, applicationSecret);
        super(request, network, options);
        /**
         *  The Application ID for the Pocket connection.
         */
        __publicField(this, "applicationId");
        /**
         *  The Application Secret for making authenticated requests
         *  to the Pocket connection.
         */
        __publicField(this, "applicationSecret");
        (0, index_js_1.defineProperties)(this, { applicationId, applicationSecret });
      }
      _getProvider(chainId) {
        try {
          return new _PocketProvider(chainId, this.applicationId, this.applicationSecret);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%% with
       *  %%applicationId%%.
       */
      static getRequest(network, applicationId, applicationSecret) {
        if (applicationId == null) {
          applicationId = defaultApplicationId;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v1/lb/${applicationId}`);
        request.allowGzip = true;
        if (applicationSecret) {
          request.setCredentials("", applicationSecret);
        }
        if (applicationId === defaultApplicationId) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("PocketProvider");
            return true;
          };
        }
        return request;
      }
      isCommunityResource() {
        return this.applicationId === defaultApplicationId;
      }
    };
    exports.PocketProvider = PocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-ipcsocket-browser.js
var require_provider_ipcsocket_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-ipcsocket-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IpcSocketProvider = void 0;
    var IpcSocketProvider = void 0;
    exports.IpcSocketProvider = IpcSocketProvider;
  }
});

// node_modules/ethers/lib.commonjs/providers/index.js
var require_providers = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SocketEventSubscriber = exports.SocketPendingSubscriber = exports.SocketBlockSubscriber = exports.SocketSubscriber = exports.WebSocketProvider = exports.SocketProvider = exports.IpcSocketProvider = exports.QuickNodeProvider = exports.PocketProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanPlugin = exports.EtherscanProvider = exports.ChainstackProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.AlchemyProvider = exports.BrowserProvider = exports.JsonRpcSigner = exports.JsonRpcProvider = exports.JsonRpcApiProvider = exports.FallbackProvider = exports.copyRequest = exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.FeeData = exports.Block = exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = exports.EnsPlugin = exports.GasCostPlugin = exports.NetworkPlugin = exports.NonceManager = exports.Network = exports.MulticoinProviderPlugin = exports.EnsResolver = exports.getDefaultProvider = exports.showThrottleMessage = exports.VoidSigner = exports.AbstractSigner = exports.UnmanagedSubscriber = exports.AbstractProvider = void 0;
    var abstract_provider_js_1 = require_abstract_provider();
    Object.defineProperty(exports, "AbstractProvider", { enumerable: true, get: function() {
      return abstract_provider_js_1.AbstractProvider;
    } });
    Object.defineProperty(exports, "UnmanagedSubscriber", { enumerable: true, get: function() {
      return abstract_provider_js_1.UnmanagedSubscriber;
    } });
    var abstract_signer_js_1 = require_abstract_signer();
    Object.defineProperty(exports, "AbstractSigner", { enumerable: true, get: function() {
      return abstract_signer_js_1.AbstractSigner;
    } });
    Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function() {
      return abstract_signer_js_1.VoidSigner;
    } });
    var community_js_1 = require_community();
    Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function() {
      return community_js_1.showThrottleMessage;
    } });
    var default_provider_js_1 = require_default_provider();
    Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function() {
      return default_provider_js_1.getDefaultProvider;
    } });
    var ens_resolver_js_1 = require_ens_resolver();
    Object.defineProperty(exports, "EnsResolver", { enumerable: true, get: function() {
      return ens_resolver_js_1.EnsResolver;
    } });
    Object.defineProperty(exports, "MulticoinProviderPlugin", { enumerable: true, get: function() {
      return ens_resolver_js_1.MulticoinProviderPlugin;
    } });
    var network_js_1 = require_network();
    Object.defineProperty(exports, "Network", { enumerable: true, get: function() {
      return network_js_1.Network;
    } });
    var signer_noncemanager_js_1 = require_signer_noncemanager();
    Object.defineProperty(exports, "NonceManager", { enumerable: true, get: function() {
      return signer_noncemanager_js_1.NonceManager;
    } });
    var plugins_network_js_1 = require_plugins_network();
    Object.defineProperty(exports, "NetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.NetworkPlugin;
    } });
    Object.defineProperty(exports, "GasCostPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.GasCostPlugin;
    } });
    Object.defineProperty(exports, "EnsPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.EnsPlugin;
    } });
    Object.defineProperty(exports, "FeeDataNetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.FeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.FetchUrlFeeDataNetworkPlugin;
    } });
    var provider_js_1 = require_provider();
    Object.defineProperty(exports, "Block", { enumerable: true, get: function() {
      return provider_js_1.Block;
    } });
    Object.defineProperty(exports, "FeeData", { enumerable: true, get: function() {
      return provider_js_1.FeeData;
    } });
    Object.defineProperty(exports, "Log", { enumerable: true, get: function() {
      return provider_js_1.Log;
    } });
    Object.defineProperty(exports, "TransactionReceipt", { enumerable: true, get: function() {
      return provider_js_1.TransactionReceipt;
    } });
    Object.defineProperty(exports, "TransactionResponse", { enumerable: true, get: function() {
      return provider_js_1.TransactionResponse;
    } });
    Object.defineProperty(exports, "copyRequest", { enumerable: true, get: function() {
      return provider_js_1.copyRequest;
    } });
    var provider_fallback_js_1 = require_provider_fallback();
    Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function() {
      return provider_fallback_js_1.FallbackProvider;
    } });
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    Object.defineProperty(exports, "JsonRpcApiProvider", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcApiProvider;
    } });
    Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcProvider;
    } });
    Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcSigner;
    } });
    var provider_browser_js_1 = require_provider_browser();
    Object.defineProperty(exports, "BrowserProvider", { enumerable: true, get: function() {
      return provider_browser_js_1.BrowserProvider;
    } });
    var provider_alchemy_js_1 = require_provider_alchemy();
    Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function() {
      return provider_alchemy_js_1.AlchemyProvider;
    } });
    var provider_ankr_js_1 = require_provider_ankr();
    Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function() {
      return provider_ankr_js_1.AnkrProvider;
    } });
    var provider_cloudflare_js_1 = require_provider_cloudflare();
    Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function() {
      return provider_cloudflare_js_1.CloudflareProvider;
    } });
    var provider_chainstack_js_1 = require_provider_chainstack();
    Object.defineProperty(exports, "ChainstackProvider", { enumerable: true, get: function() {
      return provider_chainstack_js_1.ChainstackProvider;
    } });
    var provider_etherscan_js_1 = require_provider_etherscan();
    Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function() {
      return provider_etherscan_js_1.EtherscanProvider;
    } });
    Object.defineProperty(exports, "EtherscanPlugin", { enumerable: true, get: function() {
      return provider_etherscan_js_1.EtherscanPlugin;
    } });
    var provider_infura_js_1 = require_provider_infura();
    Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function() {
      return provider_infura_js_1.InfuraProvider;
    } });
    Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function() {
      return provider_infura_js_1.InfuraWebSocketProvider;
    } });
    var provider_pocket_js_1 = require_provider_pocket();
    Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function() {
      return provider_pocket_js_1.PocketProvider;
    } });
    var provider_quicknode_js_1 = require_provider_quicknode();
    Object.defineProperty(exports, "QuickNodeProvider", { enumerable: true, get: function() {
      return provider_quicknode_js_1.QuickNodeProvider;
    } });
    var provider_ipcsocket_js_1 = require_provider_ipcsocket_browser();
    Object.defineProperty(exports, "IpcSocketProvider", { enumerable: true, get: function() {
      return provider_ipcsocket_js_1.IpcSocketProvider;
    } });
    var provider_socket_js_1 = require_provider_socket();
    Object.defineProperty(exports, "SocketProvider", { enumerable: true, get: function() {
      return provider_socket_js_1.SocketProvider;
    } });
    var provider_websocket_js_1 = require_provider_websocket();
    Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function() {
      return provider_websocket_js_1.WebSocketProvider;
    } });
    var provider_socket_js_2 = require_provider_socket();
    Object.defineProperty(exports, "SocketSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketSubscriber;
    } });
    Object.defineProperty(exports, "SocketBlockSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketBlockSubscriber;
    } });
    Object.defineProperty(exports, "SocketPendingSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketPendingSubscriber;
    } });
    Object.defineProperty(exports, "SocketEventSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketEventSubscriber;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wallet/base-wallet.js
var require_base_wallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/base-wallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseWallet = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_hash();
    var index_js_3 = require_providers();
    var index_js_4 = require_transaction2();
    var index_js_5 = require_utils3();
    var _signingKey;
    var _BaseWallet = class _BaseWallet extends index_js_3.AbstractSigner {
      /**
       *  Creates a new BaseWallet for %%privateKey%%, optionally
       *  connected to %%provider%%.
       *
       *  If %%provider%% is not specified, only offline methods can
       *  be used.
       */
      constructor(privateKey, provider) {
        super(provider);
        /**
         *  The wallet address.
         */
        __publicField(this, "address");
        __privateAdd(this, _signingKey, void 0);
        (0, index_js_5.assertArgument)(privateKey && typeof privateKey.sign === "function", "invalid private key", "privateKey", "[ REDACTED ]");
        __privateSet(this, _signingKey, privateKey);
        const address = (0, index_js_4.computeAddress)(this.signingKey.publicKey);
        (0, index_js_5.defineProperties)(this, { address });
      }
      // Store private values behind getters to reduce visibility
      // in console.log
      /**
       *  The [[SigningKey]] used for signing payloads.
       */
      get signingKey() {
        return __privateGet(this, _signingKey);
      }
      /**
       *  The private key for this wallet.
       */
      get privateKey() {
        return this.signingKey.privateKey;
      }
      async getAddress() {
        return this.address;
      }
      connect(provider) {
        return new _BaseWallet(__privateGet(this, _signingKey), provider);
      }
      async signTransaction(tx) {
        tx = (0, index_js_3.copyRequest)(tx);
        const { to, from } = await (0, index_js_5.resolveProperties)({
          to: tx.to ? (0, index_js_1.resolveAddress)(tx.to, this.provider) : void 0,
          from: tx.from ? (0, index_js_1.resolveAddress)(tx.from, this.provider) : void 0
        });
        if (to != null) {
          tx.to = to;
        }
        if (from != null) {
          tx.from = from;
        }
        if (tx.from != null) {
          (0, index_js_5.assertArgument)((0, index_js_1.getAddress)(tx.from) === this.address, "transaction from address mismatch", "tx.from", tx.from);
          delete tx.from;
        }
        const btx = index_js_4.Transaction.from(tx);
        btx.signature = this.signingKey.sign(btx.unsignedHash);
        return btx.serialized;
      }
      async signMessage(message) {
        return this.signMessageSync(message);
      }
      // @TODO: Add a secialized signTx and signTyped sync that enforces
      // all parameters are known?
      /**
       *  Returns the signature for %%message%% signed with this wallet.
       */
      signMessageSync(message) {
        return this.signingKey.sign((0, index_js_2.hashMessage)(message)).serialized;
      }
      async signTypedData(domain, types, value) {
        const populated = await index_js_2.TypedDataEncoder.resolveNames(domain, types, value, async (name) => {
          (0, index_js_5.assert)(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
            operation: "resolveName",
            info: { name }
          });
          const address = await this.provider.resolveName(name);
          (0, index_js_5.assert)(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
            value: name
          });
          return address;
        });
        return this.signingKey.sign(index_js_2.TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;
      }
    };
    _signingKey = new WeakMap();
    var BaseWallet = _BaseWallet;
    exports.BaseWallet = BaseWallet;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/decode-owl.js
var require_decode_owl = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/decode-owl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeOwl = exports.decode = void 0;
    var index_js_1 = require_utils3();
    var subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
    var Word = /^[a-z]*$/i;
    function unfold(words, sep) {
      let initial = 97;
      return words.reduce((accum, word) => {
        if (word === sep) {
          initial++;
        } else if (word.match(Word)) {
          accum.push(String.fromCharCode(initial) + word);
        } else {
          initial = 97;
          accum.push(word);
        }
        return accum;
      }, []);
    }
    function decode(data, subs) {
      for (let i = subsChrs.length - 1; i >= 0; i--) {
        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
      }
      const clumps = [];
      const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
        if (semi) {
          for (let i = parseInt(semi); i >= 0; i--) {
            clumps.push(";");
          }
        } else {
          clumps.push(item.toLowerCase());
        }
        return "";
      });
      if (leftover) {
        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
      }
      return unfold(unfold(clumps, ";"), ":");
    }
    exports.decode = decode;
    function decodeOwl(data) {
      (0, index_js_1.assertArgument)(data[0] === "0", "unsupported auwl data", "data", data);
      return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
    }
    exports.decodeOwl = decodeOwl;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist.js
var require_wordlist = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wordlist = void 0;
    var index_js_1 = require_utils3();
    var Wordlist = class {
      /**
       *  Creates a new Wordlist instance.
       *
       *  Sub-classes MUST call this if they provide their own constructor,
       *  passing in the locale string of the language.
       *
       *  Generally there is no need to create instances of a Wordlist,
       *  since each language-specific Wordlist creates an instance and
       *  there is no state kept internally, so they are safe to share.
       */
      constructor(locale) {
        __publicField(this, "locale");
        (0, index_js_1.defineProperties)(this, { locale });
      }
      /**
       *  Sub-classes may override this to provide a language-specific
       *  method for spliting %%phrase%% into individual words.
       *
       *  By default, %%phrase%% is split using any sequences of
       *  white-space as defined by regular expressions (i.e. ``/\s+/``).
       */
      split(phrase) {
        return phrase.toLowerCase().split(/\s+/g);
      }
      /**
       *  Sub-classes may override this to provider a language-specific
       *  method for joining %%words%% into a phrase.
       *
       *  By default, %%words%% are joined by a single space.
       */
      join(words) {
        return words.join(" ");
      }
    };
    exports.Wordlist = Wordlist;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js
var require_wordlist_owl = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WordlistOwl = void 0;
    var index_js_1 = require_hash();
    var index_js_2 = require_utils3();
    var decode_owl_js_1 = require_decode_owl();
    var wordlist_js_1 = require_wordlist();
    var _data, _checksum, _words, _loadWords, loadWords_fn;
    var WordlistOwl = class extends wordlist_js_1.Wordlist {
      /**
       *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
       *  and validated against the %%checksum%%.
       */
      constructor(locale, data, checksum) {
        super(locale);
        __privateAdd(this, _loadWords);
        __privateAdd(this, _data, void 0);
        __privateAdd(this, _checksum, void 0);
        __privateAdd(this, _words, void 0);
        __privateSet(this, _data, data);
        __privateSet(this, _checksum, checksum);
        __privateSet(this, _words, null);
      }
      /**
       *  The OWL-encoded data.
       */
      get _data() {
        return __privateGet(this, _data);
      }
      /**
       *  Decode all the words for the wordlist.
       */
      _decodeWords() {
        return (0, decode_owl_js_1.decodeOwl)(__privateGet(this, _data));
      }
      getWord(index) {
        const words = __privateMethod(this, _loadWords, loadWords_fn).call(this);
        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
        return words[index];
      }
      getWordIndex(word) {
        return __privateMethod(this, _loadWords, loadWords_fn).call(this).indexOf(word);
      }
    };
    _data = new WeakMap();
    _checksum = new WeakMap();
    _words = new WeakMap();
    _loadWords = new WeakSet();
    loadWords_fn = function() {
      if (__privateGet(this, _words) == null) {
        const words = this._decodeWords();
        const checksum = (0, index_js_1.id)(words.join("\n") + "\n");
        if (checksum !== __privateGet(this, _checksum)) {
          throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
        }
        __privateSet(this, _words, words);
      }
      return __privateGet(this, _words);
    };
    exports.WordlistOwl = WordlistOwl;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-en.js
var require_lang_en = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-en.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LangEn = void 0;
    var wordlist_owl_js_1 = require_wordlist_owl();
    var words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
    var checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
    var wordlist = null;
    var LangEn = class _LangEn extends wordlist_owl_js_1.WordlistOwl {
      /**
       *  Creates a new instance of the English language Wordlist.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langEn]] should suffice.
       *
       *  @_ignore:
       */
      constructor() {
        super("en", words, checksum);
      }
      /**
       *  Returns a singleton instance of a ``LangEn``, creating it
       *  if this is the first time being called.
       */
      static wordlist() {
        if (wordlist == null) {
          wordlist = new _LangEn();
        }
        return wordlist;
      }
    };
    exports.LangEn = LangEn;
  }
});

// node_modules/ethers/lib.commonjs/wallet/mnemonic.js
var require_mnemonic = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/mnemonic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Mnemonic = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils3();
    var lang_en_js_1 = require_lang_en();
    function getUpperMask(bits) {
      return (1 << bits) - 1 << 8 - bits & 255;
    }
    function getLowerMask(bits) {
      return (1 << bits) - 1 & 255;
    }
    function mnemonicToEntropy(mnemonic, wordlist) {
      (0, index_js_2.assertNormalize)("NFKD");
      if (wordlist == null) {
        wordlist = lang_en_js_1.LangEn.wordlist();
      }
      const words = wordlist.split(mnemonic);
      (0, index_js_2.assertArgument)(words.length % 3 === 0 && words.length >= 12 && words.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
      const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));
      let offset = 0;
      for (let i = 0; i < words.length; i++) {
        let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
        (0, index_js_2.assertArgument)(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
        for (let bit = 0; bit < 11; bit++) {
          if (index & 1 << 10 - bit) {
            entropy[offset >> 3] |= 1 << 7 - offset % 8;
          }
          offset++;
        }
      }
      const entropyBits = 32 * words.length / 3;
      const checksumBits = words.length / 3;
      const checksumMask = getUpperMask(checksumBits);
      const checksum = (0, index_js_2.getBytes)((0, index_js_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
      (0, index_js_2.assertArgument)(checksum === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
      return (0, index_js_2.hexlify)(entropy.slice(0, entropyBits / 8));
    }
    function entropyToMnemonic(entropy, wordlist) {
      (0, index_js_2.assertArgument)(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
      if (wordlist == null) {
        wordlist = lang_en_js_1.LangEn.wordlist();
      }
      const indices = [0];
      let remainingBits = 11;
      for (let i = 0; i < entropy.length; i++) {
        if (remainingBits > 8) {
          indices[indices.length - 1] <<= 8;
          indices[indices.length - 1] |= entropy[i];
          remainingBits -= 8;
        } else {
          indices[indices.length - 1] <<= remainingBits;
          indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
          indices.push(entropy[i] & getLowerMask(8 - remainingBits));
          remainingBits += 3;
        }
      }
      const checksumBits = entropy.length / 4;
      const checksum = parseInt((0, index_js_1.sha256)(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
      indices[indices.length - 1] <<= checksumBits;
      indices[indices.length - 1] |= checksum >> 8 - checksumBits;
      return wordlist.join(indices.map((index) => wordlist.getWord(index)));
    }
    var _guard = {};
    var Mnemonic = class _Mnemonic {
      /**
       *  @private
       */
      constructor(guard, entropy, phrase, password, wordlist) {
        /**
         *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.
         *
         *  Use the [[wordlist]] ``split`` method to get the individual words.
         */
        __publicField(this, "phrase");
        /**
         *  The password used for this mnemonic. If no password is used this
         *  is the empty string (i.e. ``""``) as per the specification.
         */
        __publicField(this, "password");
        /**
         *  The wordlist for this mnemonic.
         */
        __publicField(this, "wordlist");
        /**
         *  The underlying entropy which the mnemonic encodes.
         */
        __publicField(this, "entropy");
        if (password == null) {
          password = "";
        }
        if (wordlist == null) {
          wordlist = lang_en_js_1.LangEn.wordlist();
        }
        (0, index_js_2.assertPrivate)(guard, _guard, "Mnemonic");
        (0, index_js_2.defineProperties)(this, { phrase, password, wordlist, entropy });
      }
      /**
       *  Returns the seed for the mnemonic.
       */
      computeSeed() {
        const salt = (0, index_js_2.toUtf8Bytes)("mnemonic" + this.password, "NFKD");
        return (0, index_js_1.pbkdf2)((0, index_js_2.toUtf8Bytes)(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
      }
      /**
       *  Creates a new Mnemonic for the %%phrase%%.
       *
       *  The default %%password%% is the empty string and the default
       *  wordlist is the [English wordlists](LangEn).
       */
      static fromPhrase(phrase, password, wordlist) {
        const entropy = mnemonicToEntropy(phrase, wordlist);
        phrase = entropyToMnemonic((0, index_js_2.getBytes)(entropy), wordlist);
        return new _Mnemonic(_guard, entropy, phrase, password, wordlist);
      }
      /**
       *  Create a new **Mnemonic** from the %%entropy%%.
       *
       *  The default %%password%% is the empty string and the default
       *  wordlist is the [English wordlists](LangEn).
       */
      static fromEntropy(_entropy, password, wordlist) {
        const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
        const phrase = entropyToMnemonic(entropy, wordlist);
        return new _Mnemonic(_guard, (0, index_js_2.hexlify)(entropy), phrase, password, wordlist);
      }
      /**
       *  Returns the phrase for %%mnemonic%%.
       */
      static entropyToPhrase(_entropy, wordlist) {
        const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
        return entropyToMnemonic(entropy, wordlist);
      }
      /**
       *  Returns the entropy for %%phrase%%.
       */
      static phraseToEntropy(phrase, wordlist) {
        return mnemonicToEntropy(phrase, wordlist);
      }
      /**
       *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.
       *
       *  This checks all the provided words belong to the %%wordlist%%,
       *  that the length is valid and the checksum is correct.
       */
      static isValidMnemonic(phrase, wordlist) {
        try {
          mnemonicToEntropy(phrase, wordlist);
          return true;
        } catch (error) {
        }
        return false;
      }
    };
    exports.Mnemonic = Mnemonic;
  }
});

// node_modules/aes-js/lib.commonjs/aes.js
var require_aes = __commonJS({
  "node_modules/aes-js/lib.commonjs/aes.js"(exports) {
    "use strict";
    var __classPrivateFieldGet2 = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet2 = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _AES_key;
    var _AES_Kd;
    var _AES_Ke;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AES = void 0;
    var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
    var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
    var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
    var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
    var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
    var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
    var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
    var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
    var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
    var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
    var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
    var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
    var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
    var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
    var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
    var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
    function convertToInt32(bytes) {
      const result = [];
      for (let i = 0; i < bytes.length; i += 4) {
        result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
      }
      return result;
    }
    var AES = class _AES {
      get key() {
        return __classPrivateFieldGet2(this, _AES_key, "f").slice();
      }
      constructor(key) {
        _AES_key.set(this, void 0);
        _AES_Kd.set(this, void 0);
        _AES_Ke.set(this, void 0);
        if (!(this instanceof _AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        __classPrivateFieldSet2(this, _AES_key, new Uint8Array(key), "f");
        const rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
        }
        __classPrivateFieldSet2(this, _AES_Ke, [], "f");
        __classPrivateFieldSet2(this, _AES_Kd, [], "f");
        for (let i = 0; i <= rounds; i++) {
          __classPrivateFieldGet2(this, _AES_Ke, "f").push([0, 0, 0, 0]);
          __classPrivateFieldGet2(this, _AES_Kd, "f").push([0, 0, 0, 0]);
        }
        const roundKeyCount = (rounds + 1) * 4;
        const KC = this.key.length / 4;
        const tk = convertToInt32(this.key);
        let index;
        for (let i = 0; i < KC; i++) {
          index = i >> 2;
          __classPrivateFieldGet2(this, _AES_Ke, "f")[index][i % 4] = tk[i];
          __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
        }
        let rconpointer = 0;
        let t = KC, tt;
        while (t < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (let i2 = 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          } else {
            for (let i2 = 1; i2 < KC / 2; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
            for (let i2 = KC / 2 + 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          }
          let i = 0, r, c;
          while (i < KC && t < roundKeyCount) {
            r = t >> 2;
            c = t % 4;
            __classPrivateFieldGet2(this, _AES_Ke, "f")[r][c] = tk[i];
            __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds - r][c] = tk[i++];
            t++;
          }
        }
        for (let r = 1; r < rounds; r++) {
          for (let c = 0; c < 4; c++) {
            tt = __classPrivateFieldGet2(this, _AES_Kd, "f")[r][c];
            __classPrivateFieldGet2(this, _AES_Kd, "f")[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      }
      encrypt(plaintext) {
        if (plaintext.length != 16) {
          throw new TypeError("invalid plaintext size (must be 16 bytes)");
        }
        const rounds = __classPrivateFieldGet2(this, _AES_Ke, "f").length - 1;
        const a = [0, 0, 0, 0];
        let t = convertToInt32(plaintext);
        for (let i = 0; i < 4; i++) {
          t[i] ^= __classPrivateFieldGet2(this, _AES_Ke, "f")[0][i];
        }
        for (let r = 1; r < rounds; r++) {
          for (let i = 0; i < 4; i++) {
            a[i] = T1[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ __classPrivateFieldGet2(this, _AES_Ke, "f")[r][i];
          }
          t = a.slice();
        }
        const result = new Uint8Array(16);
        let tt = 0;
        for (let i = 0; i < 4; i++) {
          tt = __classPrivateFieldGet2(this, _AES_Ke, "f")[rounds][i];
          result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      }
      decrypt(ciphertext) {
        if (ciphertext.length != 16) {
          throw new TypeError("invalid ciphertext size (must be 16 bytes)");
        }
        const rounds = __classPrivateFieldGet2(this, _AES_Kd, "f").length - 1;
        const a = [0, 0, 0, 0];
        let t = convertToInt32(ciphertext);
        for (let i = 0; i < 4; i++) {
          t[i] ^= __classPrivateFieldGet2(this, _AES_Kd, "f")[0][i];
        }
        for (let r = 1; r < rounds; r++) {
          for (let i = 0; i < 4; i++) {
            a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ __classPrivateFieldGet2(this, _AES_Kd, "f")[r][i];
          }
          t = a.slice();
        }
        const result = new Uint8Array(16);
        let tt = 0;
        for (let i = 0; i < 4; i++) {
          tt = __classPrivateFieldGet2(this, _AES_Kd, "f")[rounds][i];
          result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      }
    };
    exports.AES = AES;
    _AES_key = /* @__PURE__ */ new WeakMap(), _AES_Kd = /* @__PURE__ */ new WeakMap(), _AES_Ke = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode.js
var require_mode = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModeOfOperation = void 0;
    var aes_js_1 = require_aes();
    var ModeOfOperation = class {
      constructor(name, key, cls) {
        if (cls && !(this instanceof cls)) {
          throw new Error(`${name} must be instantiated with "new"`);
        }
        Object.defineProperties(this, {
          aes: { enumerable: true, value: new aes_js_1.AES(key) },
          name: { enumerable: true, value: name }
        });
      }
    };
    exports.ModeOfOperation = ModeOfOperation;
  }
});

// node_modules/aes-js/lib.commonjs/mode-cbc.js
var require_mode_cbc = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-cbc.js"(exports) {
    "use strict";
    var __classPrivateFieldSet2 = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CBC_iv;
    var _CBC_lastBlock;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CBC = void 0;
    var mode_js_1 = require_mode();
    var CBC = class _CBC extends mode_js_1.ModeOfOperation {
      constructor(key, iv) {
        super("ECC", key, _CBC);
        _CBC_iv.set(this, void 0);
        _CBC_lastBlock.set(this, void 0);
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _CBC_lastBlock, this.iv, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet2(this, _CBC_iv, "f"));
      }
      encrypt(plaintext) {
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const ciphertext = new Uint8Array(plaintext.length);
        for (let i = 0; i < plaintext.length; i += 16) {
          for (let j2 = 0; j2 < 16; j2++) {
            __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j2] ^= plaintext[i + j2];
          }
          __classPrivateFieldSet2(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet2(this, _CBC_lastBlock, "f")), "f");
          ciphertext.set(__classPrivateFieldGet2(this, _CBC_lastBlock, "f"), i);
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (ciphertext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        const plaintext = new Uint8Array(ciphertext.length);
        for (let i = 0; i < ciphertext.length; i += 16) {
          const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
          for (let j2 = 0; j2 < 16; j2++) {
            plaintext[i + j2] = block[j2] ^ __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j2];
            __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j2] = ciphertext[i + j2];
          }
        }
        return plaintext;
      }
    };
    exports.CBC = CBC;
    _CBC_iv = /* @__PURE__ */ new WeakMap(), _CBC_lastBlock = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-cfb.js"(exports) {
    "use strict";
    var __classPrivateFieldSet2 = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CFB_instances;
    var _CFB_iv;
    var _CFB_shiftRegister;
    var _CFB_shift;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CFB = void 0;
    var mode_js_1 = require_mode();
    var CFB = class _CFB extends mode_js_1.ModeOfOperation {
      constructor(key, iv, segmentSize = 8) {
        super("CFB", key, _CFB);
        _CFB_instances.add(this);
        _CFB_iv.set(this, void 0);
        _CFB_shiftRegister.set(this, void 0);
        if (!Number.isInteger(segmentSize) || segmentSize % 8) {
          throw new TypeError("invalid segmentSize");
        }
        Object.defineProperties(this, {
          segmentSize: { enumerable: true, value: segmentSize }
        });
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _CFB_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _CFB_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _CFB_shiftRegister, this.iv, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet2(this, _CFB_iv, "f"));
      }
      encrypt(plaintext) {
        if (8 * plaintext.length % this.segmentSize) {
          throw new TypeError("invalid plaintext size (must be multiple of segmentSize bytes)");
        }
        const segmentSize = this.segmentSize / 8;
        const ciphertext = new Uint8Array(plaintext);
        for (let i = 0; i < ciphertext.length; i += segmentSize) {
          const xorSegment = this.aes.encrypt(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f"));
          for (let j2 = 0; j2 < segmentSize; j2++) {
            ciphertext[i + j2] ^= xorSegment[j2];
          }
          __classPrivateFieldGet2(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (8 * ciphertext.length % this.segmentSize) {
          throw new TypeError("invalid ciphertext size (must be multiple of segmentSize bytes)");
        }
        const segmentSize = this.segmentSize / 8;
        const plaintext = new Uint8Array(ciphertext);
        for (let i = 0; i < plaintext.length; i += segmentSize) {
          const xorSegment = this.aes.encrypt(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f"));
          for (let j2 = 0; j2 < segmentSize; j2++) {
            plaintext[i + j2] ^= xorSegment[j2];
          }
          __classPrivateFieldGet2(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
        }
        return plaintext;
      }
    };
    exports.CFB = CFB;
    _CFB_iv = /* @__PURE__ */ new WeakMap(), _CFB_shiftRegister = /* @__PURE__ */ new WeakMap(), _CFB_instances = /* @__PURE__ */ new WeakSet(), _CFB_shift = function _CFB_shift2(data) {
      const segmentSize = this.segmentSize / 8;
      __classPrivateFieldGet2(this, _CFB_shiftRegister, "f").set(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f").subarray(segmentSize));
      __classPrivateFieldGet2(this, _CFB_shiftRegister, "f").set(data.subarray(0, segmentSize), 16 - segmentSize);
    };
  }
});

// node_modules/aes-js/lib.commonjs/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ctr.js"(exports) {
    "use strict";
    var __classPrivateFieldSet2 = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CTR_remaining;
    var _CTR_remainingIndex;
    var _CTR_counter;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CTR = void 0;
    var mode_js_1 = require_mode();
    var CTR = class _CTR extends mode_js_1.ModeOfOperation {
      constructor(key, initialValue) {
        super("CTR", key, _CTR);
        _CTR_remaining.set(this, void 0);
        _CTR_remainingIndex.set(this, void 0);
        _CTR_counter.set(this, void 0);
        __classPrivateFieldSet2(this, _CTR_counter, new Uint8Array(16), "f");
        __classPrivateFieldGet2(this, _CTR_counter, "f").fill(0);
        __classPrivateFieldSet2(this, _CTR_remaining, __classPrivateFieldGet2(this, _CTR_counter, "f"), "f");
        __classPrivateFieldSet2(this, _CTR_remainingIndex, 16, "f");
        if (initialValue == null) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this.setCounterValue(initialValue);
        } else {
          this.setCounterBytes(initialValue);
        }
      }
      get counter() {
        return new Uint8Array(__classPrivateFieldGet2(this, _CTR_counter, "f"));
      }
      setCounterValue(value) {
        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
          throw new TypeError("invalid counter initial integer value");
        }
        for (let index = 15; index >= 0; --index) {
          __classPrivateFieldGet2(this, _CTR_counter, "f")[index] = value % 256;
          value = Math.floor(value / 256);
        }
      }
      setCounterBytes(value) {
        if (value.length !== 16) {
          throw new TypeError("invalid counter initial Uint8Array value length");
        }
        __classPrivateFieldGet2(this, _CTR_counter, "f").set(value);
      }
      increment() {
        for (let i = 15; i >= 0; i--) {
          if (__classPrivateFieldGet2(this, _CTR_counter, "f")[i] === 255) {
            __classPrivateFieldGet2(this, _CTR_counter, "f")[i] = 0;
          } else {
            __classPrivateFieldGet2(this, _CTR_counter, "f")[i]++;
            break;
          }
        }
      }
      encrypt(plaintext) {
        var _a, _b;
        const crypttext = new Uint8Array(plaintext);
        for (let i = 0; i < crypttext.length; i++) {
          if (__classPrivateFieldGet2(this, _CTR_remainingIndex, "f") === 16) {
            __classPrivateFieldSet2(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet2(this, _CTR_counter, "f")), "f");
            __classPrivateFieldSet2(this, _CTR_remainingIndex, 0, "f");
            this.increment();
          }
          crypttext[i] ^= __classPrivateFieldGet2(this, _CTR_remaining, "f")[__classPrivateFieldSet2(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet2(this, _CTR_remainingIndex, "f"), _a = _b++, _b), "f"), _a];
        }
        return crypttext;
      }
      decrypt(ciphertext) {
        return this.encrypt(ciphertext);
      }
    };
    exports.CTR = CTR;
    _CTR_remaining = /* @__PURE__ */ new WeakMap(), _CTR_remainingIndex = /* @__PURE__ */ new WeakMap(), _CTR_counter = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ecb.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ECB = void 0;
    var mode_js_1 = require_mode();
    var ECB = class _ECB extends mode_js_1.ModeOfOperation {
      constructor(key) {
        super("ECB", key, _ECB);
      }
      encrypt(plaintext) {
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const crypttext = new Uint8Array(plaintext.length);
        for (let i = 0; i < plaintext.length; i += 16) {
          crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);
        }
        return crypttext;
      }
      decrypt(crypttext) {
        if (crypttext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        const plaintext = new Uint8Array(crypttext.length);
        for (let i = 0; i < crypttext.length; i += 16) {
          plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);
        }
        return plaintext;
      }
    };
    exports.ECB = ECB;
  }
});

// node_modules/aes-js/lib.commonjs/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ofb.js"(exports) {
    "use strict";
    var __classPrivateFieldSet2 = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet2 = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _OFB_iv;
    var _OFB_lastPrecipher;
    var _OFB_lastPrecipherIndex;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OFB = void 0;
    var mode_js_1 = require_mode();
    var OFB = class _OFB extends mode_js_1.ModeOfOperation {
      constructor(key, iv) {
        super("OFB", key, _OFB);
        _OFB_iv.set(this, void 0);
        _OFB_lastPrecipher.set(this, void 0);
        _OFB_lastPrecipherIndex.set(this, void 0);
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _OFB_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _OFB_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _OFB_lastPrecipher, this.iv, "f");
        __classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, 16, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet2(this, _OFB_iv, "f"));
      }
      encrypt(plaintext) {
        var _a, _b;
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const ciphertext = new Uint8Array(plaintext);
        for (let i = 0; i < ciphertext.length; i++) {
          if (__classPrivateFieldGet2(this, _OFB_lastPrecipherIndex, "f") === 16) {
            __classPrivateFieldSet2(this, _OFB_lastPrecipher, this.aes.encrypt(__classPrivateFieldGet2(this, _OFB_lastPrecipher, "f")), "f");
            __classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, 0, "f");
          }
          ciphertext[i] ^= __classPrivateFieldGet2(this, _OFB_lastPrecipher, "f")[__classPrivateFieldSet2(this, _OFB_lastPrecipherIndex, (_b = __classPrivateFieldGet2(this, _OFB_lastPrecipherIndex, "f"), _a = _b++, _b), "f"), _a];
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (ciphertext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        return this.encrypt(ciphertext);
      }
    };
    exports.OFB = OFB;
    _OFB_iv = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipher = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipherIndex = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/padding.js
var require_padding = __commonJS({
  "node_modules/aes-js/lib.commonjs/padding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pkcs7Strip = exports.pkcs7Pad = void 0;
    function pkcs7Pad(data) {
      const padder = 16 - data.length % 16;
      const result = new Uint8Array(data.length + padder);
      result.set(data);
      for (let i = data.length; i < result.length; i++) {
        result[i] = padder;
      }
      return result;
    }
    exports.pkcs7Pad = pkcs7Pad;
    function pkcs7Strip(data) {
      if (data.length < 16) {
        throw new TypeError("PKCS#7 invalid length");
      }
      const padder = data[data.length - 1];
      if (padder > 16) {
        throw new TypeError("PKCS#7 padding byte out of range");
      }
      const length = data.length - padder;
      for (let i = 0; i < padder; i++) {
        if (data[length + i] !== padder) {
          throw new TypeError("PKCS#7 invalid padding byte");
        }
      }
      return new Uint8Array(data.subarray(0, length));
    }
    exports.pkcs7Strip = pkcs7Strip;
  }
});

// node_modules/aes-js/lib.commonjs/index.js
var require_lib = __commonJS({
  "node_modules/aes-js/lib.commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pkcs7Strip = exports.pkcs7Pad = exports.OFB = exports.ECB = exports.CTR = exports.CFB = exports.CBC = exports.ModeOfOperation = exports.AES = void 0;
    var aes_js_1 = require_aes();
    Object.defineProperty(exports, "AES", { enumerable: true, get: function() {
      return aes_js_1.AES;
    } });
    var mode_js_1 = require_mode();
    Object.defineProperty(exports, "ModeOfOperation", { enumerable: true, get: function() {
      return mode_js_1.ModeOfOperation;
    } });
    var mode_cbc_js_1 = require_mode_cbc();
    Object.defineProperty(exports, "CBC", { enumerable: true, get: function() {
      return mode_cbc_js_1.CBC;
    } });
    var mode_cfb_js_1 = require_mode_cfb();
    Object.defineProperty(exports, "CFB", { enumerable: true, get: function() {
      return mode_cfb_js_1.CFB;
    } });
    var mode_ctr_js_1 = require_mode_ctr();
    Object.defineProperty(exports, "CTR", { enumerable: true, get: function() {
      return mode_ctr_js_1.CTR;
    } });
    var mode_ecb_js_1 = require_mode_ecb();
    Object.defineProperty(exports, "ECB", { enumerable: true, get: function() {
      return mode_ecb_js_1.ECB;
    } });
    var mode_ofb_js_1 = require_mode_ofb();
    Object.defineProperty(exports, "OFB", { enumerable: true, get: function() {
      return mode_ofb_js_1.OFB;
    } });
    var padding_js_1 = require_padding();
    Object.defineProperty(exports, "pkcs7Pad", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Pad;
    } });
    Object.defineProperty(exports, "pkcs7Strip", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Strip;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wallet/utils.js
var require_utils5 = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.spelunk = exports.getPassword = exports.zpad = exports.looseArrayify = void 0;
    var index_js_1 = require_utils3();
    function looseArrayify(hexString) {
      if (typeof hexString === "string" && !hexString.startsWith("0x")) {
        hexString = "0x" + hexString;
      }
      return (0, index_js_1.getBytesCopy)(hexString);
    }
    exports.looseArrayify = looseArrayify;
    function zpad(value, length) {
      value = String(value);
      while (value.length < length) {
        value = "0" + value;
      }
      return value;
    }
    exports.zpad = zpad;
    function getPassword(password) {
      if (typeof password === "string") {
        return (0, index_js_1.toUtf8Bytes)(password, "NFKC");
      }
      return (0, index_js_1.getBytesCopy)(password);
    }
    exports.getPassword = getPassword;
    function spelunk(object, _path) {
      const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
      (0, index_js_1.assertArgument)(match != null, "invalid path", "path", _path);
      const path5 = match[1];
      const type = match[3];
      const reqd = match[4] === "!";
      let cur = object;
      for (const comp of path5.toLowerCase().split(".")) {
        if (Array.isArray(cur)) {
          if (!comp.match(/^[0-9]+$/)) {
            break;
          }
          cur = cur[parseInt(comp)];
        } else if (typeof cur === "object") {
          let found = null;
          for (const key in cur) {
            if (key.toLowerCase() === comp) {
              found = cur[key];
              break;
            }
          }
          cur = found;
        } else {
          cur = null;
        }
        if (cur == null) {
          break;
        }
      }
      (0, index_js_1.assertArgument)(!reqd || cur != null, "missing required value", "path", path5);
      if (type && cur != null) {
        if (type === "int") {
          if (typeof cur === "string" && cur.match(/^-?[0-9]+$/)) {
            return parseInt(cur);
          } else if (Number.isSafeInteger(cur)) {
            return cur;
          }
        }
        if (type === "number") {
          if (typeof cur === "string" && cur.match(/^-?[0-9.]*$/)) {
            return parseFloat(cur);
          }
        }
        if (type === "data") {
          if (typeof cur === "string") {
            return looseArrayify(cur);
          }
        }
        if (type === "array" && Array.isArray(cur)) {
          return cur;
        }
        if (type === typeof cur) {
          return cur;
        }
        (0, index_js_1.assertArgument)(false, `wrong type found for ${type} `, "path", path5);
      }
      return cur;
    }
    exports.spelunk = spelunk;
  }
});

// node_modules/ethers/lib.commonjs/wallet/json-keystore.js
var require_json_keystore = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/json-keystore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encryptKeystoreJson = exports.encryptKeystoreJsonSync = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.isKeystoreJson = void 0;
    var aes_js_1 = require_lib();
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils3();
    var utils_js_1 = require_utils5();
    var _version_js_1 = require_version();
    var defaultPath = "m/44'/60'/0'/0/0";
    function isKeystoreJson(json) {
      try {
        const data = JSON.parse(json);
        const version = data.version != null ? parseInt(data.version) : 0;
        if (version === 3) {
          return true;
        }
      } catch (error) {
      }
      return false;
    }
    exports.isKeystoreJson = isKeystoreJson;
    function decrypt(data, key, ciphertext) {
      const cipher = (0, utils_js_1.spelunk)(data, "crypto.cipher:string");
      if (cipher === "aes-128-ctr") {
        const iv = (0, utils_js_1.spelunk)(data, "crypto.cipherparams.iv:data!");
        const aesCtr = new aes_js_1.CTR(key, iv);
        return (0, index_js_4.hexlify)(aesCtr.decrypt(ciphertext));
      }
      (0, index_js_4.assert)(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
        operation: "decrypt"
      });
    }
    function getAccount(data, _key) {
      const key = (0, index_js_4.getBytes)(_key);
      const ciphertext = (0, utils_js_1.spelunk)(data, "crypto.ciphertext:data!");
      const computedMAC = (0, index_js_4.hexlify)((0, index_js_2.keccak256)((0, index_js_4.concat)([key.slice(16, 32), ciphertext]))).substring(2);
      (0, index_js_4.assertArgument)(computedMAC === (0, utils_js_1.spelunk)(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
      const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
      const address = (0, index_js_3.computeAddress)(privateKey);
      if (data.address) {
        let check = data.address.toLowerCase();
        if (!check.startsWith("0x")) {
          check = "0x" + check;
        }
        (0, index_js_4.assertArgument)((0, index_js_1.getAddress)(check) === address, "keystore address/privateKey mismatch", "address", data.address);
      }
      const account = { address, privateKey };
      const version = (0, utils_js_1.spelunk)(data, "x-ethers.version:string");
      if (version === "0.1") {
        const mnemonicKey = key.slice(32, 64);
        const mnemonicCiphertext = (0, utils_js_1.spelunk)(data, "x-ethers.mnemonicCiphertext:data!");
        const mnemonicIv = (0, utils_js_1.spelunk)(data, "x-ethers.mnemonicCounter:data!");
        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
        account.mnemonic = {
          path: (0, utils_js_1.spelunk)(data, "x-ethers.path:string") || defaultPath,
          locale: (0, utils_js_1.spelunk)(data, "x-ethers.locale:string") || "en",
          entropy: (0, index_js_4.hexlify)((0, index_js_4.getBytes)(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
        };
      }
      return account;
    }
    function getDecryptKdfParams(data) {
      const kdf = (0, utils_js_1.spelunk)(data, "crypto.kdf:string");
      if (kdf && typeof kdf === "string") {
        if (kdf.toLowerCase() === "scrypt") {
          const salt = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.salt:data!");
          const N = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.n:int!");
          const r = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.r:int!");
          const p = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.p:int!");
          (0, index_js_4.assertArgument)(N > 0 && (N & N - 1) === 0, "invalid kdf.N", "kdf.N", N);
          (0, index_js_4.assertArgument)(r > 0 && p > 0, "invalid kdf", "kdf", kdf);
          const dkLen = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.dklen:int!");
          (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
          return { name: "scrypt", salt, N, r, p, dkLen: 64 };
        } else if (kdf.toLowerCase() === "pbkdf2") {
          const salt = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.salt:data!");
          const prf = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.prf:string!");
          const algorithm = prf.split("-").pop();
          (0, index_js_4.assertArgument)(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
          const count = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.c:int!");
          const dkLen = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.dklen:int!");
          (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
          return { name: "pbkdf2", salt, count, dkLen, algorithm };
        }
      }
      (0, index_js_4.assertArgument)(false, "unsupported key-derivation function", "kdf", kdf);
    }
    function decryptKeystoreJsonSync(json, _password) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const params = getDecryptKdfParams(data);
      if (params.name === "pbkdf2") {
        const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
        const key2 = (0, index_js_2.pbkdf2)(password, salt2, count, dkLen2, algorithm);
        return getAccount(data, key2);
      }
      (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
      const { salt, N, r, p, dkLen } = params;
      const key = (0, index_js_2.scryptSync)(password, salt, N, r, p, dkLen);
      return getAccount(data, key);
    }
    exports.decryptKeystoreJsonSync = decryptKeystoreJsonSync;
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve();
        }, duration);
      });
    }
    async function decryptKeystoreJson(json, _password, progress) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const params = getDecryptKdfParams(data);
      if (params.name === "pbkdf2") {
        if (progress) {
          progress(0);
          await stall(0);
        }
        const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
        const key2 = (0, index_js_2.pbkdf2)(password, salt2, count, dkLen2, algorithm);
        if (progress) {
          progress(1);
          await stall(0);
        }
        return getAccount(data, key2);
      }
      (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
      const { salt, N, r, p, dkLen } = params;
      const key = await (0, index_js_2.scrypt)(password, salt, N, r, p, dkLen, progress);
      return getAccount(data, key);
    }
    exports.decryptKeystoreJson = decryptKeystoreJson;
    function getEncryptKdfParams(options) {
      const salt = options.salt != null ? (0, index_js_4.getBytes)(options.salt, "options.salt") : (0, index_js_2.randomBytes)(32);
      let N = 1 << 17, r = 8, p = 1;
      if (options.scrypt) {
        if (options.scrypt.N) {
          N = options.scrypt.N;
        }
        if (options.scrypt.r) {
          r = options.scrypt.r;
        }
        if (options.scrypt.p) {
          p = options.scrypt.p;
        }
      }
      (0, index_js_4.assertArgument)(typeof N === "number" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N);
      (0, index_js_4.assertArgument)(typeof r === "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r);
      (0, index_js_4.assertArgument)(typeof p === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
      return { name: "scrypt", dkLen: 32, salt, N, r, p };
    }
    function _encryptKeystore(key, kdf, account, options) {
      const privateKey = (0, index_js_4.getBytes)(account.privateKey, "privateKey");
      const iv = options.iv != null ? (0, index_js_4.getBytes)(options.iv, "options.iv") : (0, index_js_2.randomBytes)(16);
      (0, index_js_4.assertArgument)(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
      const uuidRandom = options.uuid != null ? (0, index_js_4.getBytes)(options.uuid, "options.uuid") : (0, index_js_2.randomBytes)(16);
      (0, index_js_4.assertArgument)(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
      const derivedKey = key.slice(0, 16);
      const macPrefix = key.slice(16, 32);
      const aesCtr = new aes_js_1.CTR(derivedKey, iv);
      const ciphertext = (0, index_js_4.getBytes)(aesCtr.encrypt(privateKey));
      const mac = (0, index_js_2.keccak256)((0, index_js_4.concat)([macPrefix, ciphertext]));
      const data = {
        address: account.address.substring(2).toLowerCase(),
        id: (0, index_js_4.uuidV4)(uuidRandom),
        version: 3,
        Crypto: {
          cipher: "aes-128-ctr",
          cipherparams: {
            iv: (0, index_js_4.hexlify)(iv).substring(2)
          },
          ciphertext: (0, index_js_4.hexlify)(ciphertext).substring(2),
          kdf: "scrypt",
          kdfparams: {
            salt: (0, index_js_4.hexlify)(kdf.salt).substring(2),
            n: kdf.N,
            dklen: 32,
            p: kdf.p,
            r: kdf.r
          },
          mac: mac.substring(2)
        }
      };
      if (account.mnemonic) {
        const client = options.client != null ? options.client : `ethers/${_version_js_1.version}`;
        const path5 = account.mnemonic.path || defaultPath;
        const locale = account.mnemonic.locale || "en";
        const mnemonicKey = key.slice(32, 64);
        const entropy = (0, index_js_4.getBytes)(account.mnemonic.entropy, "account.mnemonic.entropy");
        const mnemonicIv = (0, index_js_2.randomBytes)(16);
        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
        const mnemonicCiphertext = (0, index_js_4.getBytes)(mnemonicAesCtr.encrypt(entropy));
        const now = /* @__PURE__ */ new Date();
        const timestamp = now.getUTCFullYear() + "-" + (0, utils_js_1.zpad)(now.getUTCMonth() + 1, 2) + "-" + (0, utils_js_1.zpad)(now.getUTCDate(), 2) + "T" + (0, utils_js_1.zpad)(now.getUTCHours(), 2) + "-" + (0, utils_js_1.zpad)(now.getUTCMinutes(), 2) + "-" + (0, utils_js_1.zpad)(now.getUTCSeconds(), 2) + ".0Z";
        const gethFilename = "UTC--" + timestamp + "--" + data.address;
        data["x-ethers"] = {
          client,
          gethFilename,
          path: path5,
          locale,
          mnemonicCounter: (0, index_js_4.hexlify)(mnemonicIv).substring(2),
          mnemonicCiphertext: (0, index_js_4.hexlify)(mnemonicCiphertext).substring(2),
          version: "0.1"
        };
      }
      return JSON.stringify(data);
    }
    function encryptKeystoreJsonSync(account, password, options) {
      if (options == null) {
        options = {};
      }
      const passwordBytes = (0, utils_js_1.getPassword)(password);
      const kdf = getEncryptKdfParams(options);
      const key = (0, index_js_2.scryptSync)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
      return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
    }
    exports.encryptKeystoreJsonSync = encryptKeystoreJsonSync;
    async function encryptKeystoreJson(account, password, options) {
      if (options == null) {
        options = {};
      }
      const passwordBytes = (0, utils_js_1.getPassword)(password);
      const kdf = getEncryptKdfParams(options);
      const key = await (0, index_js_2.scrypt)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
      return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
    }
    exports.encryptKeystoreJson = encryptKeystoreJson;
  }
});

// node_modules/ethers/lib.commonjs/wallet/hdwallet.js
var require_hdwallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/hdwallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIndexedAccountPath = exports.getAccountPath = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.defaultPath = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_providers();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils3();
    var lang_en_js_1 = require_lang_en();
    var base_wallet_js_1 = require_base_wallet();
    var mnemonic_js_1 = require_mnemonic();
    var json_keystore_js_1 = require_json_keystore();
    exports.defaultPath = "m/44'/60'/0'/0/0";
    var MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
    var HardenedBit = 2147483648;
    var N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var Nibbles = "0123456789abcdef";
    function zpad(value, length) {
      let result = "";
      while (value) {
        result = Nibbles[value % 16] + result;
        value = Math.trunc(value / 16);
      }
      while (result.length < length * 2) {
        result = "0" + result;
      }
      return "0x" + result;
    }
    function encodeBase58Check(_value) {
      const value = (0, index_js_4.getBytes)(_value);
      const check = (0, index_js_4.dataSlice)((0, index_js_1.sha256)((0, index_js_1.sha256)(value)), 0, 4);
      const bytes = (0, index_js_4.concat)([value, check]);
      return (0, index_js_4.encodeBase58)(bytes);
    }
    var _guard = {};
    function ser_I(index, chainCode, publicKey, privateKey) {
      const data = new Uint8Array(37);
      if (index & HardenedBit) {
        (0, index_js_4.assert)(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
          operation: "deriveChild"
        });
        data.set((0, index_js_4.getBytes)(privateKey), 1);
      } else {
        data.set((0, index_js_4.getBytes)(publicKey));
      }
      for (let i = 24; i >= 0; i -= 8) {
        data[33 + (i >> 3)] = index >> 24 - i & 255;
      }
      const I2 = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", chainCode, data));
      return { IL: I2.slice(0, 32), IR: I2.slice(32) };
    }
    function derivePath(node, path5) {
      const components = path5.split("/");
      (0, index_js_4.assertArgument)(components.length > 0, "invalid path", "path", path5);
      if (components[0] === "m") {
        (0, index_js_4.assertArgument)(node.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${node.depth}`, "path", path5);
        components.shift();
      }
      let result = node;
      for (let i = 0; i < components.length; i++) {
        const component = components[i];
        if (component.match(/^[0-9]+'$/)) {
          const index = parseInt(component.substring(0, component.length - 1));
          (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
          result = result.deriveChild(HardenedBit + index);
        } else if (component.match(/^[0-9]+$/)) {
          const index = parseInt(component);
          (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
          result = result.deriveChild(index);
        } else {
          (0, index_js_4.assertArgument)(false, "invalid path component", `path[${i}]`, component);
        }
      }
      return result;
    }
    var _account, account_fn, _fromSeed, fromSeed_fn;
    var _HDNodeWallet = class _HDNodeWallet extends base_wallet_js_1.BaseWallet {
      /**
       *  @private
       */
      constructor(guard, signingKey, parentFingerprint, chainCode, path5, index, depth, mnemonic, provider) {
        super(signingKey, provider);
        __privateAdd(this, _account);
        /**
         *  The compressed public key.
         */
        __publicField(this, "publicKey");
        /**
         *  The fingerprint.
         *
         *  A fingerprint allows quick qay to detect parent and child nodes,
         *  but developers should be prepared to deal with collisions as it
         *  is only 4 bytes.
         */
        __publicField(this, "fingerprint");
        /**
         *  The parent fingerprint.
         */
        __publicField(this, "parentFingerprint");
        /**
         *  The mnemonic used to create this HD Node, if available.
         *
         *  Sources such as extended keys do not encode the mnemonic, in
         *  which case this will be ``null``.
         */
        __publicField(this, "mnemonic");
        /**
         *  The chaincode, which is effectively a public key used
         *  to derive children.
         */
        __publicField(this, "chainCode");
        /**
         *  The derivation path of this wallet.
         *
         *  Since extended keys do not provide full path details, this
         *  may be ``null``, if instantiated from a source that does not
         *  encode it.
         */
        __publicField(this, "path");
        /**
         *  The child index of this wallet. Values over ``2 *\* 31`` indicate
         *  the node is hardened.
         */
        __publicField(this, "index");
        /**
         *  The depth of this wallet, which is the number of components
         *  in its path.
         */
        __publicField(this, "depth");
        (0, index_js_4.assertPrivate)(guard, _guard, "HDNodeWallet");
        (0, index_js_4.defineProperties)(this, { publicKey: signingKey.compressedPublicKey });
        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(this.publicKey)), 0, 4);
        (0, index_js_4.defineProperties)(this, {
          parentFingerprint,
          fingerprint,
          chainCode,
          path: path5,
          index,
          depth
        });
        (0, index_js_4.defineProperties)(this, { mnemonic });
      }
      connect(provider) {
        return new _HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
      }
      /**
       *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
       *  %%password%%.
       *
       *  If %%progressCallback%% is specified, it will receive periodic
       *  updates as the encryption process progreses.
       */
      async encrypt(password, progressCallback) {
        return await (0, json_keystore_js_1.encryptKeystoreJson)(__privateMethod(this, _account, account_fn).call(this), password, { progressCallback });
      }
      /**
       *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
       *  %%password%%.
       *
       *  It is preferred to use the [async version](encrypt) instead,
       *  which allows a [[ProgressCallback]] to keep the user informed.
       *
       *  This method will block the event loop (freezing all UI) until
       *  it is complete, which may be a non-trivial duration.
       */
      encryptSync(password) {
        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(__privateMethod(this, _account, account_fn).call(this), password);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpriv`` and can be used to
       *  reconstruct this HD Node to derive its children.
       */
      get extendedKey() {
        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
        return encodeBase58Check((0, index_js_4.concat)([
          "0x0488ADE4",
          zpad(this.depth, 1),
          this.parentFingerprint,
          zpad(this.index, 4),
          this.chainCode,
          (0, index_js_4.concat)(["0x00", this.privateKey])
        ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */
      hasPath() {
        return this.path != null;
      }
      /**
       *  Returns a neutered HD Node, which removes the private details
       *  of an HD Node.
       *
       *  A neutered node has no private key, but can be used to derive
       *  child addresses and other public data about the HD Node.
       */
      neuter() {
        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
      }
      /**
       *  Return the child for %%index%%.
       */
      deriveChild(_index) {
        const index = (0, index_js_4.getNumber)(_index, "index");
        (0, index_js_4.assertArgument)(index <= 4294967295, "invalid index", "index", index);
        let path5 = this.path;
        if (path5) {
          path5 += "/" + (index & ~HardenedBit);
          if (index & HardenedBit) {
            path5 += "'";
          }
        }
        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
        const ki = new index_js_1.SigningKey((0, index_js_4.toBeHex)(((0, index_js_4.toBigInt)(IL) + BigInt(this.privateKey)) % N, 32));
        return new _HDNodeWallet(_guard, ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path5, index, this.depth + 1, this.mnemonic, this.provider);
      }
      /**
       *  Return the HDNode for %%path%% from this node.
       */
      derivePath(path5) {
        return derivePath(this, path5);
      }
      /**
       *  Creates a new HD Node from %%extendedKey%%.
       *
       *  If the %%extendedKey%% will either have a prefix or ``xpub`` or
       *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])
       *  or full HD Node ([[HDNodeWallet) respectively.
       */
      static fromExtendedKey(extendedKey) {
        const bytes = (0, index_js_4.toBeArray)((0, index_js_4.decodeBase58)(extendedKey));
        (0, index_js_4.assertArgument)(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
        const depth = bytes[4];
        const parentFingerprint = (0, index_js_4.hexlify)(bytes.slice(5, 9));
        const index = parseInt((0, index_js_4.hexlify)(bytes.slice(9, 13)).substring(2), 16);
        const chainCode = (0, index_js_4.hexlify)(bytes.slice(13, 45));
        const key = bytes.slice(45, 78);
        switch ((0, index_js_4.hexlify)(bytes.slice(0, 4))) {
          case "0x0488b21e":
          case "0x043587cf": {
            const publicKey = (0, index_js_4.hexlify)(key);
            return new HDNodeVoidWallet(_guard, (0, index_js_3.computeAddress)(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);
          }
          case "0x0488ade4":
          case "0x04358394 ":
            if (key[0] !== 0) {
              break;
            }
            return new _HDNodeWallet(_guard, new index_js_1.SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
        }
        (0, index_js_4.assertArgument)(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
      }
      /**
       *  Creates a new random HDNode.
       */
      static createRandom(password, path5, wordlist) {
        var _a;
        if (password == null) {
          password = "";
        }
        if (path5 == null) {
          path5 = exports.defaultPath;
        }
        if (wordlist == null) {
          wordlist = lang_en_js_1.LangEn.wordlist();
        }
        const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy((0, index_js_1.randomBytes)(16), password, wordlist);
        return __privateMethod(_a = _HDNodeWallet, _fromSeed, fromSeed_fn).call(_a, mnemonic.computeSeed(), mnemonic).derivePath(path5);
      }
      /**
       *  Create an HD Node from %%mnemonic%%.
       */
      static fromMnemonic(mnemonic, path5) {
        var _a;
        if (!path5) {
          path5 = exports.defaultPath;
        }
        return __privateMethod(_a = _HDNodeWallet, _fromSeed, fromSeed_fn).call(_a, mnemonic.computeSeed(), mnemonic).derivePath(path5);
      }
      /**
       *  Creates an HD Node from a mnemonic %%phrase%%.
       */
      static fromPhrase(phrase, password, path5, wordlist) {
        var _a;
        if (password == null) {
          password = "";
        }
        if (path5 == null) {
          path5 = exports.defaultPath;
        }
        if (wordlist == null) {
          wordlist = lang_en_js_1.LangEn.wordlist();
        }
        const mnemonic = mnemonic_js_1.Mnemonic.fromPhrase(phrase, password, wordlist);
        return __privateMethod(_a = _HDNodeWallet, _fromSeed, fromSeed_fn).call(_a, mnemonic.computeSeed(), mnemonic).derivePath(path5);
      }
      /**
       *  Creates an HD Node from a %%seed%%.
       */
      static fromSeed(seed) {
        var _a;
        return __privateMethod(_a = _HDNodeWallet, _fromSeed, fromSeed_fn).call(_a, seed, null);
      }
    };
    _account = new WeakSet();
    account_fn = function() {
      const account = { address: this.address, privateKey: this.privateKey };
      const m = this.mnemonic;
      if (this.path && m && m.wordlist.locale === "en" && m.password === "") {
        account.mnemonic = {
          path: this.path,
          locale: "en",
          entropy: m.entropy
        };
      }
      return account;
    };
    _fromSeed = new WeakSet();
    fromSeed_fn = function(_seed, mnemonic) {
      (0, index_js_4.assertArgument)((0, index_js_4.isBytesLike)(_seed), "invalid seed", "seed", "[REDACTED]");
      const seed = (0, index_js_4.getBytes)(_seed, "seed");
      (0, index_js_4.assertArgument)(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
      const I2 = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", MasterSecret, seed));
      const signingKey = new index_js_1.SigningKey((0, index_js_4.hexlify)(I2.slice(0, 32)));
      return new _HDNodeWallet(_guard, signingKey, "0x00000000", (0, index_js_4.hexlify)(I2.slice(32)), "m", 0, 0, mnemonic, null);
    };
    __privateAdd(_HDNodeWallet, _fromSeed);
    var HDNodeWallet = _HDNodeWallet;
    exports.HDNodeWallet = HDNodeWallet;
    var HDNodeVoidWallet = class _HDNodeVoidWallet extends index_js_2.VoidSigner {
      /**
       *  @private
       */
      constructor(guard, address, publicKey, parentFingerprint, chainCode, path5, index, depth, provider) {
        super(address, provider);
        /**
         *  The compressed public key.
         */
        __publicField(this, "publicKey");
        /**
         *  The fingerprint.
         *
         *  A fingerprint allows quick qay to detect parent and child nodes,
         *  but developers should be prepared to deal with collisions as it
         *  is only 4 bytes.
         */
        __publicField(this, "fingerprint");
        /**
         *  The parent node fingerprint.
         */
        __publicField(this, "parentFingerprint");
        /**
         *  The chaincode, which is effectively a public key used
         *  to derive children.
         */
        __publicField(this, "chainCode");
        /**
         *  The derivation path of this wallet.
         *
         *  Since extended keys do not provider full path details, this
         *  may be ``null``, if instantiated from a source that does not
         *  enocde it.
         */
        __publicField(this, "path");
        /**
         *  The child index of this wallet. Values over ``2 *\* 31`` indicate
         *  the node is hardened.
         */
        __publicField(this, "index");
        /**
         *  The depth of this wallet, which is the number of components
         *  in its path.
         */
        __publicField(this, "depth");
        (0, index_js_4.assertPrivate)(guard, _guard, "HDNodeVoidWallet");
        (0, index_js_4.defineProperties)(this, { publicKey });
        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(publicKey)), 0, 4);
        (0, index_js_4.defineProperties)(this, {
          publicKey,
          fingerprint,
          parentFingerprint,
          chainCode,
          path: path5,
          index,
          depth
        });
      }
      connect(provider) {
        return new _HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpub`` and can be used to
       *  reconstruct this neutered key to derive its children addresses.
       */
      get extendedKey() {
        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
        return encodeBase58Check((0, index_js_4.concat)([
          "0x0488B21E",
          zpad(this.depth, 1),
          this.parentFingerprint,
          zpad(this.index, 4),
          this.chainCode,
          this.publicKey
        ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */
      hasPath() {
        return this.path != null;
      }
      /**
       *  Return the child for %%index%%.
       */
      deriveChild(_index) {
        const index = (0, index_js_4.getNumber)(_index, "index");
        (0, index_js_4.assertArgument)(index <= 4294967295, "invalid index", "index", index);
        let path5 = this.path;
        if (path5) {
          path5 += "/" + (index & ~HardenedBit);
          if (index & HardenedBit) {
            path5 += "'";
          }
        }
        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
        const Ki = index_js_1.SigningKey.addPoints(IL, this.publicKey, true);
        const address = (0, index_js_3.computeAddress)(Ki);
        return new _HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path5, index, this.depth + 1, this.provider);
      }
      /**
       *  Return the signer for %%path%% from this node.
       */
      derivePath(path5) {
        return derivePath(this, path5);
      }
    };
    exports.HDNodeVoidWallet = HDNodeVoidWallet;
    function getAccountPath(_index) {
      const index = (0, index_js_4.getNumber)(_index, "index");
      (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/${index}'/0/0`;
    }
    exports.getAccountPath = getAccountPath;
    function getIndexedAccountPath(_index) {
      const index = (0, index_js_4.getNumber)(_index, "index");
      (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/0'/0/${index}`;
    }
    exports.getIndexedAccountPath = getIndexedAccountPath;
  }
});

// node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js
var require_json_crowdsale = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decryptCrowdsaleJson = exports.isCrowdsaleJson = void 0;
    var aes_js_1 = require_lib();
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_hash();
    var index_js_4 = require_utils3();
    var utils_js_1 = require_utils5();
    function isCrowdsaleJson(json) {
      try {
        const data = JSON.parse(json);
        if (data.encseed) {
          return true;
        }
      } catch (error) {
      }
      return false;
    }
    exports.isCrowdsaleJson = isCrowdsaleJson;
    function decryptCrowdsaleJson(json, _password) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const address = (0, index_js_1.getAddress)((0, utils_js_1.spelunk)(data, "ethaddr:string!"));
      const encseed = (0, utils_js_1.looseArrayify)((0, utils_js_1.spelunk)(data, "encseed:string!"));
      (0, index_js_4.assertArgument)(encseed && encseed.length % 16 === 0, "invalid encseed", "json", json);
      const key = (0, index_js_4.getBytes)((0, index_js_2.pbkdf2)(password, password, 2e3, 32, "sha256")).slice(0, 16);
      const iv = encseed.slice(0, 16);
      const encryptedSeed = encseed.slice(16);
      const aesCbc = new aes_js_1.CBC(key, iv);
      const seed = (0, aes_js_1.pkcs7Strip)((0, index_js_4.getBytes)(aesCbc.decrypt(encryptedSeed)));
      let seedHex = "";
      for (let i = 0; i < seed.length; i++) {
        seedHex += String.fromCharCode(seed[i]);
      }
      return { address, privateKey: (0, index_js_3.id)(seedHex) };
    }
    exports.decryptCrowdsaleJson = decryptCrowdsaleJson;
  }
});

// node_modules/ethers/lib.commonjs/wallet/wallet.js
var require_wallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/wallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wallet = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils3();
    var base_wallet_js_1 = require_base_wallet();
    var hdwallet_js_1 = require_hdwallet();
    var json_crowdsale_js_1 = require_json_crowdsale();
    var json_keystore_js_1 = require_json_keystore();
    var mnemonic_js_1 = require_mnemonic();
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve();
        }, duration);
      });
    }
    var _fromAccount, fromAccount_fn;
    var _Wallet = class _Wallet extends base_wallet_js_1.BaseWallet {
      /**
       *  Create a new wallet for the private %%key%%, optionally connected
       *  to %%provider%%.
       */
      constructor(key, provider) {
        if (typeof key === "string" && !key.startsWith("0x")) {
          key = "0x" + key;
        }
        let signingKey = typeof key === "string" ? new index_js_1.SigningKey(key) : key;
        super(signingKey, provider);
      }
      connect(provider) {
        return new _Wallet(this.signingKey, provider);
      }
      /**
       *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
       *  %%password%%.
       *
       *  If %%progressCallback%% is specified, it will receive periodic
       *  updates as the encryption process progreses.
       */
      async encrypt(password, progressCallback) {
        const account = { address: this.address, privateKey: this.privateKey };
        return await (0, json_keystore_js_1.encryptKeystoreJson)(account, password, { progressCallback });
      }
      /**
       *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
       *  %%password%%.
       *
       *  It is preferred to use the [async version](encrypt) instead,
       *  which allows a [[ProgressCallback]] to keep the user informed.
       *
       *  This method will block the event loop (freezing all UI) until
       *  it is complete, which may be a non-trivial duration.
       */
      encryptSync(password) {
        const account = { address: this.address, privateKey: this.privateKey };
        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(account, password);
      }
      /**
       *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%
       *  with %%password%%.
       *
       *  If %%progress%% is provided, it is called periodically during
       *  decryption so that any UI can be updated.
       */
      static async fromEncryptedJson(json, password, progress) {
        var _a;
        let account = null;
        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
          account = await (0, json_keystore_js_1.decryptKeystoreJson)(json, password, progress);
        } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
          if (progress) {
            progress(0);
            await stall(0);
          }
          account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
          if (progress) {
            progress(1);
            await stall(0);
          }
        }
        return __privateMethod(_a = _Wallet, _fromAccount, fromAccount_fn).call(_a, account);
      }
      /**
       *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.
       *
       *  The [[fromEncryptedJson]] method is preferred, as this method
       *  will lock up and freeze the UI during decryption, which may take
       *  some time.
       */
      static fromEncryptedJsonSync(json, password) {
        var _a;
        let account = null;
        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
          account = (0, json_keystore_js_1.decryptKeystoreJsonSync)(json, password);
        } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
          account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
        } else {
          (0, index_js_2.assertArgument)(false, "invalid JSON wallet", "json", "[ REDACTED ]");
        }
        return __privateMethod(_a = _Wallet, _fromAccount, fromAccount_fn).call(_a, account);
      }
      /**
       *  Creates a new random [[HDNodeWallet]] using the available
       *  [cryptographic random source](randomBytes).
       *
       *  If there is no crytographic random source, this will throw.
       */
      static createRandom(provider) {
        const wallet = hdwallet_js_1.HDNodeWallet.createRandom();
        if (provider) {
          return wallet.connect(provider);
        }
        return wallet;
      }
      /**
       *  Creates a [[HDNodeWallet]] for %%phrase%%.
       */
      static fromPhrase(phrase, provider) {
        const wallet = hdwallet_js_1.HDNodeWallet.fromPhrase(phrase);
        if (provider) {
          return wallet.connect(provider);
        }
        return wallet;
      }
    };
    _fromAccount = new WeakSet();
    fromAccount_fn = function(account) {
      (0, index_js_2.assertArgument)(account, "invalid JSON wallet", "json", "[ REDACTED ]");
      if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
        const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy(account.mnemonic.entropy);
        const wallet2 = hdwallet_js_1.HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);
        if (wallet2.address === account.address && wallet2.privateKey === account.privateKey) {
          return wallet2;
        }
        console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
      }
      const wallet = new _Wallet(account.privateKey);
      (0, index_js_2.assertArgument)(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
      return wallet;
    };
    __privateAdd(_Wallet, _fromAccount);
    var Wallet = _Wallet;
    exports.Wallet = Wallet;
  }
});

// node_modules/ethers/lib.commonjs/wallet/index.js
var require_wallet2 = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wallet = exports.Mnemonic = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.isKeystoreJson = exports.decryptCrowdsaleJson = exports.isCrowdsaleJson = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.getIndexedAccountPath = exports.getAccountPath = exports.defaultPath = exports.BaseWallet = void 0;
    var base_wallet_js_1 = require_base_wallet();
    Object.defineProperty(exports, "BaseWallet", { enumerable: true, get: function() {
      return base_wallet_js_1.BaseWallet;
    } });
    var hdwallet_js_1 = require_hdwallet();
    Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function() {
      return hdwallet_js_1.defaultPath;
    } });
    Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function() {
      return hdwallet_js_1.getAccountPath;
    } });
    Object.defineProperty(exports, "getIndexedAccountPath", { enumerable: true, get: function() {
      return hdwallet_js_1.getIndexedAccountPath;
    } });
    Object.defineProperty(exports, "HDNodeWallet", { enumerable: true, get: function() {
      return hdwallet_js_1.HDNodeWallet;
    } });
    Object.defineProperty(exports, "HDNodeVoidWallet", { enumerable: true, get: function() {
      return hdwallet_js_1.HDNodeVoidWallet;
    } });
    var json_crowdsale_js_1 = require_json_crowdsale();
    Object.defineProperty(exports, "isCrowdsaleJson", { enumerable: true, get: function() {
      return json_crowdsale_js_1.isCrowdsaleJson;
    } });
    Object.defineProperty(exports, "decryptCrowdsaleJson", { enumerable: true, get: function() {
      return json_crowdsale_js_1.decryptCrowdsaleJson;
    } });
    var json_keystore_js_1 = require_json_keystore();
    Object.defineProperty(exports, "isKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.isKeystoreJson;
    } });
    Object.defineProperty(exports, "decryptKeystoreJsonSync", { enumerable: true, get: function() {
      return json_keystore_js_1.decryptKeystoreJsonSync;
    } });
    Object.defineProperty(exports, "decryptKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.decryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.encryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJsonSync", { enumerable: true, get: function() {
      return json_keystore_js_1.encryptKeystoreJsonSync;
    } });
    var mnemonic_js_1 = require_mnemonic();
    Object.defineProperty(exports, "Mnemonic", { enumerable: true, get: function() {
      return mnemonic_js_1.Mnemonic;
    } });
    var wallet_js_1 = require_wallet();
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function() {
      return wallet_js_1.Wallet;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wordlists/bit-reader.js
var require_bit_reader = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/bit-reader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeBits = void 0;
    var Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
    function decodeBits(width, data) {
      const maxValue = (1 << width) - 1;
      const result = [];
      let accum = 0, bits = 0, flood = 0;
      for (let i = 0; i < data.length; i++) {
        accum = accum << 6 | Base64.indexOf(data[i]);
        bits += 6;
        while (bits >= width) {
          const value = accum >> bits - width;
          accum &= (1 << bits - width) - 1;
          bits -= width;
          if (value === 0) {
            flood += maxValue;
          } else {
            result.push(value + flood);
            flood = 0;
          }
        }
      }
      return result;
    }
    exports.decodeBits = decodeBits;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/decode-owla.js
var require_decode_owla = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/decode-owla.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeOwlA = void 0;
    var index_js_1 = require_utils3();
    var bit_reader_js_1 = require_bit_reader();
    var decode_owl_js_1 = require_decode_owl();
    function decodeOwlA(data, accents) {
      let words = (0, decode_owl_js_1.decodeOwl)(data).join(",");
      accents.split(/,/g).forEach((accent) => {
        const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
        (0, index_js_1.assertArgument)(match !== null, "internal error parsing accents", "accents", accents);
        let posOffset = 0;
        const positions = (0, bit_reader_js_1.decodeBits)(parseInt(match[3]), match[4]);
        const charCode = parseInt(match[2]);
        const regex = new RegExp(`([${match[1]}])`, "g");
        words = words.replace(regex, (all, letter) => {
          const rem = --positions[posOffset];
          if (rem === 0) {
            letter = String.fromCharCode(letter.charCodeAt(0), charCode);
            posOffset++;
          }
          return letter;
        });
      });
      return words.split(",");
    }
    exports.decodeOwlA = decodeOwlA;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js
var require_wordlist_owla = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WordlistOwlA = void 0;
    var wordlist_owl_js_1 = require_wordlist_owl();
    var decode_owla_js_1 = require_decode_owla();
    var _accent;
    var WordlistOwlA = class extends wordlist_owl_js_1.WordlistOwl {
      /**
       *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%
       *  and %%accent%% data and validated against the %%checksum%%.
       */
      constructor(locale, data, accent, checksum) {
        super(locale, data, checksum);
        __privateAdd(this, _accent, void 0);
        __privateSet(this, _accent, accent);
      }
      /**
       *  The OWLA-encoded accent data.
       */
      get _accent() {
        return __privateGet(this, _accent);
      }
      /**
       *  Decode all the words for the wordlist.
       */
      _decodeWords() {
        return (0, decode_owla_js_1.decodeOwlA)(this._data, this._accent);
      }
    };
    _accent = new WeakMap();
    exports.WordlistOwlA = WordlistOwlA;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlists-browser.js
var require_wordlists_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlists-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wordlists = void 0;
    var lang_en_js_1 = require_lang_en();
    exports.wordlists = {
      en: lang_en_js_1.LangEn.wordlist()
    };
  }
});

// node_modules/ethers/lib.commonjs/wordlists/index.js
var require_wordlists = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wordlists = exports.WordlistOwlA = exports.WordlistOwl = exports.LangEn = exports.Wordlist = void 0;
    var wordlist_js_1 = require_wordlist();
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function() {
      return wordlist_js_1.Wordlist;
    } });
    var lang_en_js_1 = require_lang_en();
    Object.defineProperty(exports, "LangEn", { enumerable: true, get: function() {
      return lang_en_js_1.LangEn;
    } });
    var wordlist_owl_js_1 = require_wordlist_owl();
    Object.defineProperty(exports, "WordlistOwl", { enumerable: true, get: function() {
      return wordlist_owl_js_1.WordlistOwl;
    } });
    var wordlist_owla_js_1 = require_wordlist_owla();
    Object.defineProperty(exports, "WordlistOwlA", { enumerable: true, get: function() {
      return wordlist_owla_js_1.WordlistOwlA;
    } });
    var wordlists_js_1 = require_wordlists_browser();
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function() {
      return wordlists_js_1.wordlists;
    } });
  }
});

// node_modules/ethers/lib.commonjs/ethers.js
var require_ethers = __commonJS({
  "node_modules/ethers/lib.commonjs/ethers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ripemd160 = exports.keccak256 = exports.randomBytes = exports.computeHmac = exports.UndecodedEventLog = exports.EventLog = exports.ContractUnknownEventPayload = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.ContractEventPayload = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.MessagePrefix = exports.EtherSymbol = exports.ZeroHash = exports.N = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.ZeroAddress = exports.resolveAddress = exports.isAddress = exports.isAddressable = exports.getCreate2Address = exports.getCreateAddress = exports.getIcapAddress = exports.getAddress = exports.Typed = exports.TransactionDescription = exports.Result = exports.LogDescription = exports.Interface = exports.Indexed = exports.ErrorDescription = exports.checkResultErrors = exports.StructFragment = exports.ParamType = exports.NamedFragment = exports.FunctionFragment = exports.FallbackFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.AbiCoder = exports.encodeBytes32String = exports.decodeBytes32String = exports.version = void 0;
    exports.EnsPlugin = exports.Network = exports.EnsResolver = exports.WebSocketProvider = exports.SocketProvider = exports.IpcSocketProvider = exports.QuickNodeProvider = exports.PocketProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.ChainstackProvider = exports.AnkrProvider = exports.AlchemyProvider = exports.BrowserProvider = exports.JsonRpcSigner = exports.JsonRpcProvider = exports.JsonRpcApiProvider = exports.FallbackProvider = exports.AbstractProvider = exports.VoidSigner = exports.NonceManager = exports.AbstractSigner = exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.FeeData = exports.Block = exports.getDefaultProvider = exports.verifyTypedData = exports.TypedDataEncoder = exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = exports.verifyMessage = exports.hashMessage = exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = exports.id = exports.SigningKey = exports.Signature = exports.lock = exports.scryptSync = exports.scrypt = exports.pbkdf2 = exports.sha512 = exports.sha256 = void 0;
    exports.getUint = exports.getNumber = exports.getBigInt = exports.FixedNumber = exports.FetchCancelSignal = exports.FetchResponse = exports.FetchRequest = exports.EventPayload = exports.isError = exports.isCallException = exports.makeError = exports.assertPrivate = exports.assertNormalize = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.resolveProperties = exports.defineProperties = exports.zeroPadValue = exports.zeroPadBytes = exports.stripZerosLeft = exports.isBytesLike = exports.isHexString = exports.hexlify = exports.getBytesCopy = exports.getBytes = exports.dataSlice = exports.dataLength = exports.concat = exports.encodeBase64 = exports.decodeBase64 = exports.encodeBase58 = exports.decodeBase58 = exports.Transaction = exports.recoverAddress = exports.computeAddress = exports.accessListify = exports.showThrottleMessage = exports.copyRequest = exports.UnmanagedSubscriber = exports.SocketSubscriber = exports.SocketPendingSubscriber = exports.SocketEventSubscriber = exports.SocketBlockSubscriber = exports.MulticoinProviderPlugin = exports.NetworkPlugin = exports.GasCostPlugin = exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = exports.EtherscanPlugin = void 0;
    exports.wordlists = exports.WordlistOwlA = exports.WordlistOwl = exports.LangEn = exports.Wordlist = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.decryptCrowdsaleJson = exports.isKeystoreJson = exports.isCrowdsaleJson = exports.getIndexedAccountPath = exports.getAccountPath = exports.defaultPath = exports.Wallet = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.BaseWallet = exports.Mnemonic = exports.uuidV4 = exports.encodeRlp = exports.decodeRlp = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.mask = exports.toTwos = exports.fromTwos = exports.toQuantity = exports.toNumber = exports.toBeHex = exports.toBigInt = exports.toBeArray = void 0;
    var _version_js_1 = require_version();
    Object.defineProperty(exports, "version", { enumerable: true, get: function() {
      return _version_js_1.version;
    } });
    var index_js_1 = require_abi();
    Object.defineProperty(exports, "decodeBytes32String", { enumerable: true, get: function() {
      return index_js_1.decodeBytes32String;
    } });
    Object.defineProperty(exports, "encodeBytes32String", { enumerable: true, get: function() {
      return index_js_1.encodeBytes32String;
    } });
    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function() {
      return index_js_1.AbiCoder;
    } });
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function() {
      return index_js_1.ConstructorFragment;
    } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function() {
      return index_js_1.ErrorFragment;
    } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function() {
      return index_js_1.EventFragment;
    } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function() {
      return index_js_1.Fragment;
    } });
    Object.defineProperty(exports, "FallbackFragment", { enumerable: true, get: function() {
      return index_js_1.FallbackFragment;
    } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function() {
      return index_js_1.FunctionFragment;
    } });
    Object.defineProperty(exports, "NamedFragment", { enumerable: true, get: function() {
      return index_js_1.NamedFragment;
    } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function() {
      return index_js_1.ParamType;
    } });
    Object.defineProperty(exports, "StructFragment", { enumerable: true, get: function() {
      return index_js_1.StructFragment;
    } });
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return index_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "ErrorDescription", { enumerable: true, get: function() {
      return index_js_1.ErrorDescription;
    } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function() {
      return index_js_1.Indexed;
    } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function() {
      return index_js_1.Interface;
    } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function() {
      return index_js_1.LogDescription;
    } });
    Object.defineProperty(exports, "Result", { enumerable: true, get: function() {
      return index_js_1.Result;
    } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function() {
      return index_js_1.TransactionDescription;
    } });
    Object.defineProperty(exports, "Typed", { enumerable: true, get: function() {
      return index_js_1.Typed;
    } });
    var index_js_2 = require_address2();
    Object.defineProperty(exports, "getAddress", { enumerable: true, get: function() {
      return index_js_2.getAddress;
    } });
    Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function() {
      return index_js_2.getIcapAddress;
    } });
    Object.defineProperty(exports, "getCreateAddress", { enumerable: true, get: function() {
      return index_js_2.getCreateAddress;
    } });
    Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function() {
      return index_js_2.getCreate2Address;
    } });
    Object.defineProperty(exports, "isAddressable", { enumerable: true, get: function() {
      return index_js_2.isAddressable;
    } });
    Object.defineProperty(exports, "isAddress", { enumerable: true, get: function() {
      return index_js_2.isAddress;
    } });
    Object.defineProperty(exports, "resolveAddress", { enumerable: true, get: function() {
      return index_js_2.resolveAddress;
    } });
    var index_js_3 = require_constants();
    Object.defineProperty(exports, "ZeroAddress", { enumerable: true, get: function() {
      return index_js_3.ZeroAddress;
    } });
    Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function() {
      return index_js_3.WeiPerEther;
    } });
    Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function() {
      return index_js_3.MaxUint256;
    } });
    Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function() {
      return index_js_3.MinInt256;
    } });
    Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function() {
      return index_js_3.MaxInt256;
    } });
    Object.defineProperty(exports, "N", { enumerable: true, get: function() {
      return index_js_3.N;
    } });
    Object.defineProperty(exports, "ZeroHash", { enumerable: true, get: function() {
      return index_js_3.ZeroHash;
    } });
    Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function() {
      return index_js_3.EtherSymbol;
    } });
    Object.defineProperty(exports, "MessagePrefix", { enumerable: true, get: function() {
      return index_js_3.MessagePrefix;
    } });
    var index_js_4 = require_contract2();
    Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function() {
      return index_js_4.BaseContract;
    } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return index_js_4.Contract;
    } });
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function() {
      return index_js_4.ContractFactory;
    } });
    Object.defineProperty(exports, "ContractEventPayload", { enumerable: true, get: function() {
      return index_js_4.ContractEventPayload;
    } });
    Object.defineProperty(exports, "ContractTransactionReceipt", { enumerable: true, get: function() {
      return index_js_4.ContractTransactionReceipt;
    } });
    Object.defineProperty(exports, "ContractTransactionResponse", { enumerable: true, get: function() {
      return index_js_4.ContractTransactionResponse;
    } });
    Object.defineProperty(exports, "ContractUnknownEventPayload", { enumerable: true, get: function() {
      return index_js_4.ContractUnknownEventPayload;
    } });
    Object.defineProperty(exports, "EventLog", { enumerable: true, get: function() {
      return index_js_4.EventLog;
    } });
    Object.defineProperty(exports, "UndecodedEventLog", { enumerable: true, get: function() {
      return index_js_4.UndecodedEventLog;
    } });
    var index_js_5 = require_crypto2();
    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function() {
      return index_js_5.computeHmac;
    } });
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function() {
      return index_js_5.randomBytes;
    } });
    Object.defineProperty(exports, "keccak256", { enumerable: true, get: function() {
      return index_js_5.keccak256;
    } });
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function() {
      return index_js_5.ripemd160;
    } });
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function() {
      return index_js_5.sha256;
    } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function() {
      return index_js_5.sha512;
    } });
    Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function() {
      return index_js_5.pbkdf2;
    } });
    Object.defineProperty(exports, "scrypt", { enumerable: true, get: function() {
      return index_js_5.scrypt;
    } });
    Object.defineProperty(exports, "scryptSync", { enumerable: true, get: function() {
      return index_js_5.scryptSync;
    } });
    Object.defineProperty(exports, "lock", { enumerable: true, get: function() {
      return index_js_5.lock;
    } });
    Object.defineProperty(exports, "Signature", { enumerable: true, get: function() {
      return index_js_5.Signature;
    } });
    Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function() {
      return index_js_5.SigningKey;
    } });
    var index_js_6 = require_hash();
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return index_js_6.id;
    } });
    Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function() {
      return index_js_6.ensNormalize;
    } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function() {
      return index_js_6.isValidName;
    } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function() {
      return index_js_6.namehash;
    } });
    Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function() {
      return index_js_6.dnsEncode;
    } });
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function() {
      return index_js_6.hashMessage;
    } });
    Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function() {
      return index_js_6.verifyMessage;
    } });
    Object.defineProperty(exports, "solidityPacked", { enumerable: true, get: function() {
      return index_js_6.solidityPacked;
    } });
    Object.defineProperty(exports, "solidityPackedKeccak256", { enumerable: true, get: function() {
      return index_js_6.solidityPackedKeccak256;
    } });
    Object.defineProperty(exports, "solidityPackedSha256", { enumerable: true, get: function() {
      return index_js_6.solidityPackedSha256;
    } });
    Object.defineProperty(exports, "TypedDataEncoder", { enumerable: true, get: function() {
      return index_js_6.TypedDataEncoder;
    } });
    Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function() {
      return index_js_6.verifyTypedData;
    } });
    var index_js_7 = require_providers();
    Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function() {
      return index_js_7.getDefaultProvider;
    } });
    Object.defineProperty(exports, "Block", { enumerable: true, get: function() {
      return index_js_7.Block;
    } });
    Object.defineProperty(exports, "FeeData", { enumerable: true, get: function() {
      return index_js_7.FeeData;
    } });
    Object.defineProperty(exports, "Log", { enumerable: true, get: function() {
      return index_js_7.Log;
    } });
    Object.defineProperty(exports, "TransactionReceipt", { enumerable: true, get: function() {
      return index_js_7.TransactionReceipt;
    } });
    Object.defineProperty(exports, "TransactionResponse", { enumerable: true, get: function() {
      return index_js_7.TransactionResponse;
    } });
    Object.defineProperty(exports, "AbstractSigner", { enumerable: true, get: function() {
      return index_js_7.AbstractSigner;
    } });
    Object.defineProperty(exports, "NonceManager", { enumerable: true, get: function() {
      return index_js_7.NonceManager;
    } });
    Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function() {
      return index_js_7.VoidSigner;
    } });
    Object.defineProperty(exports, "AbstractProvider", { enumerable: true, get: function() {
      return index_js_7.AbstractProvider;
    } });
    Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function() {
      return index_js_7.FallbackProvider;
    } });
    Object.defineProperty(exports, "JsonRpcApiProvider", { enumerable: true, get: function() {
      return index_js_7.JsonRpcApiProvider;
    } });
    Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function() {
      return index_js_7.JsonRpcProvider;
    } });
    Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function() {
      return index_js_7.JsonRpcSigner;
    } });
    Object.defineProperty(exports, "BrowserProvider", { enumerable: true, get: function() {
      return index_js_7.BrowserProvider;
    } });
    Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function() {
      return index_js_7.AlchemyProvider;
    } });
    Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function() {
      return index_js_7.AnkrProvider;
    } });
    Object.defineProperty(exports, "ChainstackProvider", { enumerable: true, get: function() {
      return index_js_7.ChainstackProvider;
    } });
    Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function() {
      return index_js_7.CloudflareProvider;
    } });
    Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function() {
      return index_js_7.EtherscanProvider;
    } });
    Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function() {
      return index_js_7.InfuraProvider;
    } });
    Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function() {
      return index_js_7.InfuraWebSocketProvider;
    } });
    Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function() {
      return index_js_7.PocketProvider;
    } });
    Object.defineProperty(exports, "QuickNodeProvider", { enumerable: true, get: function() {
      return index_js_7.QuickNodeProvider;
    } });
    Object.defineProperty(exports, "IpcSocketProvider", { enumerable: true, get: function() {
      return index_js_7.IpcSocketProvider;
    } });
    Object.defineProperty(exports, "SocketProvider", { enumerable: true, get: function() {
      return index_js_7.SocketProvider;
    } });
    Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function() {
      return index_js_7.WebSocketProvider;
    } });
    Object.defineProperty(exports, "EnsResolver", { enumerable: true, get: function() {
      return index_js_7.EnsResolver;
    } });
    Object.defineProperty(exports, "Network", { enumerable: true, get: function() {
      return index_js_7.Network;
    } });
    Object.defineProperty(exports, "EnsPlugin", { enumerable: true, get: function() {
      return index_js_7.EnsPlugin;
    } });
    Object.defineProperty(exports, "EtherscanPlugin", { enumerable: true, get: function() {
      return index_js_7.EtherscanPlugin;
    } });
    Object.defineProperty(exports, "FeeDataNetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.FeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.FetchUrlFeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports, "GasCostPlugin", { enumerable: true, get: function() {
      return index_js_7.GasCostPlugin;
    } });
    Object.defineProperty(exports, "NetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.NetworkPlugin;
    } });
    Object.defineProperty(exports, "MulticoinProviderPlugin", { enumerable: true, get: function() {
      return index_js_7.MulticoinProviderPlugin;
    } });
    Object.defineProperty(exports, "SocketBlockSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketBlockSubscriber;
    } });
    Object.defineProperty(exports, "SocketEventSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketEventSubscriber;
    } });
    Object.defineProperty(exports, "SocketPendingSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketPendingSubscriber;
    } });
    Object.defineProperty(exports, "SocketSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketSubscriber;
    } });
    Object.defineProperty(exports, "UnmanagedSubscriber", { enumerable: true, get: function() {
      return index_js_7.UnmanagedSubscriber;
    } });
    Object.defineProperty(exports, "copyRequest", { enumerable: true, get: function() {
      return index_js_7.copyRequest;
    } });
    Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function() {
      return index_js_7.showThrottleMessage;
    } });
    var index_js_8 = require_transaction2();
    Object.defineProperty(exports, "accessListify", { enumerable: true, get: function() {
      return index_js_8.accessListify;
    } });
    Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function() {
      return index_js_8.computeAddress;
    } });
    Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function() {
      return index_js_8.recoverAddress;
    } });
    Object.defineProperty(exports, "Transaction", { enumerable: true, get: function() {
      return index_js_8.Transaction;
    } });
    var index_js_9 = require_utils3();
    Object.defineProperty(exports, "decodeBase58", { enumerable: true, get: function() {
      return index_js_9.decodeBase58;
    } });
    Object.defineProperty(exports, "encodeBase58", { enumerable: true, get: function() {
      return index_js_9.encodeBase58;
    } });
    Object.defineProperty(exports, "decodeBase64", { enumerable: true, get: function() {
      return index_js_9.decodeBase64;
    } });
    Object.defineProperty(exports, "encodeBase64", { enumerable: true, get: function() {
      return index_js_9.encodeBase64;
    } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return index_js_9.concat;
    } });
    Object.defineProperty(exports, "dataLength", { enumerable: true, get: function() {
      return index_js_9.dataLength;
    } });
    Object.defineProperty(exports, "dataSlice", { enumerable: true, get: function() {
      return index_js_9.dataSlice;
    } });
    Object.defineProperty(exports, "getBytes", { enumerable: true, get: function() {
      return index_js_9.getBytes;
    } });
    Object.defineProperty(exports, "getBytesCopy", { enumerable: true, get: function() {
      return index_js_9.getBytesCopy;
    } });
    Object.defineProperty(exports, "hexlify", { enumerable: true, get: function() {
      return index_js_9.hexlify;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return index_js_9.isHexString;
    } });
    Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function() {
      return index_js_9.isBytesLike;
    } });
    Object.defineProperty(exports, "stripZerosLeft", { enumerable: true, get: function() {
      return index_js_9.stripZerosLeft;
    } });
    Object.defineProperty(exports, "zeroPadBytes", { enumerable: true, get: function() {
      return index_js_9.zeroPadBytes;
    } });
    Object.defineProperty(exports, "zeroPadValue", { enumerable: true, get: function() {
      return index_js_9.zeroPadValue;
    } });
    Object.defineProperty(exports, "defineProperties", { enumerable: true, get: function() {
      return index_js_9.defineProperties;
    } });
    Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function() {
      return index_js_9.resolveProperties;
    } });
    Object.defineProperty(exports, "assert", { enumerable: true, get: function() {
      return index_js_9.assert;
    } });
    Object.defineProperty(exports, "assertArgument", { enumerable: true, get: function() {
      return index_js_9.assertArgument;
    } });
    Object.defineProperty(exports, "assertArgumentCount", { enumerable: true, get: function() {
      return index_js_9.assertArgumentCount;
    } });
    Object.defineProperty(exports, "assertNormalize", { enumerable: true, get: function() {
      return index_js_9.assertNormalize;
    } });
    Object.defineProperty(exports, "assertPrivate", { enumerable: true, get: function() {
      return index_js_9.assertPrivate;
    } });
    Object.defineProperty(exports, "makeError", { enumerable: true, get: function() {
      return index_js_9.makeError;
    } });
    Object.defineProperty(exports, "isCallException", { enumerable: true, get: function() {
      return index_js_9.isCallException;
    } });
    Object.defineProperty(exports, "isError", { enumerable: true, get: function() {
      return index_js_9.isError;
    } });
    Object.defineProperty(exports, "EventPayload", { enumerable: true, get: function() {
      return index_js_9.EventPayload;
    } });
    Object.defineProperty(exports, "FetchRequest", { enumerable: true, get: function() {
      return index_js_9.FetchRequest;
    } });
    Object.defineProperty(exports, "FetchResponse", { enumerable: true, get: function() {
      return index_js_9.FetchResponse;
    } });
    Object.defineProperty(exports, "FetchCancelSignal", { enumerable: true, get: function() {
      return index_js_9.FetchCancelSignal;
    } });
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function() {
      return index_js_9.FixedNumber;
    } });
    Object.defineProperty(exports, "getBigInt", { enumerable: true, get: function() {
      return index_js_9.getBigInt;
    } });
    Object.defineProperty(exports, "getNumber", { enumerable: true, get: function() {
      return index_js_9.getNumber;
    } });
    Object.defineProperty(exports, "getUint", { enumerable: true, get: function() {
      return index_js_9.getUint;
    } });
    Object.defineProperty(exports, "toBeArray", { enumerable: true, get: function() {
      return index_js_9.toBeArray;
    } });
    Object.defineProperty(exports, "toBigInt", { enumerable: true, get: function() {
      return index_js_9.toBigInt;
    } });
    Object.defineProperty(exports, "toBeHex", { enumerable: true, get: function() {
      return index_js_9.toBeHex;
    } });
    Object.defineProperty(exports, "toNumber", { enumerable: true, get: function() {
      return index_js_9.toNumber;
    } });
    Object.defineProperty(exports, "toQuantity", { enumerable: true, get: function() {
      return index_js_9.toQuantity;
    } });
    Object.defineProperty(exports, "fromTwos", { enumerable: true, get: function() {
      return index_js_9.fromTwos;
    } });
    Object.defineProperty(exports, "toTwos", { enumerable: true, get: function() {
      return index_js_9.toTwos;
    } });
    Object.defineProperty(exports, "mask", { enumerable: true, get: function() {
      return index_js_9.mask;
    } });
    Object.defineProperty(exports, "formatEther", { enumerable: true, get: function() {
      return index_js_9.formatEther;
    } });
    Object.defineProperty(exports, "parseEther", { enumerable: true, get: function() {
      return index_js_9.parseEther;
    } });
    Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function() {
      return index_js_9.formatUnits;
    } });
    Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function() {
      return index_js_9.parseUnits;
    } });
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function() {
      return index_js_9.toUtf8Bytes;
    } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function() {
      return index_js_9.toUtf8CodePoints;
    } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function() {
      return index_js_9.toUtf8String;
    } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return index_js_9.Utf8ErrorFuncs;
    } });
    Object.defineProperty(exports, "decodeRlp", { enumerable: true, get: function() {
      return index_js_9.decodeRlp;
    } });
    Object.defineProperty(exports, "encodeRlp", { enumerable: true, get: function() {
      return index_js_9.encodeRlp;
    } });
    Object.defineProperty(exports, "uuidV4", { enumerable: true, get: function() {
      return index_js_9.uuidV4;
    } });
    var index_js_10 = require_wallet2();
    Object.defineProperty(exports, "Mnemonic", { enumerable: true, get: function() {
      return index_js_10.Mnemonic;
    } });
    Object.defineProperty(exports, "BaseWallet", { enumerable: true, get: function() {
      return index_js_10.BaseWallet;
    } });
    Object.defineProperty(exports, "HDNodeWallet", { enumerable: true, get: function() {
      return index_js_10.HDNodeWallet;
    } });
    Object.defineProperty(exports, "HDNodeVoidWallet", { enumerable: true, get: function() {
      return index_js_10.HDNodeVoidWallet;
    } });
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function() {
      return index_js_10.Wallet;
    } });
    Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function() {
      return index_js_10.defaultPath;
    } });
    Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function() {
      return index_js_10.getAccountPath;
    } });
    Object.defineProperty(exports, "getIndexedAccountPath", { enumerable: true, get: function() {
      return index_js_10.getIndexedAccountPath;
    } });
    Object.defineProperty(exports, "isCrowdsaleJson", { enumerable: true, get: function() {
      return index_js_10.isCrowdsaleJson;
    } });
    Object.defineProperty(exports, "isKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.isKeystoreJson;
    } });
    Object.defineProperty(exports, "decryptCrowdsaleJson", { enumerable: true, get: function() {
      return index_js_10.decryptCrowdsaleJson;
    } });
    Object.defineProperty(exports, "decryptKeystoreJsonSync", { enumerable: true, get: function() {
      return index_js_10.decryptKeystoreJsonSync;
    } });
    Object.defineProperty(exports, "decryptKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.decryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.encryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJsonSync", { enumerable: true, get: function() {
      return index_js_10.encryptKeystoreJsonSync;
    } });
    var index_js_11 = require_wordlists();
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function() {
      return index_js_11.Wordlist;
    } });
    Object.defineProperty(exports, "LangEn", { enumerable: true, get: function() {
      return index_js_11.LangEn;
    } });
    Object.defineProperty(exports, "WordlistOwl", { enumerable: true, get: function() {
      return index_js_11.WordlistOwl;
    } });
    Object.defineProperty(exports, "WordlistOwlA", { enumerable: true, get: function() {
      return index_js_11.WordlistOwlA;
    } });
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function() {
      return index_js_11.wordlists;
    } });
  }
});

// node_modules/ethers/lib.commonjs/index.js
var require_lib2 = __commonJS({
  "node_modules/ethers/lib.commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ethers = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ethers = tslib_1.__importStar(require_ethers());
    exports.ethers = ethers;
    tslib_1.__exportStar(require_ethers(), exports);
  }
});

// node_modules/siwe/dist/ethersCompat.js
var require_ethersCompat = __commonJS({
  "node_modules/siwe/dist/ethersCompat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAddress = exports.hashMessage = exports.verifyMessage = void 0;
    var ethers_1 = require_lib2();
    var ethersVerifyMessage = null;
    var ethersHashMessage = null;
    var ethersGetAddress = null;
    try {
      ethersVerifyMessage = ethers_1.ethers.utils.verifyMessage;
      ethersHashMessage = ethers_1.ethers.utils.hashMessage;
      ethersGetAddress = ethers_1.ethers.utils.getAddress;
    } catch (_a) {
      ethersVerifyMessage = ethers_1.ethers.verifyMessage;
      ethersHashMessage = ethers_1.ethers.hashMessage;
      ethersGetAddress = ethers_1.ethers.getAddress;
    }
    exports.verifyMessage = ethersVerifyMessage;
    exports.hashMessage = ethersHashMessage;
    exports.getAddress = ethersGetAddress;
  }
});

// node_modules/siwe/dist/types.js
var require_types = __commonJS({
  "node_modules/siwe/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SiweErrorType = exports.SiweError = exports.VerifyOptsKeys = exports.VerifyParamsKeys = void 0;
    exports.VerifyParamsKeys = [
      "signature",
      "scheme",
      "domain",
      "nonce",
      "time"
    ];
    exports.VerifyOptsKeys = [
      "provider",
      "suppressExceptions",
      "verificationFallback"
    ];
    var SiweError2 = class {
      constructor(type, expected, received) {
        this.type = type;
        this.expected = expected;
        this.received = received;
      }
    };
    exports.SiweError = SiweError2;
    var SiweErrorType;
    (function(SiweErrorType2) {
      SiweErrorType2["EXPIRED_MESSAGE"] = "Expired message.";
      SiweErrorType2["INVALID_DOMAIN"] = "Invalid domain.";
      SiweErrorType2["SCHEME_MISMATCH"] = "Scheme does not match provided scheme for verification.";
      SiweErrorType2["DOMAIN_MISMATCH"] = "Domain does not match provided domain for verification.";
      SiweErrorType2["NONCE_MISMATCH"] = "Nonce does not match provided nonce for verification.";
      SiweErrorType2["INVALID_ADDRESS"] = "Invalid address.";
      SiweErrorType2["INVALID_URI"] = "URI does not conform to RFC 3986.";
      SiweErrorType2["INVALID_NONCE"] = "Nonce size smaller then 8 characters or is not alphanumeric.";
      SiweErrorType2["NOT_YET_VALID_MESSAGE"] = "Message is not valid yet.";
      SiweErrorType2["INVALID_SIGNATURE"] = "Signature does not match address of the message.";
      SiweErrorType2["INVALID_TIME_FORMAT"] = "Invalid time format.";
      SiweErrorType2["INVALID_MESSAGE_VERSION"] = "Invalid message version.";
      SiweErrorType2["UNABLE_TO_PARSE"] = "Unable to parse the message.";
    })(SiweErrorType = exports.SiweErrorType || (exports.SiweErrorType = {}));
  }
});

// node_modules/@stablelib/random/lib/source/browser.js
var require_browser = __commonJS({
  "node_modules/@stablelib/random/lib/source/browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserRandomSource = void 0;
    var QUOTA = 65536;
    var BrowserRandomSource = class {
      constructor() {
        this.isAvailable = false;
        this.isInstantiated = false;
        const browserCrypto = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
        if (browserCrypto && browserCrypto.getRandomValues !== void 0) {
          this._crypto = browserCrypto;
          this.isAvailable = true;
          this.isInstantiated = true;
        }
      }
      randomBytes(length) {
        if (!this.isAvailable || !this._crypto) {
          throw new Error("Browser random byte generator is not available.");
        }
        const out = new Uint8Array(length);
        for (let i = 0; i < out.length; i += QUOTA) {
          this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));
        }
        return out;
      }
    };
    exports.BrowserRandomSource = BrowserRandomSource;
  }
});

// node_modules/@stablelib/wipe/lib/wipe.js
var require_wipe = __commonJS({
  "node_modules/@stablelib/wipe/lib/wipe.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function wipe(array) {
      for (var i = 0; i < array.length; i++) {
        array[i] = 0;
      }
      return array;
    }
    exports.wipe = wipe;
  }
});

// browser-external:crypto
var require_crypto3 = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@stablelib/random/lib/source/node.js
var require_node = __commonJS({
  "node_modules/@stablelib/random/lib/source/node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NodeRandomSource = void 0;
    var wipe_1 = require_wipe();
    var NodeRandomSource = class {
      constructor() {
        this.isAvailable = false;
        this.isInstantiated = false;
        if (typeof __require !== "undefined") {
          const nodeCrypto = require_crypto3();
          if (nodeCrypto && nodeCrypto.randomBytes) {
            this._crypto = nodeCrypto;
            this.isAvailable = true;
            this.isInstantiated = true;
          }
        }
      }
      randomBytes(length) {
        if (!this.isAvailable || !this._crypto) {
          throw new Error("Node.js random byte generator is not available.");
        }
        let buffer = this._crypto.randomBytes(length);
        if (buffer.length !== length) {
          throw new Error("NodeRandomSource: got fewer bytes than requested");
        }
        const out = new Uint8Array(length);
        for (let i = 0; i < out.length; i++) {
          out[i] = buffer[i];
        }
        (0, wipe_1.wipe)(buffer);
        return out;
      }
    };
    exports.NodeRandomSource = NodeRandomSource;
  }
});

// node_modules/@stablelib/random/lib/source/system.js
var require_system = __commonJS({
  "node_modules/@stablelib/random/lib/source/system.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SystemRandomSource = void 0;
    var browser_1 = require_browser();
    var node_1 = require_node();
    var SystemRandomSource = class {
      constructor() {
        this.isAvailable = false;
        this.name = "";
        this._source = new browser_1.BrowserRandomSource();
        if (this._source.isAvailable) {
          this.isAvailable = true;
          this.name = "Browser";
          return;
        }
        this._source = new node_1.NodeRandomSource();
        if (this._source.isAvailable) {
          this.isAvailable = true;
          this.name = "Node";
          return;
        }
      }
      randomBytes(length) {
        if (!this.isAvailable) {
          throw new Error("System random byte generator is not available.");
        }
        return this._source.randomBytes(length);
      }
    };
    exports.SystemRandomSource = SystemRandomSource;
  }
});

// node_modules/@stablelib/int/lib/int.js
var require_int = __commonJS({
  "node_modules/@stablelib/int/lib/int.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function imulShim(a, b) {
      var ah = a >>> 16 & 65535, al = a & 65535;
      var bh = b >>> 16 & 65535, bl = b & 65535;
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    }
    exports.mul = Math.imul || imulShim;
    function add(a, b) {
      return a + b | 0;
    }
    exports.add = add;
    function sub(a, b) {
      return a - b | 0;
    }
    exports.sub = sub;
    function rotl(x2, n) {
      return x2 << n | x2 >>> 32 - n;
    }
    exports.rotl = rotl;
    function rotr(x2, n) {
      return x2 << 32 - n | x2 >>> n;
    }
    exports.rotr = rotr;
    function isIntegerShim(n) {
      return typeof n === "number" && isFinite(n) && Math.floor(n) === n;
    }
    exports.isInteger = Number.isInteger || isIntegerShim;
    exports.MAX_SAFE_INTEGER = 9007199254740991;
    exports.isSafeInteger = function(n) {
      return exports.isInteger(n) && (n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER);
    };
  }
});

// node_modules/@stablelib/binary/lib/binary.js
var require_binary = __commonJS({
  "node_modules/@stablelib/binary/lib/binary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var int_1 = require_int();
    function readInt16BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 0] << 8 | array[offset + 1]) << 16 >> 16;
    }
    exports.readInt16BE = readInt16BE;
    function readUint16BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 0] << 8 | array[offset + 1]) >>> 0;
    }
    exports.readUint16BE = readUint16BE;
    function readInt16LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 1] << 8 | array[offset]) << 16 >> 16;
    }
    exports.readInt16LE = readInt16LE;
    function readUint16LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 1] << 8 | array[offset]) >>> 0;
    }
    exports.readUint16LE = readUint16LE;
    function writeUint16BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(2);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 8;
      out[offset + 1] = value >>> 0;
      return out;
    }
    exports.writeUint16BE = writeUint16BE;
    exports.writeInt16BE = writeUint16BE;
    function writeUint16LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(2);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 0;
      out[offset + 1] = value >>> 8;
      return out;
    }
    exports.writeUint16LE = writeUint16LE;
    exports.writeInt16LE = writeUint16LE;
    function readInt32BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3];
    }
    exports.readInt32BE = readInt32BE;
    function readUint32BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3]) >>> 0;
    }
    exports.readUint32BE = readUint32BE;
    function readInt32LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset];
    }
    exports.readInt32LE = readInt32LE;
    function readUint32LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      return (array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset]) >>> 0;
    }
    exports.readUint32LE = readUint32LE;
    function writeUint32BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 24;
      out[offset + 1] = value >>> 16;
      out[offset + 2] = value >>> 8;
      out[offset + 3] = value >>> 0;
      return out;
    }
    exports.writeUint32BE = writeUint32BE;
    exports.writeInt32BE = writeUint32BE;
    function writeUint32LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      out[offset + 0] = value >>> 0;
      out[offset + 1] = value >>> 8;
      out[offset + 2] = value >>> 16;
      out[offset + 3] = value >>> 24;
      return out;
    }
    exports.writeUint32LE = writeUint32LE;
    exports.writeInt32LE = writeUint32LE;
    function readInt64BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var hi = readInt32BE(array, offset);
      var lo = readInt32BE(array, offset + 4);
      return hi * 4294967296 + lo - (lo >> 31) * 4294967296;
    }
    exports.readInt64BE = readInt64BE;
    function readUint64BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var hi = readUint32BE(array, offset);
      var lo = readUint32BE(array, offset + 4);
      return hi * 4294967296 + lo;
    }
    exports.readUint64BE = readUint64BE;
    function readInt64LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var lo = readInt32LE(array, offset);
      var hi = readInt32LE(array, offset + 4);
      return hi * 4294967296 + lo - (lo >> 31) * 4294967296;
    }
    exports.readInt64LE = readInt64LE;
    function readUint64LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var lo = readUint32LE(array, offset);
      var hi = readUint32LE(array, offset + 4);
      return hi * 4294967296 + lo;
    }
    exports.readUint64LE = readUint64LE;
    function writeUint64BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      writeUint32BE(value / 4294967296 >>> 0, out, offset);
      writeUint32BE(value >>> 0, out, offset + 4);
      return out;
    }
    exports.writeUint64BE = writeUint64BE;
    exports.writeInt64BE = writeUint64BE;
    function writeUint64LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      writeUint32LE(value >>> 0, out, offset);
      writeUint32LE(value / 4294967296 >>> 0, out, offset + 4);
      return out;
    }
    exports.writeUint64LE = writeUint64LE;
    exports.writeInt64LE = writeUint64LE;
    function readUintBE(bitLength, array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("readUintBE supports only bitLengths divisible by 8");
      }
      if (bitLength / 8 > array.length - offset) {
        throw new Error("readUintBE: array is too short for the given bitLength");
      }
      var result = 0;
      var mul = 1;
      for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
        result += array[i] * mul;
        mul *= 256;
      }
      return result;
    }
    exports.readUintBE = readUintBE;
    function readUintLE(bitLength, array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("readUintLE supports only bitLengths divisible by 8");
      }
      if (bitLength / 8 > array.length - offset) {
        throw new Error("readUintLE: array is too short for the given bitLength");
      }
      var result = 0;
      var mul = 1;
      for (var i = offset; i < offset + bitLength / 8; i++) {
        result += array[i] * mul;
        mul *= 256;
      }
      return result;
    }
    exports.readUintLE = readUintLE;
    function writeUintBE(bitLength, value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(bitLength / 8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("writeUintBE supports only bitLengths divisible by 8");
      }
      if (!int_1.isSafeInteger(value)) {
        throw new Error("writeUintBE value must be an integer");
      }
      var div = 1;
      for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
        out[i] = value / div & 255;
        div *= 256;
      }
      return out;
    }
    exports.writeUintBE = writeUintBE;
    function writeUintLE(bitLength, value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(bitLength / 8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      if (bitLength % 8 !== 0) {
        throw new Error("writeUintLE supports only bitLengths divisible by 8");
      }
      if (!int_1.isSafeInteger(value)) {
        throw new Error("writeUintLE value must be an integer");
      }
      var div = 1;
      for (var i = offset; i < offset + bitLength / 8; i++) {
        out[i] = value / div & 255;
        div *= 256;
      }
      return out;
    }
    exports.writeUintLE = writeUintLE;
    function readFloat32BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat32(offset);
    }
    exports.readFloat32BE = readFloat32BE;
    function readFloat32LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat32(offset, true);
    }
    exports.readFloat32LE = readFloat32LE;
    function readFloat64BE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat64(offset);
    }
    exports.readFloat64BE = readFloat64BE;
    function readFloat64LE(array, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
      return view.getFloat64(offset, true);
    }
    exports.readFloat64LE = readFloat64LE;
    function writeFloat32BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat32(offset, value);
      return out;
    }
    exports.writeFloat32BE = writeFloat32BE;
    function writeFloat32LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(4);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat32(offset, value, true);
      return out;
    }
    exports.writeFloat32LE = writeFloat32LE;
    function writeFloat64BE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat64(offset, value);
      return out;
    }
    exports.writeFloat64BE = writeFloat64BE;
    function writeFloat64LE(value, out, offset) {
      if (out === void 0) {
        out = new Uint8Array(8);
      }
      if (offset === void 0) {
        offset = 0;
      }
      var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      view.setFloat64(offset, value, true);
      return out;
    }
    exports.writeFloat64LE = writeFloat64LE;
  }
});

// node_modules/@stablelib/random/lib/random.js
var require_random2 = __commonJS({
  "node_modules/@stablelib/random/lib/random.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomStringForEntropy = exports.randomString = exports.randomUint32 = exports.randomBytes = exports.defaultRandomSource = void 0;
    var system_1 = require_system();
    var binary_1 = require_binary();
    var wipe_1 = require_wipe();
    exports.defaultRandomSource = new system_1.SystemRandomSource();
    function randomBytes(length, prng = exports.defaultRandomSource) {
      return prng.randomBytes(length);
    }
    exports.randomBytes = randomBytes;
    function randomUint32(prng = exports.defaultRandomSource) {
      const buf = randomBytes(4, prng);
      const result = (0, binary_1.readUint32LE)(buf);
      (0, wipe_1.wipe)(buf);
      return result;
    }
    exports.randomUint32 = randomUint32;
    var ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    function randomString(length, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
      if (charset.length < 2) {
        throw new Error("randomString charset is too short");
      }
      if (charset.length > 256) {
        throw new Error("randomString charset is too long");
      }
      let out = "";
      const charsLen = charset.length;
      const maxByte = 256 - 256 % charsLen;
      while (length > 0) {
        const buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);
        for (let i = 0; i < buf.length && length > 0; i++) {
          const randomByte = buf[i];
          if (randomByte < maxByte) {
            out += charset.charAt(randomByte % charsLen);
            length--;
          }
        }
        (0, wipe_1.wipe)(buf);
      }
      return out;
    }
    exports.randomString = randomString;
    function randomStringForEntropy(bits, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {
      const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));
      return randomString(length, charset, prng);
    }
    exports.randomStringForEntropy = randomStringForEntropy;
  }
});

// node_modules/siwe/dist/utils.js
var require_utils6 = __commonJS({
  "node_modules/siwe/dist/utils.js"(exports) {
    "use strict";
    var __awaiter3 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkInvalidKeys = exports.isValidISO8601Date = exports.generateNonce = exports.checkContractWalletSignature = void 0;
    var random_1 = require_random2();
    var ethers_1 = require_lib2();
    var ethersCompat_1 = require_ethersCompat();
    var EIP1271_ABI = [
      "function isValidSignature(bytes32 _message, bytes _signature) public view returns (bytes4)"
    ];
    var EIP1271_MAGICVALUE = "0x1626ba7e";
    var ISO8601 = /^(?<date>[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(.[0-9]+)?(([Zz])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;
    var checkContractWalletSignature = (message, signature, provider) => __awaiter3(void 0, void 0, void 0, function* () {
      if (!provider) {
        return false;
      }
      const walletContract = new ethers_1.Contract(message.address, EIP1271_ABI, provider);
      const hashedMessage = (0, ethersCompat_1.hashMessage)(message.prepareMessage());
      const res = yield walletContract.isValidSignature(hashedMessage, signature);
      return res === EIP1271_MAGICVALUE;
    });
    exports.checkContractWalletSignature = checkContractWalletSignature;
    var generateNonce2 = () => {
      const nonce = (0, random_1.randomStringForEntropy)(96);
      if (!nonce || nonce.length < 8) {
        throw new Error("Error during nonce creation.");
      }
      return nonce;
    };
    exports.generateNonce = generateNonce2;
    var isValidISO8601Date = (inputDate) => {
      const inputMatch = ISO8601.exec(inputDate);
      if (!inputDate) {
        return false;
      }
      const inputDateParsed = new Date(inputMatch.groups.date).toISOString();
      const parsedInputMatch = ISO8601.exec(inputDateParsed);
      return inputMatch.groups.date === parsedInputMatch.groups.date;
    };
    exports.isValidISO8601Date = isValidISO8601Date;
    var checkInvalidKeys = (obj, keys) => {
      const invalidKeys = [];
      Object.keys(obj).forEach((key) => {
        if (!keys.includes(key)) {
          invalidKeys.push(key);
        }
      });
      return invalidKeys;
    };
    exports.checkInvalidKeys = checkInvalidKeys;
  }
});

// node_modules/siwe/dist/client.js
var require_client = __commonJS({
  "node_modules/siwe/dist/client.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding2(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    var __awaiter3 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SiweMessage = void 0;
    var siwe_parser_1 = require_parsers();
    var uri = __importStar2(require_valid_url());
    var ethersCompat_1 = require_ethersCompat();
    var types_1 = require_types();
    var utils_1 = require_utils6();
    var SiweMessage2 = class {
      /**
       * Creates a parsed Sign-In with Ethereum Message (EIP-4361) object from a
       * string or an object. If a string is used an ABNF parser is called to
       * validate the parameter, otherwise the fields are attributed.
       * @param param {string | SiweMessage} Sign message as a string or an object.
       */
      constructor(param) {
        if (typeof param === "string") {
          const parsedMessage = new siwe_parser_1.ParsedMessage(param);
          this.scheme = parsedMessage.scheme;
          this.domain = parsedMessage.domain;
          this.address = parsedMessage.address;
          this.statement = parsedMessage.statement;
          this.uri = parsedMessage.uri;
          this.version = parsedMessage.version;
          this.nonce = parsedMessage.nonce;
          this.issuedAt = parsedMessage.issuedAt;
          this.expirationTime = parsedMessage.expirationTime;
          this.notBefore = parsedMessage.notBefore;
          this.requestId = parsedMessage.requestId;
          this.chainId = parsedMessage.chainId;
          this.resources = parsedMessage.resources;
        } else {
          this.scheme = param === null || param === void 0 ? void 0 : param.scheme;
          this.domain = param.domain;
          this.address = param.address;
          this.statement = param === null || param === void 0 ? void 0 : param.statement;
          this.uri = param.uri;
          this.version = param.version;
          this.chainId = param.chainId;
          this.nonce = param.nonce;
          this.issuedAt = param === null || param === void 0 ? void 0 : param.issuedAt;
          this.expirationTime = param === null || param === void 0 ? void 0 : param.expirationTime;
          this.notBefore = param === null || param === void 0 ? void 0 : param.notBefore;
          this.requestId = param === null || param === void 0 ? void 0 : param.requestId;
          this.resources = param === null || param === void 0 ? void 0 : param.resources;
          if (typeof this.chainId === "string") {
            this.chainId = (0, siwe_parser_1.parseIntegerNumber)(this.chainId);
          }
        }
        this.nonce = this.nonce || (0, utils_1.generateNonce)();
        this.validateMessage();
      }
      /**
       * This function can be used to retrieve an EIP-4361 formated message for
       * signature, although you can call it directly it's advised to use
       * [prepareMessage()] instead which will resolve to the correct method based
       * on the [type] attribute of this object, in case of other formats being
       * implemented.
       * @returns {string} EIP-4361 formated message, ready for EIP-191 signing.
       */
      toMessage() {
        this.validateMessage();
        const headerPrefx = this.scheme ? `${this.scheme}://${this.domain}` : this.domain;
        const header = `${headerPrefx} wants you to sign in with your Ethereum account:`;
        const uriField = `URI: ${this.uri}`;
        let prefix = [header, this.address].join("\n");
        const versionField = `Version: ${this.version}`;
        if (!this.nonce) {
          this.nonce = (0, utils_1.generateNonce)();
        }
        const chainField = `Chain ID: ` + this.chainId || "1";
        const nonceField = `Nonce: ${this.nonce}`;
        const suffixArray = [uriField, versionField, chainField, nonceField];
        this.issuedAt = this.issuedAt || (/* @__PURE__ */ new Date()).toISOString();
        suffixArray.push(`Issued At: ${this.issuedAt}`);
        if (this.expirationTime) {
          const expiryField = `Expiration Time: ${this.expirationTime}`;
          suffixArray.push(expiryField);
        }
        if (this.notBefore) {
          suffixArray.push(`Not Before: ${this.notBefore}`);
        }
        if (this.requestId) {
          suffixArray.push(`Request ID: ${this.requestId}`);
        }
        if (this.resources) {
          suffixArray.push([`Resources:`, ...this.resources.map((x2) => `- ${x2}`)].join("\n"));
        }
        const suffix = suffixArray.join("\n");
        prefix = [prefix, this.statement].join("\n\n");
        if (this.statement) {
          prefix += "\n";
        }
        return [prefix, suffix].join("\n");
      }
      /**
       * This method parses all the fields in the object and creates a messaging for signing
       * message according with the type defined.
       * @returns {string} Returns a message ready to be signed according with the
       * type defined in the object.
       */
      prepareMessage() {
        let message;
        switch (this.version) {
          case "1": {
            message = this.toMessage();
            break;
          }
          default: {
            message = this.toMessage();
            break;
          }
        }
        return message;
      }
      /**
       * @deprecated
       * Verifies the integrity of the object by matching its signature.
       * @param signature Signature to match the address in the message.
       * @param provider Ethers provider to be used for EIP-1271 validation
       */
      validate(signature, provider) {
        return __awaiter3(this, void 0, void 0, function* () {
          console.warn("validate() has been deprecated, please update your code to use verify(). validate() may be removed in future versions.");
          return this.verify({ signature }, { provider, suppressExceptions: false }).then(({ data }) => data).catch(({ error }) => {
            throw error;
          });
        });
      }
      /**
       * Verifies the integrity of the object by matching its signature.
       * @param params Parameters to verify the integrity of the message, signature is required.
       * @returns {Promise<SiweMessage>} This object if valid.
       */
      verify(params, opts = { suppressExceptions: false }) {
        return __awaiter3(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            var _a, _b, _c;
            const fail = (result) => {
              if (opts.suppressExceptions) {
                return resolve(result);
              } else {
                return reject(result);
              }
            };
            const invalidParams = (0, utils_1.checkInvalidKeys)(params, types_1.VerifyParamsKeys);
            if (invalidParams.length > 0) {
              fail({
                success: false,
                data: this,
                error: new Error(`${invalidParams.join(", ")} is/are not valid key(s) for VerifyParams.`)
              });
            }
            const invalidOpts = (0, utils_1.checkInvalidKeys)(opts, types_1.VerifyOptsKeys);
            if (invalidParams.length > 0) {
              fail({
                success: false,
                data: this,
                error: new Error(`${invalidOpts.join(", ")} is/are not valid key(s) for VerifyOpts.`)
              });
            }
            const { signature, scheme, domain, nonce, time } = params;
            if (scheme && scheme !== this.scheme) {
              fail({
                success: false,
                data: this,
                error: new types_1.SiweError(types_1.SiweErrorType.SCHEME_MISMATCH, scheme, this.scheme)
              });
            }
            if (domain && domain !== this.domain) {
              fail({
                success: false,
                data: this,
                error: new types_1.SiweError(types_1.SiweErrorType.DOMAIN_MISMATCH, domain, this.domain)
              });
            }
            if (nonce && nonce !== this.nonce) {
              fail({
                success: false,
                data: this,
                error: new types_1.SiweError(types_1.SiweErrorType.NONCE_MISMATCH, nonce, this.nonce)
              });
            }
            const checkTime = new Date(time || /* @__PURE__ */ new Date());
            if (this.expirationTime) {
              const expirationDate = new Date(this.expirationTime);
              if (checkTime.getTime() >= expirationDate.getTime()) {
                fail({
                  success: false,
                  data: this,
                  error: new types_1.SiweError(types_1.SiweErrorType.EXPIRED_MESSAGE, `${checkTime.toISOString()} < ${expirationDate.toISOString()}`, `${checkTime.toISOString()} >= ${expirationDate.toISOString()}`)
                });
              }
            }
            if (this.notBefore) {
              const notBefore = new Date(this.notBefore);
              if (checkTime.getTime() < notBefore.getTime()) {
                fail({
                  success: false,
                  data: this,
                  error: new types_1.SiweError(types_1.SiweErrorType.NOT_YET_VALID_MESSAGE, `${checkTime.toISOString()} >= ${notBefore.toISOString()}`, `${checkTime.toISOString()} < ${notBefore.toISOString()}`)
                });
              }
            }
            let EIP4361Message;
            try {
              EIP4361Message = this.prepareMessage();
            } catch (e) {
              fail({
                success: false,
                data: this,
                error: e
              });
            }
            let addr;
            try {
              addr = (0, ethersCompat_1.verifyMessage)(EIP4361Message, signature);
            } catch (e) {
              console.error(e);
            }
            if (addr === this.address) {
              return resolve({
                success: true,
                data: this
              });
            } else {
              const EIP1271Promise = (0, utils_1.checkContractWalletSignature)(this, signature, opts.provider).then((isValid) => {
                if (!isValid) {
                  return {
                    success: false,
                    data: this,
                    error: new types_1.SiweError(types_1.SiweErrorType.INVALID_SIGNATURE, addr, `Resolved address to be ${this.address}`)
                  };
                }
                return {
                  success: true,
                  data: this
                };
              }).catch((error) => {
                return {
                  success: false,
                  data: this,
                  error
                };
              });
              Promise.all([
                EIP1271Promise,
                (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.verificationFallback) === null || _a === void 0 ? void 0 : _a.call(opts, params, opts, this, EIP1271Promise)) === null || _b === void 0 ? void 0 : _b.then((res) => res)) === null || _c === void 0 ? void 0 : _c.catch((res) => res)
              ]).then(([EIP1271Response, fallbackResponse]) => {
                if (fallbackResponse) {
                  if (fallbackResponse.success) {
                    return resolve(fallbackResponse);
                  } else {
                    fail(fallbackResponse);
                  }
                } else {
                  if (EIP1271Response.success) {
                    return resolve(EIP1271Response);
                  } else {
                    fail(EIP1271Response);
                  }
                }
              });
            }
          });
        });
      }
      /**
       * Validates the values of this object fields.
       * @throws Throws an {ErrorType} if a field is invalid.
       */
      validateMessage(...args) {
        var _a;
        if (args.length > 0) {
          throw new types_1.SiweError(types_1.SiweErrorType.UNABLE_TO_PARSE, `Unexpected argument in the validateMessage function.`);
        }
        if (!this.domain || this.domain.length === 0 || !/[^#?]*/.test(this.domain)) {
          throw new types_1.SiweError(types_1.SiweErrorType.INVALID_DOMAIN, `${this.domain} to be a valid domain.`);
        }
        if (!(0, siwe_parser_1.isEIP55Address)(this.address)) {
          throw new types_1.SiweError(types_1.SiweErrorType.INVALID_ADDRESS, (0, ethersCompat_1.getAddress)(this.address), this.address);
        }
        if (!uri.isUri(this.uri)) {
          throw new types_1.SiweError(types_1.SiweErrorType.INVALID_URI, `${this.uri} to be a valid uri.`);
        }
        if (this.version !== "1") {
          throw new types_1.SiweError(types_1.SiweErrorType.INVALID_MESSAGE_VERSION, "1", this.version);
        }
        const nonce = (_a = this === null || this === void 0 ? void 0 : this.nonce) === null || _a === void 0 ? void 0 : _a.match(/[a-zA-Z0-9]{8,}/);
        if (!nonce || this.nonce.length < 8 || nonce[0] !== this.nonce) {
          throw new types_1.SiweError(types_1.SiweErrorType.INVALID_NONCE, `Length > 8 (${nonce.length}). Alphanumeric.`, this.nonce);
        }
        if (this.issuedAt) {
          if (!(0, utils_1.isValidISO8601Date)(this.issuedAt)) {
            throw new Error(types_1.SiweErrorType.INVALID_TIME_FORMAT);
          }
        }
        if (this.expirationTime) {
          if (!(0, utils_1.isValidISO8601Date)(this.expirationTime)) {
            throw new Error(types_1.SiweErrorType.INVALID_TIME_FORMAT);
          }
        }
        if (this.notBefore) {
          if (!(0, utils_1.isValidISO8601Date)(this.notBefore)) {
            throw new Error(types_1.SiweErrorType.INVALID_TIME_FORMAT);
          }
        }
      }
    };
    exports.SiweMessage = SiweMessage2;
  }
});

// node_modules/siwe/dist/siwe.js
var require_siwe = __commonJS({
  "node_modules/siwe/dist/siwe.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_client(), exports);
    __exportStar2(require_types(), exports);
    __exportStar2(require_utils6(), exports);
  }
});

// node_modules/@farcaster/auth-client/dist/index.mjs
var import_siwe = __toESM(require_siwe(), 1);

// node_modules/neverthrow/dist/index.es.js
var defaultErrorConfig = {
  withStackTrace: false
};
var createNeverThrowError = (message, result, config = defaultErrorConfig) => {
  const data = result.isOk() ? { type: "Ok", value: result.value } : { type: "Err", value: result.error };
  const maybeStack = config.withStackTrace ? new Error().stack : void 0;
  return {
    data,
    message,
    stack: maybeStack
  };
};
function __awaiter2(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __values2(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __await2(v) {
  return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
}
function __asyncGenerator2(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q2 = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q2.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q2[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q2[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q2.shift(), q2.length)
      resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator2(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues2(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
var ResultAsync = class _ResultAsync {
  constructor(res) {
    this._promise = res;
  }
  static fromSafePromise(promise) {
    const newPromise = promise.then((value) => new Ok(value));
    return new _ResultAsync(newPromise);
  }
  static fromPromise(promise, errorFn) {
    const newPromise = promise.then((value) => new Ok(value)).catch((e) => new Err(errorFn(e)));
    return new _ResultAsync(newPromise);
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  static fromThrowable(fn2, errorFn) {
    return (...args) => {
      return new _ResultAsync((() => __awaiter2(this, void 0, void 0, function* () {
        try {
          return new Ok(yield fn2(...args));
        } catch (error) {
          return new Err(errorFn ? errorFn(error) : error);
        }
      }))());
    };
  }
  static combine(asyncResultList) {
    return combineResultAsyncList(asyncResultList);
  }
  static combineWithAllErrors(asyncResultList) {
    return combineResultAsyncListWithAllErrors(asyncResultList);
  }
  map(f) {
    return new _ResultAsync(this._promise.then((res) => __awaiter2(this, void 0, void 0, function* () {
      if (res.isErr()) {
        return new Err(res.error);
      }
      return new Ok(yield f(res.value));
    })));
  }
  mapErr(f) {
    return new _ResultAsync(this._promise.then((res) => __awaiter2(this, void 0, void 0, function* () {
      if (res.isOk()) {
        return new Ok(res.value);
      }
      return new Err(yield f(res.error));
    })));
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
  andThen(f) {
    return new _ResultAsync(this._promise.then((res) => {
      if (res.isErr()) {
        return new Err(res.error);
      }
      const newValue = f(res.value);
      return newValue instanceof _ResultAsync ? newValue._promise : newValue;
    }));
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
  orElse(f) {
    return new _ResultAsync(this._promise.then((res) => __awaiter2(this, void 0, void 0, function* () {
      if (res.isErr()) {
        return f(res.error);
      }
      return new Ok(res.value);
    })));
  }
  match(ok2, _err) {
    return this._promise.then((res) => res.match(ok2, _err));
  }
  unwrapOr(t) {
    return this._promise.then((res) => res.unwrapOr(t));
  }
  /**
   * Emulates Rust's `?` operator in `safeTry`'s body. See also `safeTry`.
   */
  safeUnwrap() {
    return __asyncGenerator2(this, arguments, function* safeUnwrap_1() {
      return yield __await2(yield __await2(yield* __asyncDelegator2(__asyncValues2(yield __await2(this._promise.then((res) => res.safeUnwrap()))))));
    });
  }
  // Makes ResultAsync implement PromiseLike<Result>
  then(successCallback, failureCallback) {
    return this._promise.then(successCallback, failureCallback);
  }
};
var errAsync = (err2) => new ResultAsync(Promise.resolve(new Err(err2)));
var fromPromise = ResultAsync.fromPromise;
var fromSafePromise = ResultAsync.fromSafePromise;
var fromAsyncThrowable = ResultAsync.fromThrowable;
var combineResultList = (resultList) => {
  let acc = ok([]);
  for (const result of resultList) {
    if (result.isErr()) {
      acc = err(result.error);
      break;
    } else {
      acc.map((list) => list.push(result.value));
    }
  }
  return acc;
};
var combineResultAsyncList = (asyncResultList) => ResultAsync.fromSafePromise(Promise.all(asyncResultList)).andThen(combineResultList);
var combineResultListWithAllErrors = (resultList) => {
  let acc = ok([]);
  for (const result of resultList) {
    if (result.isErr() && acc.isErr()) {
      acc.error.push(result.error);
    } else if (result.isErr() && acc.isOk()) {
      acc = err([result.error]);
    } else if (result.isOk() && acc.isOk()) {
      acc.value.push(result.value);
    }
  }
  return acc;
};
var combineResultAsyncListWithAllErrors = (asyncResultList) => ResultAsync.fromSafePromise(Promise.all(asyncResultList)).andThen(combineResultListWithAllErrors);
var Result;
(function(Result2) {
  function fromThrowable2(fn2, errorFn) {
    return (...args) => {
      try {
        const result = fn2(...args);
        return ok(result);
      } catch (e) {
        return err(errorFn ? errorFn(e) : e);
      }
    };
  }
  Result2.fromThrowable = fromThrowable2;
  function combine(resultList) {
    return combineResultList(resultList);
  }
  Result2.combine = combine;
  function combineWithAllErrors(resultList) {
    return combineResultListWithAllErrors(resultList);
  }
  Result2.combineWithAllErrors = combineWithAllErrors;
})(Result || (Result = {}));
var ok = (value) => new Ok(value);
var err = (err2) => new Err(err2);
var Ok = class {
  constructor(value) {
    this.value = value;
  }
  isOk() {
    return true;
  }
  isErr() {
    return !this.isOk();
  }
  map(f) {
    return ok(f(this.value));
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  mapErr(_f) {
    return ok(this.value);
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
  andThen(f) {
    return f(this.value);
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
  orElse(_f) {
    return ok(this.value);
  }
  asyncAndThen(f) {
    return f(this.value);
  }
  asyncMap(f) {
    return ResultAsync.fromSafePromise(f(this.value));
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  unwrapOr(_v) {
    return this.value;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  match(ok2, _err) {
    return ok2(this.value);
  }
  safeUnwrap() {
    const value = this.value;
    return function* () {
      return value;
    }();
  }
  _unsafeUnwrap(_) {
    return this.value;
  }
  _unsafeUnwrapErr(config) {
    throw createNeverThrowError("Called `_unsafeUnwrapErr` on an Ok", this, config);
  }
};
var Err = class {
  constructor(error) {
    this.error = error;
  }
  isOk() {
    return false;
  }
  isErr() {
    return !this.isOk();
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  map(_f) {
    return err(this.error);
  }
  mapErr(f) {
    return err(f(this.error));
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
  andThen(_f) {
    return err(this.error);
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
  orElse(f) {
    return f(this.error);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  asyncAndThen(_f) {
    return errAsync(this.error);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  asyncMap(_f) {
    return errAsync(this.error);
  }
  unwrapOr(v) {
    return v;
  }
  match(_ok, err2) {
    return err2(this.error);
  }
  safeUnwrap() {
    const error = this.error;
    return function* () {
      yield err(error);
      throw new Error("Do not use this generator out of `safeTry`");
    }();
  }
  _unsafeUnwrap(config) {
    throw createNeverThrowError("Called `_unsafeUnwrap` on an Err", this, config);
  }
  _unsafeUnwrapErr(_) {
    return this.error;
  }
};
var fromThrowable = Result.fromThrowable;

// node_modules/@farcaster/auth-client/dist/index.mjs
var import_siwe2 = __toESM(require_siwe(), 1);
var import_siwe3 = __toESM(require_siwe(), 1);
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField2 = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var AuthClientError = class extends Error {
  /**
   * @param errCode - the AuthClientError code for this message
   * @param context - a message, another Error, or a AuthClientErrorOpts
   */
  constructor(errCode, context) {
    var _a;
    let parsedContext;
    if (typeof context === "string") {
      parsedContext = { message: context };
    } else if (context instanceof Error) {
      parsedContext = { cause: context, message: context.message };
    } else {
      parsedContext = context;
    }
    if (!parsedContext.message) {
      parsedContext.message = ((_a = parsedContext.cause) == null ? void 0 : _a.message) || "";
    }
    super(parsedContext.message, { cause: parsedContext.cause });
    __publicField2(this, "errCode");
    __publicField2(this, "presentable", false);
    this.name = "AuthClientError";
    this.errCode = errCode;
  }
};
var unwrap = (result) => {
  if (result.isErr()) {
    return { error: result.error, isError: true };
  } else {
    return { ...result.value, isError: false };
  }
};
var defaultPollOpts = {
  interval: 1e3,
  timeout: 1e4,
  successCode: 200,
  onResponse: () => {
  }
};
var get = async (client, path5, opts) => {
  return ResultAsync.fromPromise(
    fetch(getURI(client, path5), {
      headers: getHeaders(opts)
    }),
    (e) => {
      return new AuthClientError("unknown", e);
    }
  ).andThen((response) => {
    return ResultAsync.fromPromise(response.json(), (e) => {
      return new AuthClientError("unknown", e);
    }).andThen((data) => {
      return ok({ response, data });
    });
  });
};
var post = async (client, path5, json, opts) => {
  return ResultAsync.fromPromise(
    fetch(getURI(client, path5), {
      method: "POST",
      body: JSON.stringify(json),
      headers: getHeaders(opts)
    }),
    (e) => {
      return new AuthClientError("unknown", e);
    }
  ).andThen((response) => {
    return ResultAsync.fromPromise(response.json(), (e) => {
      return new AuthClientError("unknown", e);
    }).andThen((data) => {
      return ok({ response, data });
    });
  });
};
var poll = async (client, path5, pollOpts, opts) => {
  const { timeout, interval, successCode, onResponse } = {
    ...defaultPollOpts,
    ...pollOpts
  };
  const deadline = Date.now() + timeout;
  while (Date.now() < deadline) {
    const res = await get(client, path5, opts);
    if (res.isOk()) {
      const { response } = res.value;
      onResponse(res.value);
      if (response.status === successCode) {
        return ok(res.value);
      }
      await new Promise((resolve) => setTimeout(resolve, interval));
    } else {
      return err(res.error);
    }
  }
  return err(new AuthClientError("unavailable", `Polling timed out after ${timeout}ms`));
};
var getURI = (client, path5) => {
  return `${client.config.relay}/${client.config.version}/${path5}`;
};
var getHeaders = (opts) => {
  const headers = {
    ...opts == null ? void 0 : opts.headers
  };
  if (opts == null ? void 0 : opts.authToken) {
    headers["Authorization"] = `Bearer ${opts.authToken}`;
  }
  return { ...headers, "Content-Type": "application/json" };
};
var path = "channel";
var createChannel = async (client, { ...request }) => {
  const response = await post(client, path, request);
  return unwrap(response);
};
var path2 = "channel/status";
var status = async (client, { channelToken }) => {
  const response = await get(client, path2, {
    authToken: channelToken
  });
  return unwrap(response);
};
var STATEMENT = "Farcaster Auth";
var CHAIN_ID = 10;
var FID_URI_REGEX = /^farcaster:\/\/fid\/([1-9]\d*)\/?$/;
var validate = (params) => {
  return Result.fromThrowable(
    // SiweMessage validates itself when constructed
    () => new import_siwe3.SiweMessage(params),
    // If construction time validation fails, propagate the error
    (e) => new AuthClientError("bad_request.validation_failure", e)
  )().andThen(validateStatement).andThen(validateChainId).andThen(validateResources);
};
var parseResources = (message) => {
  const fid = parseFid(message);
  if (fid.isErr())
    return err(fid.error);
  return ok({ fid: fid.value });
};
var parseFid = (message) => {
  var _a;
  const resource = (message.resources ?? []).find((resource2) => {
    return FID_URI_REGEX.test(resource2);
  });
  if (!resource) {
    return err(new AuthClientError("bad_request.validation_failure", "No fid resource provided"));
  }
  const fid = parseInt(((_a = resource.match(FID_URI_REGEX)) == null ? void 0 : _a[1]) ?? "");
  if (isNaN(fid)) {
    return err(new AuthClientError("bad_request.validation_failure", "Invalid fid"));
  }
  return ok(fid);
};
var validateStatement = (message) => {
  const validStatement = message.statement === STATEMENT || message.statement === "Farcaster Connect";
  if (!validStatement) {
    return err(new AuthClientError("bad_request.validation_failure", `Statement must be '${STATEMENT}'`));
  }
  return ok(message);
};
var validateChainId = (message) => {
  if (message.chainId !== CHAIN_ID) {
    return err(new AuthClientError("bad_request.validation_failure", `Chain ID must be ${CHAIN_ID}`));
  }
  return ok(message);
};
var validateResources = (message) => {
  const fidResources = (message.resources ?? []).filter((resource) => {
    return FID_URI_REGEX.test(resource);
  });
  if (fidResources.length === 0) {
    return err(new AuthClientError("bad_request.validation_failure", "No fid resource provided"));
  } else if (fidResources.length > 1) {
    return err(new AuthClientError("bad_request.validation_failure", "Multiple fid resources provided"));
  } else {
    return ok(message);
  }
};
var voidVerifyFid = (_custody) => Promise.reject(new Error("Not implemented: Must provide an fid verifier"));
var verify = async (nonce, domain, message, signature, options = {
  getFid: voidVerifyFid
}) => {
  var _a, _b;
  const { getFid, provider } = options;
  const valid = validate(message).andThen((message2) => validateNonce(message2, nonce)).andThen((message2) => validateDomain(message2, domain));
  if (valid.isErr())
    return err(valid.error);
  const siwe = (await verifySiweMessage(valid.value, signature, provider)).andThen(mergeResources);
  if (siwe.isErr())
    return err(siwe.error);
  if (!siwe.value.success) {
    const errMessage = ((_a = siwe.value.error) == null ? void 0 : _a.type) ?? "Failed to verify SIWE message";
    return err(new AuthClientError("unauthorized", errMessage));
  }
  const fid = await verifyFidOwner(siwe.value, getFid);
  if (fid.isErr())
    return err(fid.error);
  if (!fid.value.success) {
    const errMessage = ((_b = siwe.value.error) == null ? void 0 : _b.type) ?? "Failed to validate fid owner";
    return err(new AuthClientError("unauthorized", errMessage));
  }
  const { error, ...response } = fid.value;
  return ok(response);
};
var validateNonce = (message, nonce) => {
  if (message.nonce !== nonce) {
    return err(new AuthClientError("unauthorized", "Invalid nonce"));
  } else {
    return ok(message);
  }
};
var validateDomain = (message, domain) => {
  if (message.domain !== domain) {
    return err(new AuthClientError("unauthorized", "Invalid domain"));
  } else {
    return ok(message);
  }
};
var verifySiweMessage = async (message, signature, provider) => {
  return ResultAsync.fromPromise(message.verify({ signature }, { provider, suppressExceptions: true }), (e) => {
    return new AuthClientError("unauthorized", e);
  });
};
var verifyFidOwner = async (response, fidVerifier) => {
  const signer = response.data.address;
  return ResultAsync.fromPromise(fidVerifier(signer), (e) => {
    return new AuthClientError("unavailable", e);
  }).andThen((fid) => {
    if (fid !== BigInt(response.fid)) {
      response.success = false;
      response.error = new import_siwe2.SiweError(
        `Invalid resource: signer ${signer} does not own fid ${response.fid}.`,
        response.fid.toString(),
        fid.toString()
      );
    }
    return ok(response);
  });
};
var mergeResources = (response) => {
  return parseResources(response.data).andThen((resources) => {
    return ok({ ...resources, ...response });
  });
};
var verifySignInMessage = async (client, { nonce, domain, message, signature }, provider) => {
  const result = await verify(nonce, domain, message, signature, {
    getFid: client.ethereum.getFid,
    provider
  });
  return unwrap(result);
};
var path3 = "channel/status";
var voidCallback = () => {
};
var watchStatus = async (client, args) => {
  const result = await poll(
    client,
    path3,
    {
      timeout: (args == null ? void 0 : args.timeout) ?? 3e5,
      interval: (args == null ? void 0 : args.interval) ?? 1e3,
      onResponse: (args == null ? void 0 : args.onResponse) ?? voidCallback
    },
    { authToken: args.channelToken }
  );
  return unwrap(result);
};
var path4 = "channel/authenticate";
var authenticate = async (client, { channelToken, authKey, ...request }) => {
  const result = await post(client, path4, request, {
    authToken: channelToken,
    headers: {
      "X-Farcaster-Auth-Relay-Key": authKey
    }
  });
  return unwrap(result);
};
var build = (params) => {
  const { fid, ...siweParams } = params;
  const resources = siweParams.resources ?? [];
  siweParams.version = "1";
  siweParams.statement = STATEMENT;
  siweParams.chainId = CHAIN_ID;
  siweParams.resources = [buildFidResource(fid), ...resources];
  const valid = validate(siweParams);
  if (valid.isErr())
    return err(valid.error);
  else {
    const siweMessage = valid.value;
    return ok({ siweMessage, message: siweMessage.toMessage() });
  }
};
var buildFidResource = (fid) => {
  return `farcaster://fid/${fid}`;
};
var buildSignInMessage = (_client, args) => {
  return unwrap(build(args));
};
var parseSignInURI = (signInUri) => {
  const url = new URL(signInUri);
  const searchParams = Object.fromEntries(url.searchParams.entries());
  const { channelToken } = searchParams;
  if (!channelToken) {
    return err(validationFail("No channel token provided"));
  }
  return ok({ channelToken });
};
var validationFail = (message) => {
  return new AuthClientError("bad_request.validation_failure", message);
};
var parseSignInURI2 = (_client, { uri }) => {
  return unwrap(parseSignInURI(uri));
};
var configDefaults = {
  relay: "https://relay.farcaster.xyz",
  version: "v1"
};
var createClient = ({ ethereum, ...config }) => {
  return {
    config: { ...configDefaults, ...config },
    ethereum
  };
};
var createAppClient = (config, provider) => {
  const client = createClient(config);
  return {
    ...client,
    createChannel: (args) => createChannel(client, args),
    status: (args) => status(client, args),
    watchStatus: (args) => watchStatus(client, args),
    verifySignInMessage: (args) => verifySignInMessage(client, args, provider)
  };
};
var createWalletClient = (config) => {
  const client = createClient(config);
  return {
    ...client,
    authenticate: (args) => authenticate(client, args),
    buildSignInMessage: (args) => buildSignInMessage(client, args),
    parseSignInURI: (args) => parseSignInURI2(client, args)
  };
};
var idRegistryABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_migrator",
        type: "address"
      },
      {
        internalType: "address",
        name: "_initialOwner",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "AlreadyMigrated",
    type: "error"
  },
  {
    inputs: [],
    name: "GatewayFrozen",
    type: "error"
  },
  {
    inputs: [],
    name: "HasId",
    type: "error"
  },
  {
    inputs: [],
    name: "HasNoId",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "currentNonce",
        type: "uint256"
      }
    ],
    name: "InvalidAccountNonce",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error"
  },
  {
    inputs: [],
    name: "OnlyGuardian",
    type: "error"
  },
  {
    inputs: [],
    name: "OnlyMigrator",
    type: "error"
  },
  {
    inputs: [],
    name: "PermissionRevoked",
    type: "error"
  },
  {
    inputs: [],
    name: "SignatureExpired",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string"
      }
    ],
    name: "StringTooLong",
    type: "error"
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "Add",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      }
    ],
    name: "AdminReset",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    name: "ChangeRecoveryAddress",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "idGateway",
        type: "address"
      }
    ],
    name: "FreezeIdGateway",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "migratedAt",
        type: "uint256"
      }
    ],
    name: "Migrated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "Recover",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    name: "Register",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "Remove",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldCounter",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newCounter",
        type: "uint256"
      }
    ],
    name: "SetIdCounter",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldIdGateway",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newIdGateway",
        type: "address"
      }
    ],
    name: "SetIdGateway",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldMigrator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newMigrator",
        type: "address"
      }
    ],
    name: "SetMigrator",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    inputs: [],
    name: "CHANGE_RECOVERY_ADDRESS_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "TRANSFER_AND_CHANGE_RECOVERY_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "TRANSFER_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "addGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint24",
            name: "fid",
            type: "uint24"
          },
          {
            internalType: "address",
            name: "custody",
            type: "address"
          },
          {
            internalType: "address",
            name: "recovery",
            type: "address"
          }
        ],
        internalType: "struct IIdRegistry.BulkRegisterData[]",
        name: "ids",
        type: "tuple[]"
      }
    ],
    name: "bulkRegisterIds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint24",
            name: "fid",
            type: "uint24"
          },
          {
            internalType: "address",
            name: "custody",
            type: "address"
          }
        ],
        internalType: "struct IIdRegistry.BulkRegisterDefaultRecoveryData[]",
        name: "ids",
        type: "tuple[]"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    name: "bulkRegisterIdsWithDefaultRecovery",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint24[]",
        name: "ids",
        type: "uint24[]"
      }
    ],
    name: "bulkResetIds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    name: "changeRecoveryAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "changeRecoveryAddressFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      }
    ],
    name: "custodyOf",
    outputs: [
      {
        internalType: "address",
        name: "custody",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "domainSeparatorV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1"
      },
      {
        internalType: "string",
        name: "name",
        type: "string"
      },
      {
        internalType: "string",
        name: "version",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32"
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "freezeIdGateway",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "gatewayFrozen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "gracePeriod",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "guardians",
    outputs: [
      {
        internalType: "bool",
        name: "isGuardian",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "structHash",
        type: "bytes32"
      }
    ],
    name: "hashTypedDataV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "idCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "idGateway",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "idOf",
    outputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "isMigrated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "migrate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "migratedAt",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "migrator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "recover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "recoveryDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "recoverySig",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "toDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "toSig",
        type: "bytes"
      }
    ],
    name: "recoverFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      }
    ],
    name: "recoveryOf",
    outputs: [
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    name: "register",
    outputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "removeGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_counter",
        type: "uint256"
      }
    ],
    name: "setIdCounter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_idGateway",
        type: "address"
      }
    ],
    name: "setIdGateway",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_migrator",
        type: "address"
      }
    ],
    name: "setMigrator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "transferAndChangeRecovery",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "fromDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "fromSig",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "toDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "toSig",
        type: "bytes"
      }
    ],
    name: "transferAndChangeRecoveryFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "fromDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "fromSig",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "toDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "toSig",
        type: "bytes"
      }
    ],
    name: "transferFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "useNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "custodyAddress",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "digest",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "verifyFidSignature",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var ID_REGISTRY_ADDRESS = "0x00000000Fc6c5F01Fc30151999387Bb99A9f489b";
var viemConnector = (args) => {
  const publicClient = createPublicClient({
    chain: optimism,
    transport: http(args == null ? void 0 : args.rpcUrl)
  });
  const getFid = async (custody) => {
    return publicClient.readContract({
      address: ID_REGISTRY_ADDRESS,
      abi: idRegistryABI,
      functionName: "idOf",
      args: [custody]
    });
  };
  return {
    getFid
  };
};

// node_modules/@farcaster/auth-kit/dist/auth-kit.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var I = __toESM(require_react());
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var Ne = typeof window < "u" && (window != null && window.location) ? {
  domain: window.location.host,
  siweUri: window.location.href
} : {};
var qt = {
  relay: "https://relay.farcaster.xyz",
  version: "v1",
  ...Ne
};
var Qt = (0, import_react.createContext)({
  isAuthenticated: false,
  config: qt,
  profile: {},
  signInMessage: {},
  onSignIn: () => {
  },
  onSignOut: () => {
  }
});
function Pe({
  config: t,
  children: e
}) {
  const [n, r] = (0, import_react.useState)(), [o, i] = (0, import_react.useState)(false), [a, c] = (0, import_react.useState)({}), [s, f] = (0, import_react.useState)({}), l = {
    ...qt,
    ...t
  }, { relay: y, rpcUrl: w, version: d, provider: g } = l;
  (0, import_react.useEffect)(() => {
    const h = w ? viemConnector({ rpcUrl: w }) : viemConnector(), p = createAppClient({
      relay: y,
      ethereum: h,
      version: d
    }, g);
    r(p);
  }, [y, w, d, g]);
  const u = (0, import_react.useCallback)((h) => {
    const { message: p, signature: v, fid: m, username: S, bio: B, displayName: b, pfpUrl: A, custody: M, verifications: N } = h;
    i(true), c({ fid: m, username: S, bio: B, displayName: b, pfpUrl: A, custody: M, verifications: N }), f({ message: p, signature: v });
  }, []), C = () => {
    i(false), c({}), f({});
  };
  return (0, import_jsx_runtime.jsx)(
    Qt.Provider,
    {
      value: {
        appClient: n,
        isAuthenticated: o,
        profile: a,
        signInMessage: s,
        config: l,
        onSignIn: u,
        onSignOut: C
      },
      children: e
    }
  );
}
function q() {
  return (0, import_react.useContext)(Qt);
}
function lt() {
  const { appClient: t } = q();
  return t;
}
function Te({
  nonce: t,
  notBefore: e,
  expirationTime: n,
  requestId: r,
  onSuccess: o,
  onError: i,
  redirectUrl: a
}) {
  const { config: c } = q(), { siweUri: s, domain: f } = c, l = lt(), [y, w] = (0, import_react.useState)(false), [d, g] = (0, import_react.useState)(), [u, C] = (0, import_react.useState)(), [h, p] = (0, import_react.useState)(), [v, m] = (0, import_react.useState)(false), [S, B] = (0, import_react.useState)(false), [b, A] = (0, import_react.useState)(), M = (0, import_react.useCallback)(async () => {
    if (y && l && s && f && !d) {
      const _ = typeof t == "function" ? await t() : t, {
        data: mt,
        isError: vt,
        error: X
      } = await l.createChannel({
        nonce: _,
        siweUri: s,
        domain: f,
        notBefore: e,
        expirationTime: n,
        requestId: r,
        redirectUrl: a
      });
      if (vt)
        B(true), A(X), i == null || i(X);
      else {
        const { channelToken: tt, url: Zt, nonce: Dt } = mt;
        g(tt), C(Zt), p(Dt), m(true), o == null || o({ channelToken: tt, url: Zt, nonce: Dt });
      }
    }
  }, [
    y,
    l,
    s,
    f,
    d,
    t,
    e,
    n,
    r,
    i,
    o,
    a
  ]);
  (0, import_react.useEffect)(() => {
    M();
  }, [M]);
  const N = (0, import_react.useCallback)(async () => {
    w(true);
  }, [w]), k = (0, import_react.useCallback)(() => {
    g(void 0), C(void 0), m(false), B(false), A(void 0);
  }, [g, C, m, B, A]), L = (0, import_react.useCallback)(() => {
    k(), N();
  }, [N, k]);
  return {
    connect: N,
    reconnect: L,
    reset: k,
    isSuccess: v,
    isError: S,
    error: b,
    data: { channelToken: d, url: u, nonce: h }
  };
}
function Re({
  nonce: t,
  domain: e,
  message: n,
  signature: r,
  onSuccess: o,
  onError: i
}) {
  const a = lt(), [c, s] = (0, import_react.useState)(false), [f, l] = (0, import_react.useState)(false), [y, w] = (0, import_react.useState)(false), [d, g] = (0, import_react.useState)(), u = async () => {
    w(false), l(false), s(false), g(void 0);
  }, C = (0, import_react.useCallback)(async () => {
    if (a && t && e && n && r) {
      const {
        success: h,
        isError: p,
        error: v
      } = await a.verifySignInMessage({
        nonce: t,
        domain: e,
        message: n,
        signature: r
      });
      p ? (w(true), g(v), i == null || i(v)) : (s(h), l(true), o == null || o({ message: n, signature: r, validSignature: h }));
    }
  }, [a, t, e, n, r, o, i]);
  return (0, import_react.useEffect)(() => {
    u(), t && e && n && r && C();
  }, [t, e, n, r, C]), {
    isSuccess: f,
    isError: y,
    error: d,
    data: { message: n, signature: r, validSignature: c }
  };
}
var ke = {
  timeout: 3e5,
  interval: 1500
};
function Le(t) {
  const e = lt(), { channelToken: n, timeout: r, interval: o, onSuccess: i, onError: a, onResponse: c } = {
    ...ke,
    ...t
  }, [s, f] = (0, import_react.useState)(), [l, y] = (0, import_react.useState)(false), [w, d] = (0, import_react.useState)(false), [g, u] = (0, import_react.useState)(false), [C, h] = (0, import_react.useState)(false), [p, v] = (0, import_react.useState)(), m = () => {
    f(void 0), y(false), h(false), d(false), v(void 0);
  }, S = () => {
    y(true);
  }, B = (0, import_react.useCallback)(async () => {
    if (l && e && n) {
      u(true);
      const {
        data: b,
        isError: A,
        error: M
      } = await e.watchStatus({
        channelToken: n,
        timeout: r,
        interval: o,
        onResponse: ({ data: N }) => {
          f(N), c == null || c(N);
        }
      });
      A ? (h(true), u(false), v(M), a == null || a(M)) : (d(true), u(false), f(b), i == null || i(b));
    }
  }, [l, e, n, r, o, i, a, c]);
  return (0, import_react.useEffect)(() => {
    m(), n && B();
  }, [n, B]), {
    watch: S,
    isSuccess: w,
    isPolling: g,
    isError: C,
    error: p,
    data: s
  };
}
var _e = {
  timeout: 3e5,
  interval: 1500
};
function Fe(t) {
  const e = lt(), {
    onSignIn: n,
    onSignOut: r,
    config: { domain: o, redirectUrl: i }
  } = q(), { timeout: a, interval: c, onSuccess: s, onStatusResponse: f, onError: l, ...y } = {
    ..._e,
    ...t
  }, {
    connect: w,
    reconnect: d,
    reset: g,
    data: { channelToken: u, url: C, nonce: h },
    isSuccess: p,
    isError: v,
    error: m
  } = Te({ ...y, redirectUrl: i, onError: l }), {
    watch: S,
    isPolling: B,
    data: b,
    isError: A,
    error: M
  } = Le({
    channelToken: u,
    timeout: a,
    interval: c,
    onError: l,
    onResponse: f
  }), {
    isSuccess: N,
    data: { validSignature: k },
    isError: L,
    error: _
  } = Re({
    nonce: h,
    domain: o,
    message: b == null ? void 0 : b.message,
    signature: b == null ? void 0 : b.signature,
    onError: l
  }), mt = v || A || L, vt = m || M || _, X = (0, import_react.useCallback)(() => {
    S();
  }, [S]), tt = (0, import_react.useCallback)(() => {
    r(), g();
  }, [r, g]);
  return (0, import_react.useEffect)(() => {
    N && b && k && (n(b), s == null || s(b));
  }, [N, b, k, n, s]), {
    signIn: X,
    signOut: tt,
    connect: w,
    reconnect: d,
    isConnected: p,
    isSuccess: N,
    isPolling: B,
    isError: mt,
    error: vt,
    channelToken: u,
    url: C,
    appClient: e,
    data: b,
    validSignature: k
  };
}
function Ze({
  height: t,
  fill: e
}) {
  const n = t * 1.1;
  return (0, import_jsx_runtime.jsxs)(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      width: n,
      height: t,
      viewBox: "0 0 22 20",
      fill: "none",
      children: [
        (0, import_jsx_runtime.jsx)("title", { children: "Farcaster logo" }),
        (0, import_jsx_runtime.jsxs)("g", { fill: Vt[e], clipPath: "url(#a)", children: [
          (0, import_jsx_runtime.jsx)("path", { d: "M3.786.05h14.156v2.824h4.025l-.844 2.825h-.714v11.427c.358 0 .65.287.65.642v.77h.13c.358 0 .649.288.649.642v.77h-7.273v-.77c0-.354.29-.642.65-.642h.13v-.77c0-.309.22-.566.512-.628l-.014-6.306c-.23-2.519-2.37-4.493-4.98-4.493-2.608 0-4.75 1.974-4.979 4.494l-.013 6.3c.346.05.772.315.772.633v.77h.13c.358 0 .65.288.65.642v.77H.15v-.77c0-.354.29-.642.649-.642h.13v-.77c0-.355.29-.642.65-.642V5.7H.863L.02 2.874h3.766V.05Z" }),
          (0, import_jsx_runtime.jsx)("path", { d: "M17.942.05h.047V.003h-.047V.05ZM3.786.05V.003H3.74V.05h.047Zm14.156 2.824h-.048v.047h.048v-.047Zm4.025 0 .046.013.018-.06h-.064v.047Zm-.844 2.824v.047h.035l.01-.033-.045-.014Zm-.714 0v-.046h-.047v.046h.047Zm0 11.428h-.047v.047h.047v-.047Zm.65 1.412h-.048v.047h.047v-.047Zm.779 1.412v.047h.046v-.047h-.046Zm-7.273 0h-.048v.047h.048v-.047Zm.78-1.412v.047h.047v-.047h-.048Zm.512-1.398.01.045.038-.007v-.038h-.048Zm-.014-6.306h.048v-.004l-.048.004Zm-9.959 0-.047-.004v.004h.047Zm-.013 6.3h-.048v.041l.04.006.008-.047Zm.772 1.404h-.047v.047h.047v-.047Zm.78 1.412v.047h.047v-.047h-.048Zm-7.273 0H.102v.047H.15v-.047Zm.779-1.412v.047h.047v-.047H.93Zm.65-1.412v.047h.047v-.047h-.047Zm0-11.428h.047v-.046h-.047v.046Zm-.715 0-.045.014.01.033h.035v-.047ZM.02 2.874v-.047h-.063l.018.06.045-.013Zm3.766 0v.047h.048v-.047h-.048ZM17.942.003H3.786v.093h14.156V.003Zm.047 2.87V.05h-.095v2.824h.095Zm3.978-.046h-4.025v.094h4.025v-.094Zm-.798 2.885.844-2.825-.091-.026-.845 2.824.092.027Zm-.76.033h.714v-.093h-.714v.093Zm.048 11.381V5.698h-.095v11.428h.095Zm.649.641a.693.693 0 0 0-.697-.688v.094c.332 0 .602.266.602.595h.095Zm0 .77v-.77h-.095v.77h.095Zm.082-.045h-.13v.093h.13v-.093Zm.697.688a.692.692 0 0 0-.697-.688v.093c.333 0 .602.267.602.595h.095Zm0 .77v-.77h-.095v.77h.095Zm-3.943.047h3.896v-.094h-3.896v.094Zm-2.079 0h2.079v-.094h-2.079v.094Zm-1.298 0h1.298v-.094h-1.298v.094Zm-.048-.817v.77h.095v-.77h-.095Zm.697-.688a.693.693 0 0 0-.697.688h.095c0-.328.27-.595.602-.595v-.093Zm.13 0h-.13v.093h.13v-.093Zm-.047-.725v.77h.095v-.77h-.095Zm.55-.673a.69.69 0 0 0-.55.673h.095c0-.285.203-.524.476-.582l-.02-.09Zm-.051-6.26.014 6.306h.095l-.014-6.306h-.095Zm-4.932-4.447c2.583 0 4.704 1.956 4.932 4.452l.094-.009c-.232-2.543-2.393-4.536-5.026-4.536v.093ZM5.932 10.84c.227-2.496 2.348-4.452 4.932-4.452v-.093c-2.633 0-4.795 1.993-5.027 4.536l.095.008Zm-.014 6.295.014-6.3h-.095l-.014 6.3h.095Zm.773.633c0-.18-.12-.337-.276-.453a1.236 1.236 0 0 0-.538-.226l-.014.093c.166.025.351.1.495.207.145.108.238.241.238.38h.095Zm0 .77v-.77h-.095v.77h.095Zm.082-.045h-.13v.093h.13v-.093Zm.697.688a.693.693 0 0 0-.697-.688v.093c.332 0 .602.267.602.595h.095Zm0 .77v-.77h-.095v.77h.095Zm-1.606.047h1.558v-.094H5.864v.094Zm-.108 0h.108v-.094h-.108v.094Zm-1.97 0h1.97v-.094h-1.97v.094Zm-3.636 0h3.636v-.094H.15v.094Zm-.048-.817v.77h.095v-.77H.102Zm.697-.688a.693.693 0 0 0-.697.688h.095c0-.328.27-.595.602-.595v-.093Zm.13 0h-.13v.093h.13v-.093Zm-.048-.725v.77h.095v-.77H.881Zm.698-.688a.693.693 0 0 0-.698.688h.095c0-.328.27-.594.603-.594v-.094ZM1.53 5.7v11.427h.095V5.698h-.095Zm-.667.046h.715v-.093H.864v.093Zm-.89-2.858L.82 5.712l.09-.027-.844-2.824-.09.026Zm3.812-.06H.02v.094h3.766v-.094ZM3.74.05v2.824h.095V.05h-.095Z" })
        ] }),
        (0, import_jsx_runtime.jsx)("defs", { children: (0, import_jsx_runtime.jsx)("clipPath", { id: "a", children: (0, import_jsx_runtime.jsx)("path", { fill: Vt[e], d: "M0 0h22v20H0z" }) }) })
      ]
    }
  );
}
var Vt = {
  purple: "#7C65C1",
  white: "#FFFFFF"
};
var De = "_1n3pr301";
var Ue = "_1n3pr305";
var Ve = "_1n3pr304";
var He = "_1n3pr300";
var Tt = "_1n3pr302";
var xe = "_1n3pr303";
function Gt({ kind: t = "primary", children: e, className: n, ...r }) {
  return (0, import_jsx_runtime.jsx)("button", { type: "button", className: ze[t] || n, ...r, children: e });
}
var ze = {
  primary: De,
  secondary: Tt,
  tertiary: xe,
  reset: He
};
function Oe({
  label: t,
  onClick: e,
  initializing: n
}) {
  return (0, import_jsx_runtime.jsxs)(Gt, { kind: "primary", onClick: e, disabled: n, children: [
    (0, import_jsx_runtime.jsx)(Ze, { height: 20, fill: "white" }),
    (0, import_jsx_runtime.jsx)("span", { style: { marginLeft: 9 }, children: t })
  ] });
}
function Ke(t, e) {
  (0, import_react.useEffect)(() => {
    function n(r) {
      t.current && !t.current.contains(r.target) && e();
    }
    return document.addEventListener("mousedown", n), () => {
      document.removeEventListener("mousedown", n);
    };
  }, [t, e]);
}
var Ye = "_1rbg3ua1";
var $e = "_1rbg3ua2";
var je = "_1rbg3ua3";
var Je = "_16wbil70";
var We = "_16wbil71";
function qe({ signOut: t }) {
  return (0, import_jsx_runtime.jsx)("div", { className: Je, children: (0, import_jsx_runtime.jsxs)(
    "button",
    {
      type: "button",
      className: Tt,
      style: {
        boxShadow: "0px 6px 12px 0 rgba(0,0,0,0.12)"
      },
      onClick: t,
      children: [
        (0, import_jsx_runtime.jsxs)(
          "svg",
          {
            width: "19",
            height: "20",
            viewBox: "0 0 19 20",
            fill: "none",
            xmlns: "http://www.w3.org/2000/svg",
            className: We,
            children: [
              (0, import_jsx_runtime.jsx)("title", { children: "Sign Out" }),
              (0, import_jsx_runtime.jsx)(
                "path",
                {
                  d: "M11.75 7V3.25C11.75 2.65326 11.5129 2.08097 11.091 1.65901C10.669 1.23705 10.0967 1 9.5 1H3.5C2.90326 1 2.33097 1.23705 1.90901 1.65901C1.48705 2.08097 1.25 2.65326 1.25 3.25V16.75C1.25 17.3467 1.48705 17.919 1.90901 18.341C2.33097 18.7629 2.90326 19 3.5 19H9.5C10.0967 19 10.669 18.7629 11.091 18.341C11.5129 17.919 11.75 17.3467 11.75 16.75V13M14.75 13L17.75 10M17.75 10L14.75 7M17.75 10H5",
                  stroke: "black",
                  strokeWidth: "1.5",
                  strokeLinecap: "round",
                  strokeLinejoin: "round"
                }
              )
            ]
          }
        ),
        "Sign out"
      ]
    }
  ) });
}
function Qe({
  userData: t,
  signOut: e,
  hideSignOut: n
}) {
  const [r, o] = (0, import_react.useState)(false), i = (0, import_react.useRef)(null);
  Ke(i, () => o(false));
  const a = (t == null ? void 0 : t.username) ?? `!${t == null ? void 0 : t.fid}`, c = (t == null ? void 0 : t.pfpUrl) ?? "https://warpcast.com/avatar.png", s = r && !n;
  return (0, import_jsx_runtime.jsx)(
    "div",
    {
      className: `fc-authkit-profile-button ${Ye}`,
      ref: i,
      children: (0, import_jsx_runtime.jsxs)(
        "div",
        {
          style: {
            display: "flex",
            flexDirection: "column",
            alignItems: "flex-end"
          },
          children: [
            (0, import_jsx_runtime.jsxs)(
              "button",
              {
                type: "button",
                className: Tt,
                onClick: () => o(!r),
                children: [
                  (0, import_jsx_runtime.jsx)("img", { className: $e, src: c, alt: "avatar" }),
                  (0, import_jsx_runtime.jsx)("span", { className: je, children: a }),
                  !n && (0, import_jsx_runtime.jsxs)(
                    "svg",
                    {
                      width: "24",
                      height: "24",
                      viewBox: "0 0 24 24",
                      fill: "none",
                      xmlns: "http://www.w3.org/2000/svg",
                      children: [
                        (0, import_jsx_runtime.jsx)("title", { children: "Dropdown" }),
                        (0, import_jsx_runtime.jsx)("g", { opacity: "0.5", children: (0, import_jsx_runtime.jsx)(
                          "path",
                          {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M6.26418 9.864C6.43293 9.69545 6.66168 9.60079 6.90018 9.60079C7.13869 9.60079 7.36743 9.69545 7.53618 9.864L12.0002 14.328L16.4642 9.864C16.5466 9.77557 16.6459 9.70465 16.7563 9.65546C16.8667 9.60627 16.9859 9.57982 17.1068 9.57769C17.2276 9.57555 17.3476 9.59778 17.4597 9.64305C17.5718 9.68831 17.6736 9.75569 17.759 9.84115C17.8445 9.92661 17.9119 10.0284 17.9571 10.1405C18.0024 10.2525 18.0246 10.3726 18.0225 10.4934C18.0204 10.6143 17.9939 10.7334 17.9447 10.8438C17.8955 10.9542 17.8246 11.0536 17.7362 11.136L12.6362 16.236C12.4674 16.4045 12.2387 16.4992 12.0002 16.4992C11.7617 16.4992 11.5329 16.4045 11.3642 16.236L6.26418 11.136C6.09564 10.9672 6.00098 10.7385 6.00098 10.5C6.00098 10.2615 6.09564 10.0327 6.26418 9.864Z",
                            fill: "black"
                          }
                        ) })
                      ]
                    }
                  )
                ]
              }
            ),
            s && (0, import_jsx_runtime.jsx)(qe, { signOut: e })
          ]
        }
      )
    }
  );
}
var D = function() {
  return D = Object.assign || function(e) {
    for (var n, r = 1, o = arguments.length; r < o; r++) {
      n = arguments[r];
      for (var i in n)
        Object.prototype.hasOwnProperty.call(n, i) && (e[i] = n[i]);
    }
    return e;
  }, D.apply(this, arguments);
};
function Xt(t, e) {
  var n = {};
  for (var r in t)
    Object.prototype.hasOwnProperty.call(t, r) && e.indexOf(r) < 0 && (n[r] = t[r]);
  if (t != null && typeof Object.getOwnPropertySymbols == "function")
    for (var o = 0, r = Object.getOwnPropertySymbols(t); o < r.length; o++)
      e.indexOf(r[o]) < 0 && Object.prototype.propertyIsEnumerable.call(t, r[o]) && (n[r[o]] = t[r[o]]);
  return n;
}
function Ge(t, e, n) {
  if (n || arguments.length === 2)
    for (var r = 0, o = e.length, i; r < o; r++)
      (i || !(r in e)) && (i || (i = Array.prototype.slice.call(e, 0, r)), i[r] = e[r]);
  return t.concat(i || Array.prototype.slice.call(e));
}
var it = "right-scroll-bar-position";
var at = "width-before-scroll-bar";
var Xe = "with-scroll-bars-hidden";
var tn = "--removed-body-scroll-bar-size";
function en(t, e) {
  return typeof t == "function" ? t(e) : t && (t.current = e), t;
}
function nn(t, e) {
  var n = (0, import_react.useState)(function() {
    return {
      // value
      value: t,
      // last callback
      callback: e,
      // "memoized" public interface
      facade: {
        get current() {
          return n.value;
        },
        set current(r) {
          var o = n.value;
          o !== r && (n.value = r, n.callback(r, o));
        }
      }
    };
  })[0];
  return n.callback = e, n.facade;
}
function rn(t, e) {
  return nn(e || null, function(n) {
    return t.forEach(function(r) {
      return en(r, n);
    });
  });
}
function on(t) {
  return t;
}
function an(t, e) {
  e === void 0 && (e = on);
  var n = [], r = false, o = {
    read: function() {
      if (r)
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      return n.length ? n[n.length - 1] : t;
    },
    useMedium: function(i) {
      var a = e(i, r);
      return n.push(a), function() {
        n = n.filter(function(c) {
          return c !== a;
        });
      };
    },
    assignSyncMedium: function(i) {
      for (r = true; n.length; ) {
        var a = n;
        n = [], a.forEach(i);
      }
      n = {
        push: function(c) {
          return i(c);
        },
        filter: function() {
          return n;
        }
      };
    },
    assignMedium: function(i) {
      r = true;
      var a = [];
      if (n.length) {
        var c = n;
        n = [], c.forEach(i), a = n;
      }
      var s = function() {
        var l = a;
        a = [], l.forEach(i);
      }, f = function() {
        return Promise.resolve().then(s);
      };
      f(), n = {
        push: function(l) {
          a.push(l), f();
        },
        filter: function(l) {
          return a = a.filter(l), n;
        }
      };
    }
  };
  return o;
}
function cn(t) {
  t === void 0 && (t = {});
  var e = an(null);
  return e.options = D({ async: true, ssr: false }, t), e;
}
var te = function(t) {
  var e = t.sideCar, n = Xt(t, ["sideCar"]);
  if (!e)
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  var r = e.read();
  if (!r)
    throw new Error("Sidecar medium not found");
  return I.createElement(r, D({}, n));
};
te.isSideCarExport = true;
function sn(t, e) {
  return t.useMedium(e), te;
}
var ee = cn();
var wt = function() {
};
var ut = I.forwardRef(function(t, e) {
  var n = I.useRef(null), r = I.useState({
    onScrollCapture: wt,
    onWheelCapture: wt,
    onTouchMoveCapture: wt
  }), o = r[0], i = r[1], a = t.forwardProps, c = t.children, s = t.className, f = t.removeScrollBar, l = t.enabled, y = t.shards, w = t.sideCar, d = t.noIsolation, g = t.inert, u = t.allowPinchZoom, C = t.as, h = C === void 0 ? "div" : C, p = t.gapMode, v = Xt(t, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]), m = w, S = rn([n, e]), B = D(D({}, v), o);
  return I.createElement(
    I.Fragment,
    null,
    l && I.createElement(m, { sideCar: ee, removeScrollBar: f, shards: y, noIsolation: d, inert: g, setCallbacks: i, allowPinchZoom: !!u, lockRef: n, gapMode: p }),
    a ? I.cloneElement(I.Children.only(c), D(D({}, B), { ref: S })) : I.createElement(h, D({}, B, { className: s, ref: S }), c)
  );
});
ut.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
ut.classNames = {
  fullWidth: at,
  zeroRight: it
};
var ln = function() {
  if (typeof __webpack_nonce__ < "u")
    return __webpack_nonce__;
};
function un() {
  if (!document)
    return null;
  var t = document.createElement("style");
  t.type = "text/css";
  var e = ln();
  return e && t.setAttribute("nonce", e), t;
}
function fn(t, e) {
  t.styleSheet ? t.styleSheet.cssText = e : t.appendChild(document.createTextNode(e));
}
function dn(t) {
  var e = document.head || document.getElementsByTagName("head")[0];
  e.appendChild(t);
}
var hn = function() {
  var t = 0, e = null;
  return {
    add: function(n) {
      t == 0 && (e = un()) && (fn(e, n), dn(e)), t++;
    },
    remove: function() {
      t--, !t && e && (e.parentNode && e.parentNode.removeChild(e), e = null);
    }
  };
};
var gn = function() {
  var t = hn();
  return function(e, n) {
    I.useEffect(function() {
      return t.add(e), function() {
        t.remove();
      };
    }, [e && n]);
  };
};
var ne = function() {
  var t = gn(), e = function(n) {
    var r = n.styles, o = n.dynamic;
    return t(r, o), null;
  };
  return e;
};
var mn = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var pt = function(t) {
  return parseInt(t || "", 10) || 0;
};
var vn = function(t) {
  var e = window.getComputedStyle(document.body), n = e[t === "padding" ? "paddingLeft" : "marginLeft"], r = e[t === "padding" ? "paddingTop" : "marginTop"], o = e[t === "padding" ? "paddingRight" : "marginRight"];
  return [pt(n), pt(r), pt(o)];
};
var wn = function(t) {
  if (t === void 0 && (t = "margin"), typeof window > "u")
    return mn;
  var e = vn(t), n = document.documentElement.clientWidth, r = window.innerWidth;
  return {
    left: e[0],
    top: e[1],
    right: e[2],
    gap: Math.max(0, r - n + e[2] - e[0])
  };
};
var pn = ne();
var yn = function(t, e, n, r) {
  var o = t.left, i = t.top, a = t.right, c = t.gap;
  return n === void 0 && (n = "margin"), `
  .`.concat(Xe, ` {
   overflow: hidden `).concat(r, `;
   padding-right: `).concat(c, "px ").concat(r, `;
  }
  body {
    overflow: hidden `).concat(r, `;
    overscroll-behavior: contain;
    `).concat([
    e && "position: relative ".concat(r, ";"),
    n === "margin" && `
    padding-left: `.concat(o, `px;
    padding-top: `).concat(i, `px;
    padding-right: `).concat(a, `px;
    margin-left:0;
    margin-top:0;
    margin-right: `).concat(c, "px ").concat(r, `;
    `),
    n === "padding" && "padding-right: ".concat(c, "px ").concat(r, ";")
  ].filter(Boolean).join(""), `
  }
  
  .`).concat(it, ` {
    right: `).concat(c, "px ").concat(r, `;
  }
  
  .`).concat(at, ` {
    margin-right: `).concat(c, "px ").concat(r, `;
  }
  
  .`).concat(it, " .").concat(it, ` {
    right: 0 `).concat(r, `;
  }
  
  .`).concat(at, " .").concat(at, ` {
    margin-right: 0 `).concat(r, `;
  }
  
  body {
    `).concat(tn, ": ").concat(c, `px;
  }
`);
};
var Cn = function(t) {
  var e = t.noRelative, n = t.noImportant, r = t.gapMode, o = r === void 0 ? "margin" : r, i = I.useMemo(function() {
    return wn(o);
  }, [o]);
  return I.createElement(pn, { styles: yn(i, !e, o, n ? "" : "!important") });
};
var Bt = false;
if (typeof window < "u")
  try {
    et = Object.defineProperty({}, "passive", {
      get: function() {
        return Bt = true, true;
      }
    });
    window.addEventListener("test", et, et), window.removeEventListener("test", et, et);
  } catch {
    Bt = false;
  }
var et;
var x = Bt ? { passive: false } : false;
var En = function(t) {
  return t.tagName === "TEXTAREA";
};
var re = function(t, e) {
  var n = window.getComputedStyle(t);
  return (
    // not-not-scrollable
    n[e] !== "hidden" && // contains scroll inside self
    !(n.overflowY === n.overflowX && !En(t) && n[e] === "visible")
  );
};
var Sn = function(t) {
  return re(t, "overflowY");
};
var bn = function(t) {
  return re(t, "overflowX");
};
var Ht = function(t, e) {
  var n = e.ownerDocument, r = e;
  do {
    typeof ShadowRoot < "u" && r instanceof ShadowRoot && (r = r.host);
    var o = oe(t, r);
    if (o) {
      var i = ie(t, r), a = i[1], c = i[2];
      if (a > c)
        return true;
    }
    r = r.parentNode;
  } while (r && r !== n.body);
  return false;
};
var Bn = function(t) {
  var e = t.scrollTop, n = t.scrollHeight, r = t.clientHeight;
  return [
    e,
    n,
    r
  ];
};
var In = function(t) {
  var e = t.scrollLeft, n = t.scrollWidth, r = t.clientWidth;
  return [
    e,
    n,
    r
  ];
};
var oe = function(t, e) {
  return t === "v" ? Sn(e) : bn(e);
};
var ie = function(t, e) {
  return t === "v" ? Bn(e) : In(e);
};
var An = function(t, e) {
  return t === "h" && e === "rtl" ? -1 : 1;
};
var Mn = function(t, e, n, r, o) {
  var i = An(t, window.getComputedStyle(e).direction), a = i * r, c = n.target, s = e.contains(c), f = false, l = a > 0, y = 0, w = 0;
  do {
    var d = ie(t, c), g = d[0], u = d[1], C = d[2], h = u - C - i * g;
    (g || h) && oe(t, c) && (y += h, w += g), c instanceof ShadowRoot ? c = c.host : c = c.parentNode;
  } while (
    // portaled content
    !s && c !== document.body || // self content
    s && (e.contains(c) || e === c)
  );
  return (l && (o && Math.abs(y) < 1 || !o && a > y) || !l && (o && Math.abs(w) < 1 || !o && -a > w)) && (f = true), f;
};
var nt = function(t) {
  return "changedTouches" in t ? [t.changedTouches[0].clientX, t.changedTouches[0].clientY] : [0, 0];
};
var xt = function(t) {
  return [t.deltaX, t.deltaY];
};
var zt = function(t) {
  return t && "current" in t ? t.current : t;
};
var Nn = function(t, e) {
  return t[0] === e[0] && t[1] === e[1];
};
var Pn = function(t) {
  return `
  .block-interactivity-`.concat(t, ` {pointer-events: none;}
  .allow-interactivity-`).concat(t, ` {pointer-events: all;}
`);
};
var Tn = 0;
var z = [];
function Rn(t) {
  var e = I.useRef([]), n = I.useRef([0, 0]), r = I.useRef(), o = I.useState(Tn++)[0], i = I.useState(ne)[0], a = I.useRef(t);
  I.useEffect(function() {
    a.current = t;
  }, [t]), I.useEffect(function() {
    if (t.inert) {
      document.body.classList.add("block-interactivity-".concat(o));
      var u = Ge([t.lockRef.current], (t.shards || []).map(zt), true).filter(Boolean);
      return u.forEach(function(C) {
        return C.classList.add("allow-interactivity-".concat(o));
      }), function() {
        document.body.classList.remove("block-interactivity-".concat(o)), u.forEach(function(C) {
          return C.classList.remove("allow-interactivity-".concat(o));
        });
      };
    }
  }, [t.inert, t.lockRef.current, t.shards]);
  var c = I.useCallback(function(u, C) {
    if ("touches" in u && u.touches.length === 2)
      return !a.current.allowPinchZoom;
    var h = nt(u), p = n.current, v = "deltaX" in u ? u.deltaX : p[0] - h[0], m = "deltaY" in u ? u.deltaY : p[1] - h[1], S, B = u.target, b = Math.abs(v) > Math.abs(m) ? "h" : "v";
    if ("touches" in u && b === "h" && B.type === "range")
      return false;
    var A = Ht(b, B);
    if (!A)
      return true;
    if (A ? S = b : (S = b === "v" ? "h" : "v", A = Ht(b, B)), !A)
      return false;
    if (!r.current && "changedTouches" in u && (v || m) && (r.current = S), !S)
      return true;
    var M = r.current || S;
    return Mn(M, C, u, M === "h" ? v : m, true);
  }, []), s = I.useCallback(function(u) {
    var C = u;
    if (!(!z.length || z[z.length - 1] !== i)) {
      var h = "deltaY" in C ? xt(C) : nt(C), p = e.current.filter(function(S) {
        return S.name === C.type && (S.target === C.target || C.target === S.shadowParent) && Nn(S.delta, h);
      })[0];
      if (p && p.should) {
        C.cancelable && C.preventDefault();
        return;
      }
      if (!p) {
        var v = (a.current.shards || []).map(zt).filter(Boolean).filter(function(S) {
          return S.contains(C.target);
        }), m = v.length > 0 ? c(C, v[0]) : !a.current.noIsolation;
        m && C.cancelable && C.preventDefault();
      }
    }
  }, []), f = I.useCallback(function(u, C, h, p) {
    var v = { name: u, delta: C, target: h, should: p, shadowParent: kn(h) };
    e.current.push(v), setTimeout(function() {
      e.current = e.current.filter(function(m) {
        return m !== v;
      });
    }, 1);
  }, []), l = I.useCallback(function(u) {
    n.current = nt(u), r.current = void 0;
  }, []), y = I.useCallback(function(u) {
    f(u.type, xt(u), u.target, c(u, t.lockRef.current));
  }, []), w = I.useCallback(function(u) {
    f(u.type, nt(u), u.target, c(u, t.lockRef.current));
  }, []);
  I.useEffect(function() {
    return z.push(i), t.setCallbacks({
      onScrollCapture: y,
      onWheelCapture: y,
      onTouchMoveCapture: w
    }), document.addEventListener("wheel", s, x), document.addEventListener("touchmove", s, x), document.addEventListener("touchstart", l, x), function() {
      z = z.filter(function(u) {
        return u !== i;
      }), document.removeEventListener("wheel", s, x), document.removeEventListener("touchmove", s, x), document.removeEventListener("touchstart", l, x);
    };
  }, []);
  var d = t.removeScrollBar, g = t.inert;
  return I.createElement(
    I.Fragment,
    null,
    g ? I.createElement(i, { styles: Pn(o) }) : null,
    d ? I.createElement(Cn, { gapMode: t.gapMode }) : null
  );
}
function kn(t) {
  for (var e = null; t !== null; )
    t instanceof ShadowRoot && (e = t.host, t = t.host), t = t.parentNode;
  return e;
}
var Ln = sn(ee, Rn);
var ae = I.forwardRef(function(t, e) {
  return I.createElement(ut, D({}, t, { ref: e, sideCar: Ln }));
});
ae.classNames = ut.classNames;
var _n = ae;
var Fn = "nao3n43";
var Zn = "nao3n42";
var Ot = (t, e) => {
  const n = t.querySelectorAll("button:not(:disabled), a[href]");
  n.length !== 0 && n[e === "end" ? n.length - 1 : 0].focus();
};
function Dn(t) {
  const e = (0, import_react.useRef)(null);
  return (0, import_react.useEffect)(() => {
    const n = document.activeElement;
    return () => {
      var r;
      (r = n.focus) == null || r.call(n);
    };
  }, []), (0, import_react.useEffect)(() => {
    if (e.current) {
      const n = e.current.querySelector("[data-auto-focus]");
      n ? n.focus() : e.current.focus();
    }
  }, []), (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        onFocus: (0, import_react.useCallback)(() => e.current && Ot(e.current, "end"), []),
        tabIndex: 0
      }
    ),
    (0, import_jsx_runtime.jsx)("div", { ref: e, style: { outline: "none" }, tabIndex: -1, ...t }),
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        onFocus: (0, import_react.useCallback)(() => e.current && Ot(e.current, "start"), []),
        tabIndex: 0
      }
    )
  ] });
}
function Un() {
  return typeof navigator < "u" && /android/i.test(navigator.userAgent);
}
function Vn() {
  return typeof navigator < "u" && /iPhone|iPod/.test(navigator.userAgent);
}
function Hn() {
  return typeof navigator < "u" && (/iPad/.test(navigator.userAgent) || navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1);
}
function xn() {
  return Vn() || Hn();
}
function It() {
  return Un() || xn();
}
var zn = (t) => t.stopPropagation();
function On({ children: t, onClose: e, open: n, titleId: r }) {
  (0, import_react.useEffect)(() => {
    const c = (s) => n && s.key === "Escape" && e();
    return document.addEventListener("keydown", c), () => document.removeEventListener("keydown", c);
  }, [n, e]);
  const [o, i] = (0, import_react.useState)(true);
  (0, import_react.useEffect)(() => {
    i(
      getComputedStyle(window.document.body).overflow !== "hidden"
    );
  }, []);
  const a = (0, import_react.useCallback)(() => e(), [e]);
  return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: n ? (0, import_react_dom.createPortal)(
    (0, import_jsx_runtime.jsx)(_n, { enabled: o, children: (0, import_jsx_runtime.jsx)(
      "div",
      {
        style: {
          alignItems: It() ? "flex-end" : "center",
          position: "fixed"
        },
        "aria-labelledby": r,
        "aria-modal": true,
        className: Zn,
        onClick: a,
        role: "dialog",
        children: (0, import_jsx_runtime.jsx)(
          Dn,
          {
            className: Fn,
            onClick: zn,
            role: "document",
            children: t
          }
        )
      }
    ) }),
    document.body
  ) : null });
}
var Kn = "_1sj0tk80";
var Kt = "_1sj0tk82";
var Yn = "_1sj0tk85";
var Yt = "_1sj0tk81";
var Q = {};
var $n = function() {
  return typeof Promise == "function" && Promise.prototype && Promise.prototype.then;
};
var ce = {};
var F = {};
var Rt;
var jn = [
  0,
  // Not used
  26,
  44,
  70,
  100,
  134,
  172,
  196,
  242,
  292,
  346,
  404,
  466,
  532,
  581,
  655,
  733,
  815,
  901,
  991,
  1085,
  1156,
  1258,
  1364,
  1474,
  1588,
  1706,
  1828,
  1921,
  2051,
  2185,
  2323,
  2465,
  2611,
  2761,
  2876,
  3034,
  3196,
  3362,
  3532,
  3706
];
F.getSymbolSize = function(e) {
  if (!e)
    throw new Error('"version" cannot be null or undefined');
  if (e < 1 || e > 40)
    throw new Error('"version" should be in range from 1 to 40');
  return e * 4 + 17;
};
F.getSymbolTotalCodewords = function(e) {
  return jn[e];
};
F.getBCHDigit = function(t) {
  let e = 0;
  for (; t !== 0; )
    e++, t >>>= 1;
  return e;
};
F.setToSJISFunction = function(e) {
  if (typeof e != "function")
    throw new Error('"toSJISFunc" is not a valid function.');
  Rt = e;
};
F.isKanjiModeEnabled = function() {
  return typeof Rt < "u";
};
F.toSJIS = function(e) {
  return Rt(e);
};
var ft = {};
(function(t) {
  t.L = { bit: 1 }, t.M = { bit: 0 }, t.Q = { bit: 3 }, t.H = { bit: 2 };
  function e(n) {
    if (typeof n != "string")
      throw new Error("Param is not a string");
    switch (n.toLowerCase()) {
      case "l":
      case "low":
        return t.L;
      case "m":
      case "medium":
        return t.M;
      case "q":
      case "quartile":
        return t.Q;
      case "h":
      case "high":
        return t.H;
      default:
        throw new Error("Unknown EC Level: " + n);
    }
  }
  t.isValid = function(r) {
    return r && typeof r.bit < "u" && r.bit >= 0 && r.bit < 4;
  }, t.from = function(r, o) {
    if (t.isValid(r))
      return r;
    try {
      return e(r);
    } catch {
      return o;
    }
  };
})(ft);
function se() {
  this.buffer = [], this.length = 0;
}
se.prototype = {
  get: function(t) {
    const e = Math.floor(t / 8);
    return (this.buffer[e] >>> 7 - t % 8 & 1) === 1;
  },
  put: function(t, e) {
    for (let n = 0; n < e; n++)
      this.putBit((t >>> e - n - 1 & 1) === 1);
  },
  getLengthInBits: function() {
    return this.length;
  },
  putBit: function(t) {
    const e = Math.floor(this.length / 8);
    this.buffer.length <= e && this.buffer.push(0), t && (this.buffer[e] |= 128 >>> this.length % 8), this.length++;
  }
};
var Jn = se;
function G(t) {
  if (!t || t < 1)
    throw new Error("BitMatrix size must be defined and greater than 0");
  this.size = t, this.data = new Uint8Array(t * t), this.reservedBit = new Uint8Array(t * t);
}
G.prototype.set = function(t, e, n, r) {
  const o = t * this.size + e;
  this.data[o] = n, r && (this.reservedBit[o] = true);
};
G.prototype.get = function(t, e) {
  return this.data[t * this.size + e];
};
G.prototype.xor = function(t, e, n) {
  this.data[t * this.size + e] ^= n;
};
G.prototype.isReserved = function(t, e) {
  return this.reservedBit[t * this.size + e];
};
var Wn = G;
var le = {};
(function(t) {
  const e = F.getSymbolSize;
  t.getRowColCoords = function(r) {
    if (r === 1)
      return [];
    const o = Math.floor(r / 7) + 2, i = e(r), a = i === 145 ? 26 : Math.ceil((i - 13) / (2 * o - 2)) * 2, c = [i - 7];
    for (let s = 1; s < o - 1; s++)
      c[s] = c[s - 1] - a;
    return c.push(6), c.reverse();
  }, t.getPositions = function(r) {
    const o = [], i = t.getRowColCoords(r), a = i.length;
    for (let c = 0; c < a; c++)
      for (let s = 0; s < a; s++)
        c === 0 && s === 0 || // top-left
        c === 0 && s === a - 1 || // bottom-left
        c === a - 1 && s === 0 || o.push([i[c], i[s]]);
    return o;
  };
})(le);
var ue = {};
var qn = F.getSymbolSize;
var $t = 7;
ue.getPositions = function(e) {
  const n = qn(e);
  return [
    // top-left
    [0, 0],
    // top-right
    [n - $t, 0],
    // bottom-left
    [0, n - $t]
  ];
};
var fe = {};
(function(t) {
  t.Patterns = {
    PATTERN000: 0,
    PATTERN001: 1,
    PATTERN010: 2,
    PATTERN011: 3,
    PATTERN100: 4,
    PATTERN101: 5,
    PATTERN110: 6,
    PATTERN111: 7
  };
  const e = {
    N1: 3,
    N2: 3,
    N3: 40,
    N4: 10
  };
  t.isValid = function(o) {
    return o != null && o !== "" && !isNaN(o) && o >= 0 && o <= 7;
  }, t.from = function(o) {
    return t.isValid(o) ? parseInt(o, 10) : void 0;
  }, t.getPenaltyN1 = function(o) {
    const i = o.size;
    let a = 0, c = 0, s = 0, f = null, l = null;
    for (let y = 0; y < i; y++) {
      c = s = 0, f = l = null;
      for (let w = 0; w < i; w++) {
        let d = o.get(y, w);
        d === f ? c++ : (c >= 5 && (a += e.N1 + (c - 5)), f = d, c = 1), d = o.get(w, y), d === l ? s++ : (s >= 5 && (a += e.N1 + (s - 5)), l = d, s = 1);
      }
      c >= 5 && (a += e.N1 + (c - 5)), s >= 5 && (a += e.N1 + (s - 5));
    }
    return a;
  }, t.getPenaltyN2 = function(o) {
    const i = o.size;
    let a = 0;
    for (let c = 0; c < i - 1; c++)
      for (let s = 0; s < i - 1; s++) {
        const f = o.get(c, s) + o.get(c, s + 1) + o.get(c + 1, s) + o.get(c + 1, s + 1);
        (f === 4 || f === 0) && a++;
      }
    return a * e.N2;
  }, t.getPenaltyN3 = function(o) {
    const i = o.size;
    let a = 0, c = 0, s = 0;
    for (let f = 0; f < i; f++) {
      c = s = 0;
      for (let l = 0; l < i; l++)
        c = c << 1 & 2047 | o.get(f, l), l >= 10 && (c === 1488 || c === 93) && a++, s = s << 1 & 2047 | o.get(l, f), l >= 10 && (s === 1488 || s === 93) && a++;
    }
    return a * e.N3;
  }, t.getPenaltyN4 = function(o) {
    let i = 0;
    const a = o.data.length;
    for (let s = 0; s < a; s++)
      i += o.data[s];
    return Math.abs(Math.ceil(i * 100 / a / 5) - 10) * e.N4;
  };
  function n(r, o, i) {
    switch (r) {
      case t.Patterns.PATTERN000:
        return (o + i) % 2 === 0;
      case t.Patterns.PATTERN001:
        return o % 2 === 0;
      case t.Patterns.PATTERN010:
        return i % 3 === 0;
      case t.Patterns.PATTERN011:
        return (o + i) % 3 === 0;
      case t.Patterns.PATTERN100:
        return (Math.floor(o / 2) + Math.floor(i / 3)) % 2 === 0;
      case t.Patterns.PATTERN101:
        return o * i % 2 + o * i % 3 === 0;
      case t.Patterns.PATTERN110:
        return (o * i % 2 + o * i % 3) % 2 === 0;
      case t.Patterns.PATTERN111:
        return (o * i % 3 + (o + i) % 2) % 2 === 0;
      default:
        throw new Error("bad maskPattern:" + r);
    }
  }
  t.applyMask = function(o, i) {
    const a = i.size;
    for (let c = 0; c < a; c++)
      for (let s = 0; s < a; s++)
        i.isReserved(s, c) || i.xor(s, c, n(o, s, c));
  }, t.getBestMask = function(o, i) {
    const a = Object.keys(t.Patterns).length;
    let c = 0, s = 1 / 0;
    for (let f = 0; f < a; f++) {
      i(f), t.applyMask(f, o);
      const l = t.getPenaltyN1(o) + t.getPenaltyN2(o) + t.getPenaltyN3(o) + t.getPenaltyN4(o);
      t.applyMask(f, o), l < s && (s = l, c = f);
    }
    return c;
  };
})(fe);
var dt = {};
var V = ft;
var rt = [
  // L  M  Q  H
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  2,
  1,
  2,
  2,
  4,
  1,
  2,
  4,
  4,
  2,
  4,
  4,
  4,
  2,
  4,
  6,
  5,
  2,
  4,
  6,
  6,
  2,
  5,
  8,
  8,
  4,
  5,
  8,
  8,
  4,
  5,
  8,
  11,
  4,
  8,
  10,
  11,
  4,
  9,
  12,
  16,
  4,
  9,
  16,
  16,
  6,
  10,
  12,
  18,
  6,
  10,
  17,
  16,
  6,
  11,
  16,
  19,
  6,
  13,
  18,
  21,
  7,
  14,
  21,
  25,
  8,
  16,
  20,
  25,
  8,
  17,
  23,
  25,
  9,
  17,
  23,
  34,
  9,
  18,
  25,
  30,
  10,
  20,
  27,
  32,
  12,
  21,
  29,
  35,
  12,
  23,
  34,
  37,
  12,
  25,
  34,
  40,
  13,
  26,
  35,
  42,
  14,
  28,
  38,
  45,
  15,
  29,
  40,
  48,
  16,
  31,
  43,
  51,
  17,
  33,
  45,
  54,
  18,
  35,
  48,
  57,
  19,
  37,
  51,
  60,
  19,
  38,
  53,
  63,
  20,
  40,
  56,
  66,
  21,
  43,
  59,
  70,
  22,
  45,
  62,
  74,
  24,
  47,
  65,
  77,
  25,
  49,
  68,
  81
];
var ot = [
  // L  M  Q  H
  7,
  10,
  13,
  17,
  10,
  16,
  22,
  28,
  15,
  26,
  36,
  44,
  20,
  36,
  52,
  64,
  26,
  48,
  72,
  88,
  36,
  64,
  96,
  112,
  40,
  72,
  108,
  130,
  48,
  88,
  132,
  156,
  60,
  110,
  160,
  192,
  72,
  130,
  192,
  224,
  80,
  150,
  224,
  264,
  96,
  176,
  260,
  308,
  104,
  198,
  288,
  352,
  120,
  216,
  320,
  384,
  132,
  240,
  360,
  432,
  144,
  280,
  408,
  480,
  168,
  308,
  448,
  532,
  180,
  338,
  504,
  588,
  196,
  364,
  546,
  650,
  224,
  416,
  600,
  700,
  224,
  442,
  644,
  750,
  252,
  476,
  690,
  816,
  270,
  504,
  750,
  900,
  300,
  560,
  810,
  960,
  312,
  588,
  870,
  1050,
  336,
  644,
  952,
  1110,
  360,
  700,
  1020,
  1200,
  390,
  728,
  1050,
  1260,
  420,
  784,
  1140,
  1350,
  450,
  812,
  1200,
  1440,
  480,
  868,
  1290,
  1530,
  510,
  924,
  1350,
  1620,
  540,
  980,
  1440,
  1710,
  570,
  1036,
  1530,
  1800,
  570,
  1064,
  1590,
  1890,
  600,
  1120,
  1680,
  1980,
  630,
  1204,
  1770,
  2100,
  660,
  1260,
  1860,
  2220,
  720,
  1316,
  1950,
  2310,
  750,
  1372,
  2040,
  2430
];
dt.getBlocksCount = function(e, n) {
  switch (n) {
    case V.L:
      return rt[(e - 1) * 4 + 0];
    case V.M:
      return rt[(e - 1) * 4 + 1];
    case V.Q:
      return rt[(e - 1) * 4 + 2];
    case V.H:
      return rt[(e - 1) * 4 + 3];
    default:
      return;
  }
};
dt.getTotalCodewordsCount = function(e, n) {
  switch (n) {
    case V.L:
      return ot[(e - 1) * 4 + 0];
    case V.M:
      return ot[(e - 1) * 4 + 1];
    case V.Q:
      return ot[(e - 1) * 4 + 2];
    case V.H:
      return ot[(e - 1) * 4 + 3];
    default:
      return;
  }
};
var de = {};
var ht = {};
var j = new Uint8Array(512);
var ct = new Uint8Array(256);
(function() {
  let e = 1;
  for (let n = 0; n < 255; n++)
    j[n] = e, ct[e] = n, e <<= 1, e & 256 && (e ^= 285);
  for (let n = 255; n < 512; n++)
    j[n] = j[n - 255];
})();
ht.log = function(e) {
  if (e < 1)
    throw new Error("log(" + e + ")");
  return ct[e];
};
ht.exp = function(e) {
  return j[e];
};
ht.mul = function(e, n) {
  return e === 0 || n === 0 ? 0 : j[ct[e] + ct[n]];
};
(function(t) {
  const e = ht;
  t.mul = function(r, o) {
    const i = new Uint8Array(r.length + o.length - 1);
    for (let a = 0; a < r.length; a++)
      for (let c = 0; c < o.length; c++)
        i[a + c] ^= e.mul(r[a], o[c]);
    return i;
  }, t.mod = function(r, o) {
    let i = new Uint8Array(r);
    for (; i.length - o.length >= 0; ) {
      const a = i[0];
      for (let s = 0; s < o.length; s++)
        i[s] ^= e.mul(o[s], a);
      let c = 0;
      for (; c < i.length && i[c] === 0; )
        c++;
      i = i.slice(c);
    }
    return i;
  }, t.generateECPolynomial = function(r) {
    let o = new Uint8Array([1]);
    for (let i = 0; i < r; i++)
      o = t.mul(o, new Uint8Array([1, e.exp(i)]));
    return o;
  };
})(de);
var he = de;
function kt(t) {
  this.genPoly = void 0, this.degree = t, this.degree && this.initialize(this.degree);
}
kt.prototype.initialize = function(e) {
  this.degree = e, this.genPoly = he.generateECPolynomial(this.degree);
};
kt.prototype.encode = function(e) {
  if (!this.genPoly)
    throw new Error("Encoder not initialized");
  const n = new Uint8Array(e.length + this.degree);
  n.set(e);
  const r = he.mod(n, this.genPoly), o = this.degree - r.length;
  if (o > 0) {
    const i = new Uint8Array(this.degree);
    return i.set(r, o), i;
  }
  return r;
};
var Qn = kt;
var ge = {};
var H = {};
var Lt = {};
Lt.isValid = function(e) {
  return !isNaN(e) && e >= 1 && e <= 40;
};
var U = {};
var me = "[0-9]+";
var Gn = "[A-Z $%*+\\-./:]+";
var W = "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
W = W.replace(/u/g, "\\u");
var Xn = "(?:(?![A-Z0-9 $%*+\\-./:]|" + W + `)(?:.|[\r
]))+`;
U.KANJI = new RegExp(W, "g");
U.BYTE_KANJI = new RegExp("[^A-Z0-9 $%*+\\-./:]+", "g");
U.BYTE = new RegExp(Xn, "g");
U.NUMERIC = new RegExp(me, "g");
U.ALPHANUMERIC = new RegExp(Gn, "g");
var tr = new RegExp("^" + W + "$");
var er = new RegExp("^" + me + "$");
var nr = new RegExp("^[A-Z0-9 $%*+\\-./:]+$");
U.testKanji = function(e) {
  return tr.test(e);
};
U.testNumeric = function(e) {
  return er.test(e);
};
U.testAlphanumeric = function(e) {
  return nr.test(e);
};
(function(t) {
  const e = Lt, n = U;
  t.NUMERIC = {
    id: "Numeric",
    bit: 1,
    ccBits: [10, 12, 14]
  }, t.ALPHANUMERIC = {
    id: "Alphanumeric",
    bit: 2,
    ccBits: [9, 11, 13]
  }, t.BYTE = {
    id: "Byte",
    bit: 4,
    ccBits: [8, 16, 16]
  }, t.KANJI = {
    id: "Kanji",
    bit: 8,
    ccBits: [8, 10, 12]
  }, t.MIXED = {
    bit: -1
  }, t.getCharCountIndicator = function(i, a) {
    if (!i.ccBits)
      throw new Error("Invalid mode: " + i);
    if (!e.isValid(a))
      throw new Error("Invalid version: " + a);
    return a >= 1 && a < 10 ? i.ccBits[0] : a < 27 ? i.ccBits[1] : i.ccBits[2];
  }, t.getBestModeForData = function(i) {
    return n.testNumeric(i) ? t.NUMERIC : n.testAlphanumeric(i) ? t.ALPHANUMERIC : n.testKanji(i) ? t.KANJI : t.BYTE;
  }, t.toString = function(i) {
    if (i && i.id)
      return i.id;
    throw new Error("Invalid mode");
  }, t.isValid = function(i) {
    return i && i.bit && i.ccBits;
  };
  function r(o) {
    if (typeof o != "string")
      throw new Error("Param is not a string");
    switch (o.toLowerCase()) {
      case "numeric":
        return t.NUMERIC;
      case "alphanumeric":
        return t.ALPHANUMERIC;
      case "kanji":
        return t.KANJI;
      case "byte":
        return t.BYTE;
      default:
        throw new Error("Unknown mode: " + o);
    }
  }
  t.from = function(i, a) {
    if (t.isValid(i))
      return i;
    try {
      return r(i);
    } catch {
      return a;
    }
  };
})(H);
(function(t) {
  const e = F, n = dt, r = ft, o = H, i = Lt, a = 7973, c = e.getBCHDigit(a);
  function s(w, d, g) {
    for (let u = 1; u <= 40; u++)
      if (d <= t.getCapacity(u, g, w))
        return u;
  }
  function f(w, d) {
    return o.getCharCountIndicator(w, d) + 4;
  }
  function l(w, d) {
    let g = 0;
    return w.forEach(function(u) {
      const C = f(u.mode, d);
      g += C + u.getBitsLength();
    }), g;
  }
  function y(w, d) {
    for (let g = 1; g <= 40; g++)
      if (l(w, g) <= t.getCapacity(g, d, o.MIXED))
        return g;
  }
  t.from = function(d, g) {
    return i.isValid(d) ? parseInt(d, 10) : g;
  }, t.getCapacity = function(d, g, u) {
    if (!i.isValid(d))
      throw new Error("Invalid QR Code version");
    typeof u > "u" && (u = o.BYTE);
    const C = e.getSymbolTotalCodewords(d), h = n.getTotalCodewordsCount(d, g), p = (C - h) * 8;
    if (u === o.MIXED)
      return p;
    const v = p - f(u, d);
    switch (u) {
      case o.NUMERIC:
        return Math.floor(v / 10 * 3);
      case o.ALPHANUMERIC:
        return Math.floor(v / 11 * 2);
      case o.KANJI:
        return Math.floor(v / 13);
      case o.BYTE:
      default:
        return Math.floor(v / 8);
    }
  }, t.getBestVersionForData = function(d, g) {
    let u;
    const C = r.from(g, r.M);
    if (Array.isArray(d)) {
      if (d.length > 1)
        return y(d, C);
      if (d.length === 0)
        return 1;
      u = d[0];
    } else
      u = d;
    return s(u.mode, u.getLength(), C);
  }, t.getEncodedBits = function(d) {
    if (!i.isValid(d) || d < 7)
      throw new Error("Invalid QR Code version");
    let g = d << 12;
    for (; e.getBCHDigit(g) - c >= 0; )
      g ^= a << e.getBCHDigit(g) - c;
    return d << 12 | g;
  };
})(ge);
var ve = {};
var At = F;
var we = 1335;
var rr = 21522;
var jt = At.getBCHDigit(we);
ve.getEncodedBits = function(e, n) {
  const r = e.bit << 3 | n;
  let o = r << 10;
  for (; At.getBCHDigit(o) - jt >= 0; )
    o ^= we << At.getBCHDigit(o) - jt;
  return (r << 10 | o) ^ rr;
};
var pe = {};
var or = H;
function O(t) {
  this.mode = or.NUMERIC, this.data = t.toString();
}
O.getBitsLength = function(e) {
  return 10 * Math.floor(e / 3) + (e % 3 ? e % 3 * 3 + 1 : 0);
};
O.prototype.getLength = function() {
  return this.data.length;
};
O.prototype.getBitsLength = function() {
  return O.getBitsLength(this.data.length);
};
O.prototype.write = function(e) {
  let n, r, o;
  for (n = 0; n + 3 <= this.data.length; n += 3)
    r = this.data.substr(n, 3), o = parseInt(r, 10), e.put(o, 10);
  const i = this.data.length - n;
  i > 0 && (r = this.data.substr(n), o = parseInt(r, 10), e.put(o, i * 3 + 1));
};
var ir = O;
var ar = H;
var yt = [
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  " ",
  "$",
  "%",
  "*",
  "+",
  "-",
  ".",
  "/",
  ":"
];
function K(t) {
  this.mode = ar.ALPHANUMERIC, this.data = t;
}
K.getBitsLength = function(e) {
  return 11 * Math.floor(e / 2) + 6 * (e % 2);
};
K.prototype.getLength = function() {
  return this.data.length;
};
K.prototype.getBitsLength = function() {
  return K.getBitsLength(this.data.length);
};
K.prototype.write = function(e) {
  let n;
  for (n = 0; n + 2 <= this.data.length; n += 2) {
    let r = yt.indexOf(this.data[n]) * 45;
    r += yt.indexOf(this.data[n + 1]), e.put(r, 11);
  }
  this.data.length % 2 && e.put(yt.indexOf(this.data[n]), 6);
};
var cr = K;
var sr = function(e) {
  for (var n = [], r = e.length, o = 0; o < r; o++) {
    var i = e.charCodeAt(o);
    if (i >= 55296 && i <= 56319 && r > o + 1) {
      var a = e.charCodeAt(o + 1);
      a >= 56320 && a <= 57343 && (i = (i - 55296) * 1024 + a - 56320 + 65536, o += 1);
    }
    if (i < 128) {
      n.push(i);
      continue;
    }
    if (i < 2048) {
      n.push(i >> 6 | 192), n.push(i & 63 | 128);
      continue;
    }
    if (i < 55296 || i >= 57344 && i < 65536) {
      n.push(i >> 12 | 224), n.push(i >> 6 & 63 | 128), n.push(i & 63 | 128);
      continue;
    }
    if (i >= 65536 && i <= 1114111) {
      n.push(i >> 18 | 240), n.push(i >> 12 & 63 | 128), n.push(i >> 6 & 63 | 128), n.push(i & 63 | 128);
      continue;
    }
    n.push(239, 191, 189);
  }
  return new Uint8Array(n).buffer;
};
var lr = sr;
var ur = H;
function Y(t) {
  this.mode = ur.BYTE, typeof t == "string" && (t = lr(t)), this.data = new Uint8Array(t);
}
Y.getBitsLength = function(e) {
  return e * 8;
};
Y.prototype.getLength = function() {
  return this.data.length;
};
Y.prototype.getBitsLength = function() {
  return Y.getBitsLength(this.data.length);
};
Y.prototype.write = function(t) {
  for (let e = 0, n = this.data.length; e < n; e++)
    t.put(this.data[e], 8);
};
var fr = Y;
var dr = H;
var hr = F;
function $(t) {
  this.mode = dr.KANJI, this.data = t;
}
$.getBitsLength = function(e) {
  return e * 13;
};
$.prototype.getLength = function() {
  return this.data.length;
};
$.prototype.getBitsLength = function() {
  return $.getBitsLength(this.data.length);
};
$.prototype.write = function(t) {
  let e;
  for (e = 0; e < this.data.length; e++) {
    let n = hr.toSJIS(this.data[e]);
    if (n >= 33088 && n <= 40956)
      n -= 33088;
    else if (n >= 57408 && n <= 60351)
      n -= 49472;
    else
      throw new Error(
        "Invalid SJIS character: " + this.data[e] + `
Make sure your charset is UTF-8`
      );
    n = (n >>> 8 & 255) * 192 + (n & 255), t.put(n, 13);
  }
};
var gr = $;
var ye = { exports: {} };
(function(t) {
  var e = {
    single_source_shortest_paths: function(n, r, o) {
      var i = {}, a = {};
      a[r] = 0;
      var c = e.PriorityQueue.make();
      c.push(r, 0);
      for (var s, f, l, y, w, d, g, u, C; !c.empty(); ) {
        s = c.pop(), f = s.value, y = s.cost, w = n[f] || {};
        for (l in w)
          w.hasOwnProperty(l) && (d = w[l], g = y + d, u = a[l], C = typeof a[l] > "u", (C || u > g) && (a[l] = g, c.push(l, g), i[l] = f));
      }
      if (typeof o < "u" && typeof a[o] > "u") {
        var h = ["Could not find a path from ", r, " to ", o, "."].join("");
        throw new Error(h);
      }
      return i;
    },
    extract_shortest_path_from_predecessor_list: function(n, r) {
      for (var o = [], i = r; i; )
        o.push(i), n[i], i = n[i];
      return o.reverse(), o;
    },
    find_path: function(n, r, o) {
      var i = e.single_source_shortest_paths(n, r, o);
      return e.extract_shortest_path_from_predecessor_list(
        i,
        o
      );
    },
    /**
     * A very naive priority queue implementation.
     */
    PriorityQueue: {
      make: function(n) {
        var r = e.PriorityQueue, o = {}, i;
        n = n || {};
        for (i in r)
          r.hasOwnProperty(i) && (o[i] = r[i]);
        return o.queue = [], o.sorter = n.sorter || r.default_sorter, o;
      },
      default_sorter: function(n, r) {
        return n.cost - r.cost;
      },
      /**
       * Add a new item to the queue and ensure the highest priority element
       * is at the front of the queue.
       */
      push: function(n, r) {
        var o = { value: n, cost: r };
        this.queue.push(o), this.queue.sort(this.sorter);
      },
      /**
       * Return the highest priority element in the queue.
       */
      pop: function() {
        return this.queue.shift();
      },
      empty: function() {
        return this.queue.length === 0;
      }
    }
  };
  t.exports = e;
})(ye);
var mr = ye.exports;
(function(t) {
  const e = H, n = ir, r = cr, o = fr, i = gr, a = U, c = F, s = mr;
  function f(h) {
    return unescape(encodeURIComponent(h)).length;
  }
  function l(h, p, v) {
    const m = [];
    let S;
    for (; (S = h.exec(v)) !== null; )
      m.push({
        data: S[0],
        index: S.index,
        mode: p,
        length: S[0].length
      });
    return m;
  }
  function y(h) {
    const p = l(a.NUMERIC, e.NUMERIC, h), v = l(a.ALPHANUMERIC, e.ALPHANUMERIC, h);
    let m, S;
    return c.isKanjiModeEnabled() ? (m = l(a.BYTE, e.BYTE, h), S = l(a.KANJI, e.KANJI, h)) : (m = l(a.BYTE_KANJI, e.BYTE, h), S = []), p.concat(v, m, S).sort(function(b, A) {
      return b.index - A.index;
    }).map(function(b) {
      return {
        data: b.data,
        mode: b.mode,
        length: b.length
      };
    });
  }
  function w(h, p) {
    switch (p) {
      case e.NUMERIC:
        return n.getBitsLength(h);
      case e.ALPHANUMERIC:
        return r.getBitsLength(h);
      case e.KANJI:
        return i.getBitsLength(h);
      case e.BYTE:
        return o.getBitsLength(h);
    }
  }
  function d(h) {
    return h.reduce(function(p, v) {
      const m = p.length - 1 >= 0 ? p[p.length - 1] : null;
      return m && m.mode === v.mode ? (p[p.length - 1].data += v.data, p) : (p.push(v), p);
    }, []);
  }
  function g(h) {
    const p = [];
    for (let v = 0; v < h.length; v++) {
      const m = h[v];
      switch (m.mode) {
        case e.NUMERIC:
          p.push([
            m,
            { data: m.data, mode: e.ALPHANUMERIC, length: m.length },
            { data: m.data, mode: e.BYTE, length: m.length }
          ]);
          break;
        case e.ALPHANUMERIC:
          p.push([
            m,
            { data: m.data, mode: e.BYTE, length: m.length }
          ]);
          break;
        case e.KANJI:
          p.push([
            m,
            { data: m.data, mode: e.BYTE, length: f(m.data) }
          ]);
          break;
        case e.BYTE:
          p.push([
            { data: m.data, mode: e.BYTE, length: f(m.data) }
          ]);
      }
    }
    return p;
  }
  function u(h, p) {
    const v = {}, m = { start: {} };
    let S = ["start"];
    for (let B = 0; B < h.length; B++) {
      const b = h[B], A = [];
      for (let M = 0; M < b.length; M++) {
        const N = b[M], k = "" + B + M;
        A.push(k), v[k] = { node: N, lastCount: 0 }, m[k] = {};
        for (let L = 0; L < S.length; L++) {
          const _ = S[L];
          v[_] && v[_].node.mode === N.mode ? (m[_][k] = w(v[_].lastCount + N.length, N.mode) - w(v[_].lastCount, N.mode), v[_].lastCount += N.length) : (v[_] && (v[_].lastCount = N.length), m[_][k] = w(N.length, N.mode) + 4 + e.getCharCountIndicator(N.mode, p));
        }
      }
      S = A;
    }
    for (let B = 0; B < S.length; B++)
      m[S[B]].end = 0;
    return { map: m, table: v };
  }
  function C(h, p) {
    let v;
    const m = e.getBestModeForData(h);
    if (v = e.from(p, m), v !== e.BYTE && v.bit < m.bit)
      throw new Error('"' + h + '" cannot be encoded with mode ' + e.toString(v) + `.
 Suggested mode is: ` + e.toString(m));
    switch (v === e.KANJI && !c.isKanjiModeEnabled() && (v = e.BYTE), v) {
      case e.NUMERIC:
        return new n(h);
      case e.ALPHANUMERIC:
        return new r(h);
      case e.KANJI:
        return new i(h);
      case e.BYTE:
        return new o(h);
    }
  }
  t.fromArray = function(p) {
    return p.reduce(function(v, m) {
      return typeof m == "string" ? v.push(C(m, null)) : m.data && v.push(C(m.data, m.mode)), v;
    }, []);
  }, t.fromString = function(p, v) {
    const m = y(p, c.isKanjiModeEnabled()), S = g(m), B = u(S, v), b = s.find_path(B.map, "start", "end"), A = [];
    for (let M = 1; M < b.length - 1; M++)
      A.push(B.table[b[M]].node);
    return t.fromArray(d(A));
  }, t.rawSplit = function(p) {
    return t.fromArray(
      y(p, c.isKanjiModeEnabled())
    );
  };
})(pe);
var gt = F;
var Ct = ft;
var vr = Jn;
var wr = Wn;
var pr = le;
var yr = ue;
var Mt = fe;
var Nt = dt;
var Cr = Qn;
var st = ge;
var Er = ve;
var Sr = H;
var Et = pe;
function br(t, e) {
  const n = t.size, r = yr.getPositions(e);
  for (let o = 0; o < r.length; o++) {
    const i = r[o][0], a = r[o][1];
    for (let c = -1; c <= 7; c++)
      if (!(i + c <= -1 || n <= i + c))
        for (let s = -1; s <= 7; s++)
          a + s <= -1 || n <= a + s || (c >= 0 && c <= 6 && (s === 0 || s === 6) || s >= 0 && s <= 6 && (c === 0 || c === 6) || c >= 2 && c <= 4 && s >= 2 && s <= 4 ? t.set(i + c, a + s, true, true) : t.set(i + c, a + s, false, true));
  }
}
function Br(t) {
  const e = t.size;
  for (let n = 8; n < e - 8; n++) {
    const r = n % 2 === 0;
    t.set(n, 6, r, true), t.set(6, n, r, true);
  }
}
function Ir(t, e) {
  const n = pr.getPositions(e);
  for (let r = 0; r < n.length; r++) {
    const o = n[r][0], i = n[r][1];
    for (let a = -2; a <= 2; a++)
      for (let c = -2; c <= 2; c++)
        a === -2 || a === 2 || c === -2 || c === 2 || a === 0 && c === 0 ? t.set(o + a, i + c, true, true) : t.set(o + a, i + c, false, true);
  }
}
function Ar(t, e) {
  const n = t.size, r = st.getEncodedBits(e);
  let o, i, a;
  for (let c = 0; c < 18; c++)
    o = Math.floor(c / 3), i = c % 3 + n - 8 - 3, a = (r >> c & 1) === 1, t.set(o, i, a, true), t.set(i, o, a, true);
}
function St(t, e, n) {
  const r = t.size, o = Er.getEncodedBits(e, n);
  let i, a;
  for (i = 0; i < 15; i++)
    a = (o >> i & 1) === 1, i < 6 ? t.set(i, 8, a, true) : i < 8 ? t.set(i + 1, 8, a, true) : t.set(r - 15 + i, 8, a, true), i < 8 ? t.set(8, r - i - 1, a, true) : i < 9 ? t.set(8, 15 - i - 1 + 1, a, true) : t.set(8, 15 - i - 1, a, true);
  t.set(r - 8, 8, 1, true);
}
function Mr(t, e) {
  const n = t.size;
  let r = -1, o = n - 1, i = 7, a = 0;
  for (let c = n - 1; c > 0; c -= 2)
    for (c === 6 && c--; ; ) {
      for (let s = 0; s < 2; s++)
        if (!t.isReserved(o, c - s)) {
          let f = false;
          a < e.length && (f = (e[a] >>> i & 1) === 1), t.set(o, c - s, f), i--, i === -1 && (a++, i = 7);
        }
      if (o += r, o < 0 || n <= o) {
        o -= r, r = -r;
        break;
      }
    }
}
function Nr(t, e, n) {
  const r = new vr();
  n.forEach(function(s) {
    r.put(s.mode.bit, 4), r.put(s.getLength(), Sr.getCharCountIndicator(s.mode, t)), s.write(r);
  });
  const o = gt.getSymbolTotalCodewords(t), i = Nt.getTotalCodewordsCount(t, e), a = (o - i) * 8;
  for (r.getLengthInBits() + 4 <= a && r.put(0, 4); r.getLengthInBits() % 8 !== 0; )
    r.putBit(0);
  const c = (a - r.getLengthInBits()) / 8;
  for (let s = 0; s < c; s++)
    r.put(s % 2 ? 17 : 236, 8);
  return Pr(r, t, e);
}
function Pr(t, e, n) {
  const r = gt.getSymbolTotalCodewords(e), o = Nt.getTotalCodewordsCount(e, n), i = r - o, a = Nt.getBlocksCount(e, n), c = r % a, s = a - c, f = Math.floor(r / a), l = Math.floor(i / a), y = l + 1, w = f - l, d = new Cr(w);
  let g = 0;
  const u = new Array(a), C = new Array(a);
  let h = 0;
  const p = new Uint8Array(t.buffer);
  for (let b = 0; b < a; b++) {
    const A = b < s ? l : y;
    u[b] = p.slice(g, g + A), C[b] = d.encode(u[b]), g += A, h = Math.max(h, A);
  }
  const v = new Uint8Array(r);
  let m = 0, S, B;
  for (S = 0; S < h; S++)
    for (B = 0; B < a; B++)
      S < u[B].length && (v[m++] = u[B][S]);
  for (S = 0; S < w; S++)
    for (B = 0; B < a; B++)
      v[m++] = C[B][S];
  return v;
}
function Tr(t, e, n, r) {
  let o;
  if (Array.isArray(t))
    o = Et.fromArray(t);
  else if (typeof t == "string") {
    let f = e;
    if (!f) {
      const l = Et.rawSplit(t);
      f = st.getBestVersionForData(l, n);
    }
    o = Et.fromString(t, f || 40);
  } else
    throw new Error("Invalid data");
  const i = st.getBestVersionForData(o, n);
  if (!i)
    throw new Error("The amount of data is too big to be stored in a QR Code");
  if (!e)
    e = i;
  else if (e < i)
    throw new Error(
      `
The chosen QR Code version cannot contain this amount of data.
Minimum version required to store current data is: ` + i + `.
`
    );
  const a = Nr(e, n, o), c = gt.getSymbolSize(e), s = new wr(c);
  return br(s, e), Br(s), Ir(s, e), St(s, n, 0), e >= 7 && Ar(s, e), Mr(s, a), isNaN(r) && (r = Mt.getBestMask(
    s,
    St.bind(null, s, n)
  )), Mt.applyMask(r, s), St(s, n, r), {
    modules: s,
    version: e,
    errorCorrectionLevel: n,
    maskPattern: r,
    segments: o
  };
}
ce.create = function(e, n) {
  if (typeof e > "u" || e === "")
    throw new Error("No input text");
  let r = Ct.M, o, i;
  return typeof n < "u" && (r = Ct.from(n.errorCorrectionLevel, Ct.M), o = st.from(n.version), i = Mt.from(n.maskPattern), n.toSJISFunc && gt.setToSJISFunction(n.toSJISFunc)), Tr(e, o, r, i);
};
var Ce = {};
var _t = {};
(function(t) {
  function e(n) {
    if (typeof n == "number" && (n = n.toString()), typeof n != "string")
      throw new Error("Color should be defined as hex string");
    let r = n.slice().replace("#", "").split("");
    if (r.length < 3 || r.length === 5 || r.length > 8)
      throw new Error("Invalid hex color: " + n);
    (r.length === 3 || r.length === 4) && (r = Array.prototype.concat.apply([], r.map(function(i) {
      return [i, i];
    }))), r.length === 6 && r.push("F", "F");
    const o = parseInt(r.join(""), 16);
    return {
      r: o >> 24 & 255,
      g: o >> 16 & 255,
      b: o >> 8 & 255,
      a: o & 255,
      hex: "#" + r.slice(0, 6).join("")
    };
  }
  t.getOptions = function(r) {
    r || (r = {}), r.color || (r.color = {});
    const o = typeof r.margin > "u" || r.margin === null || r.margin < 0 ? 4 : r.margin, i = r.width && r.width >= 21 ? r.width : void 0, a = r.scale || 4;
    return {
      width: i,
      scale: i ? 4 : a,
      margin: o,
      color: {
        dark: e(r.color.dark || "#000000ff"),
        light: e(r.color.light || "#ffffffff")
      },
      type: r.type,
      rendererOpts: r.rendererOpts || {}
    };
  }, t.getScale = function(r, o) {
    return o.width && o.width >= r + o.margin * 2 ? o.width / (r + o.margin * 2) : o.scale;
  }, t.getImageWidth = function(r, o) {
    const i = t.getScale(r, o);
    return Math.floor((r + o.margin * 2) * i);
  }, t.qrToImageData = function(r, o, i) {
    const a = o.modules.size, c = o.modules.data, s = t.getScale(a, i), f = Math.floor((a + i.margin * 2) * s), l = i.margin * s, y = [i.color.light, i.color.dark];
    for (let w = 0; w < f; w++)
      for (let d = 0; d < f; d++) {
        let g = (w * f + d) * 4, u = i.color.light;
        if (w >= l && d >= l && w < f - l && d < f - l) {
          const C = Math.floor((w - l) / s), h = Math.floor((d - l) / s);
          u = y[c[C * a + h] ? 1 : 0];
        }
        r[g++] = u.r, r[g++] = u.g, r[g++] = u.b, r[g] = u.a;
      }
  };
})(_t);
(function(t) {
  const e = _t;
  function n(o, i, a) {
    o.clearRect(0, 0, i.width, i.height), i.style || (i.style = {}), i.height = a, i.width = a, i.style.height = a + "px", i.style.width = a + "px";
  }
  function r() {
    try {
      return document.createElement("canvas");
    } catch {
      throw new Error("You need to specify a canvas element");
    }
  }
  t.render = function(i, a, c) {
    let s = c, f = a;
    typeof s > "u" && (!a || !a.getContext) && (s = a, a = void 0), a || (f = r()), s = e.getOptions(s);
    const l = e.getImageWidth(i.modules.size, s), y = f.getContext("2d"), w = y.createImageData(l, l);
    return e.qrToImageData(w.data, i, s), n(y, f, l), y.putImageData(w, 0, 0), f;
  }, t.renderToDataURL = function(i, a, c) {
    let s = c;
    typeof s > "u" && (!a || !a.getContext) && (s = a, a = void 0), s || (s = {});
    const f = t.render(i, a, s), l = s.type || "image/png", y = s.rendererOpts || {};
    return f.toDataURL(l, y.quality);
  };
})(Ce);
var Ee = {};
var Rr = _t;
function Jt(t, e) {
  const n = t.a / 255, r = e + '="' + t.hex + '"';
  return n < 1 ? r + " " + e + '-opacity="' + n.toFixed(2).slice(1) + '"' : r;
}
function bt(t, e, n) {
  let r = t + e;
  return typeof n < "u" && (r += " " + n), r;
}
function kr(t, e, n) {
  let r = "", o = 0, i = false, a = 0;
  for (let c = 0; c < t.length; c++) {
    const s = Math.floor(c % e), f = Math.floor(c / e);
    !s && !i && (i = true), t[c] ? (a++, c > 0 && s > 0 && t[c - 1] || (r += i ? bt("M", s + n, 0.5 + f + n) : bt("m", o, 0), o = 0, i = false), s + 1 < e && t[c + 1] || (r += bt("h", a), a = 0)) : o++;
  }
  return r;
}
Ee.render = function(e, n, r) {
  const o = Rr.getOptions(n), i = e.modules.size, a = e.modules.data, c = i + o.margin * 2, s = o.color.light.a ? "<path " + Jt(o.color.light, "fill") + ' d="M0 0h' + c + "v" + c + 'H0z"/>' : "", f = "<path " + Jt(o.color.dark, "stroke") + ' d="' + kr(a, i, o.margin) + '"/>', l = 'viewBox="0 0 ' + c + " " + c + '"', w = '<svg xmlns="http://www.w3.org/2000/svg" ' + (o.width ? 'width="' + o.width + '" height="' + o.width + '" ' : "") + l + ' shape-rendering="crispEdges">' + s + f + `</svg>
`;
  return typeof r == "function" && r(null, w), w;
};
var Lr = $n;
var Pt = ce;
var Se = Ce;
var _r = Ee;
function Ft(t, e, n, r, o) {
  const i = [].slice.call(arguments, 1), a = i.length, c = typeof i[a - 1] == "function";
  if (!c && !Lr())
    throw new Error("Callback required as last argument");
  if (c) {
    if (a < 2)
      throw new Error("Too few arguments provided");
    a === 2 ? (o = n, n = e, e = r = void 0) : a === 3 && (e.getContext && typeof o > "u" ? (o = r, r = void 0) : (o = r, r = n, n = e, e = void 0));
  } else {
    if (a < 1)
      throw new Error("Too few arguments provided");
    return a === 1 ? (n = e, e = r = void 0) : a === 2 && !e.getContext && (r = n, n = e, e = void 0), new Promise(function(s, f) {
      try {
        const l = Pt.create(n, r);
        s(t(l, e, r));
      } catch (l) {
        f(l);
      }
    });
  }
  try {
    const s = Pt.create(n, r);
    o(null, t(s, e, r));
  } catch (s) {
    o(s);
  }
}
Q.create = Pt.create;
Q.toCanvas = Ft.bind(null, Se.render);
Q.toDataURL = Ft.bind(null, Se.renderToDataURL);
Q.toString = Ft.bind(null, function(t, e, n) {
  return _r.render(t, n);
});
var Fr = (t, e) => {
  const n = Array.prototype.slice.call(
    Q.create(t, { errorCorrectionLevel: e }).modules.data,
    0
  ), r = Math.sqrt(n.length);
  return n.reduce(
    (o, i, a) => (a % r === 0 ? o.push([i]) : o[o.length - 1].push(i)) && o,
    []
  );
};
function Zr({ ecl: t = "M", size: e = 200, uri: n }) {
  const o = e - parseInt("20", 10) * 2, i = (0, import_react.useMemo)(() => {
    const a = [], c = Fr(n, t), s = o / c.length;
    return [
      { x: 0, y: 0 },
      { x: 1, y: 0 },
      { x: 0, y: 1 }
    ].forEach(({ x: l, y }) => {
      const w = (c.length - 7) * s * l, d = (c.length - 7) * s * y;
      for (let g = 0; g < 3; g++)
        a.push(
          (0, import_jsx_runtime.jsx)(
            "rect",
            {
              fill: g % 2 !== 0 ? "white" : "black",
              height: s * (7 - g * 2),
              width: s * (7 - g * 2),
              x: w + s * g,
              y: d + s * g
            },
            `${g}-${l}-${y}`
          )
        );
    }), c.forEach((l, y) => {
      l.forEach((w, d) => {
        c[y][d] && (y < 7 && d < 7 || y > c.length - 8 && d < 7 || y < 7 && d > c.length - 8 || a.push(
          (0, import_jsx_runtime.jsx)(
            "rect",
            {
              fill: "black",
              height: s,
              width: s,
              x: y * s,
              y: d * s
            },
            `square-${y}-${d}`
          )
        ));
      });
    }), a;
  }, [t, o, n]);
  return (0, import_jsx_runtime.jsxs)("div", { className: Ve, children: [
    (0, import_jsx_runtime.jsx)(
      "div",
      {
        className: Ue,
        style: {
          width: o
        }
      }
    ),
    (0, import_jsx_runtime.jsxs)("svg", { height: o, style: { all: "revert" }, width: o, children: [
      (0, import_jsx_runtime.jsx)("title", { children: "QR Code" }),
      (0, import_jsx_runtime.jsx)("rect", { fill: "transparent", height: o, width: o }),
      i
    ] })
  ] });
}
function Dr({
  open: t,
  onClose: e,
  url: n,
  isError: r,
  error: o
}) {
  return (0, import_jsx_runtime.jsx)(On, { open: t, titleId: "Sign in with Farcaster", onClose: e, children: (0, import_jsx_runtime.jsx)("div", { className: "fc-authkit-qrcode-dialog", children: (0, import_jsx_runtime.jsx)("div", { className: Kn, children: r ? (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)("div", { className: Yt, children: "Error" }),
    (0, import_jsx_runtime.jsx)("div", { className: Kt, children: (o == null ? void 0 : o.message) ?? "Unknown error, please try again." })
  ] }) : (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)("div", { className: Yt, children: "Sign in with Farcaster" }),
    (0, import_jsx_runtime.jsx)("div", { className: Kt, children: "To sign in with Farcaster, scan the code below with your phone's camera." }),
    (0, import_jsx_runtime.jsx)("div", { className: Yn, children: (0, import_jsx_runtime.jsx)(Zr, { uri: n, size: 200 }) }),
    (0, import_jsx_runtime.jsx)("div", { style: { display: "flex", justifyContent: "center" }, children: (0, import_jsx_runtime.jsxs)(
      Gt,
      {
        kind: "tertiary",
        style: {
          display: "flex",
          alignItems: "center",
          fontWeight: 500
        },
        onClick: () => {
          window.location.href = n;
        },
        children: [
          (0, import_jsx_runtime.jsxs)(
            "svg",
            {
              xmlns: "http://www.w3.org/2000/svg",
              width: 12,
              height: 18,
              fill: "none",
              children: [
                (0, import_jsx_runtime.jsx)("title", { children: "Sign in With Farcaster QR Code" }),
                (0, import_jsx_runtime.jsx)(
                  "path",
                  {
                    fill: "#7C65C1",
                    fillRule: "evenodd",
                    d: "M0 3a3 3 0 0 1 3-3h6a3 3 0 0 1 3 3v12a3 3 0 0 1-3 3H3a3 3 0 0 1-3-3V3Zm4-1.5v.75c0 .414.336.75.75.75h2.5A.75.75 0 0 0 8 2.25V1.5h1A1.5 1.5 0 0 1 10.5 3v12A1.5 1.5 0 0 1 9 16.5H3A1.5 1.5 0 0 1 1.5 15V3A1.5 1.5 0 0 1 3 1.5h1Z",
                    clipRule: "evenodd"
                  }
                )
              ]
            }
          ),
          (0, import_jsx_runtime.jsx)("span", { style: { marginLeft: 9 }, children: "I'm using my phone →" })
        ]
      }
    ) })
  ] }) }) }) });
}
var Ur = "_8rz8bk0";
function Vr({
  debug: t,
  hideSignOut: e,
  onSignOut: n,
  ...r
}) {
  const { onSuccess: o, onStatusResponse: i, onError: a } = r, c = (0, import_react.useCallback)(
    (L) => {
      o == null || o(L);
    },
    [o]
  ), s = (0, import_react.useCallback)(
    (L) => {
      i == null || i(L);
    },
    [i]
  ), f = (0, import_react.useCallback)(
    (L) => {
      a == null || a(L);
    },
    [a]
  ), l = (0, import_react.useCallback)(() => {
    n == null || n();
  }, [n]), y = Fe({
    ...r,
    onSuccess: c,
    onStatusResponse: s,
    onError: f
  }), {
    signIn: w,
    signOut: d,
    connect: g,
    reconnect: u,
    isSuccess: C,
    isError: h,
    error: p,
    channelToken: v,
    url: m,
    data: S,
    validSignature: B
  } = y, b = (0, import_react.useCallback)(() => {
    M(false), d(), l();
  }, [d, l]), [A, M] = (0, import_react.useState)(false), N = (0, import_react.useCallback)(() => {
    h && u(), M(true), w(), m && It() && (window.location.href = m);
  }, [h, u, w, m]), k = C && B;
  return (0, import_react.useEffect)(() => {
    v || g();
  }, [v, g]), (0, import_jsx_runtime.jsxs)("div", { className: "fc-authkit-signin-button", children: [
    k ? (0, import_jsx_runtime.jsx)(
      Qe,
      {
        userData: S,
        signOut: b,
        hideSignOut: !!e
      }
    ) : (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
      (0, import_jsx_runtime.jsx)(Oe, { initializing: !m, onClick: N, label: "Sign in" }),
      m && (0, import_jsx_runtime.jsx)(
        Dr,
        {
          open: A && !It(),
          onClose: () => M(false),
          url: m,
          isError: h,
          error: p
        }
      )
    ] }),
    t && (0, import_jsx_runtime.jsx)("div", { className: Ur, children: (0, import_jsx_runtime.jsx)("pre", { children: JSON.stringify(y, null, 2) }) })
  ] });
}
function Hr() {
  const { isAuthenticated: t, profile: e } = q();
  return { isAuthenticated: t, profile: e };
}
function $r() {
  return (0, import_jsx_runtime.jsxs)(Pe, { config: {
    rpcUrl: "https://mainnet.optimism.io"
  }, children: [
    (0, import_jsx_runtime.jsx)("div", { style: { position: "fixed", top: 12, right: 12, zIndex: 1e3 }, children: (0, import_jsx_runtime.jsx)(
      Vr,
      {
        nonce: "abcd1234",
        requestId: "some-unique-request-id",
        timeout: 2e4,
        onError: (e) => console.error("error callback:", e),
        onSuccess: (e) => console.log("success callback:", e),
        onStatusResponse: (e) => console.log("status callback:", e),
        onSignOut: () => console.log("sign out callback"),
        debug: true
      }
    ) }),
    (0, import_jsx_runtime.jsx)(xr, {})
  ] });
}
function xr() {
  const {
    isAuthenticated: t,
    profile: { fid: e, bio: n, displayName: r, custody: o }
  } = Hr();
  return (0, import_jsx_runtime.jsx)("div", { style: { fontFamily: "sans-serif" }, children: t && (0, import_jsx_runtime.jsxs)("div", { children: [
    e && (0, import_jsx_runtime.jsxs)("p", { children: [
      (0, import_jsx_runtime.jsx)("strong", { children: "FID:" }),
      " ",
      e
    ] }),
    r && (0, import_jsx_runtime.jsxs)("p", { children: [
      (0, import_jsx_runtime.jsx)("strong", { children: "Display name:" }),
      " ",
      r
    ] }),
    n && (0, import_jsx_runtime.jsxs)("p", { children: [
      (0, import_jsx_runtime.jsx)("strong", { children: "Bio:" }),
      " ",
      n
    ] }),
    o && (0, import_jsx_runtime.jsxs)("p", { children: [
      (0, import_jsx_runtime.jsx)("strong", { children: "Custody address:" }),
      " ",
      o
    ] })
  ] }) });
}
function jr() {
  const { signInMessage: t } = q();
  return t;
}
var export_generateNonce = import_siwe.generateNonce;
export {
  AuthClientError,
  Pe as AuthKitProvider,
  $r as Demo,
  Zr as QRCode,
  Vr as SignInButton,
  authenticate,
  buildSignInMessage,
  createAppClient,
  createChannel,
  createClient,
  createWalletClient,
  export_generateNonce as generateNonce,
  get,
  parseSignInURI2 as parseSignInURI,
  poll,
  post,
  status,
  unwrap,
  lt as useAppClient,
  Te as useCreateChannel,
  Hr as useProfile,
  Fe as useSignIn,
  jr as useSignInMessage,
  Re as useVerifySignInMessage,
  Le as useWatchStatus,
  verifySignInMessage,
  viemConnector,
  watchStatus
};
/*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

aes-js/lib.commonjs/aes.js:
  (*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. *)
*/
//# sourceMappingURL=@farcaster_auth-kit.js.map
